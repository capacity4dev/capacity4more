<?php
/**
 * @file
 * Helper functionality around dates.
 */

include_once 'c4m_helper_date.features.inc';

/**
 * Implements hook_date_format_types().
 */
function c4m_helper_date_date_format_types() {
  // Define the core date format types.
  return array(
    'c4m_long_without_time' => t('C4M long without time'),
    'c4m_long_with_time' => t('C4M long with time'),
  );
}

/**
 * Implements hook_data_formats().
 */
function c4m_helper_date_date_formats() {
  return array(
    array(
      'type' => 'c4m_long_without_time',
      'format' => 'j F Y',
      'locales' => array(),
    ),
    array(
      'type' => 'c4m_long_with_time',
      'format' => 'j F Y, G:i',
      'locales' => array(),
    ),
  );
}

/**
 * Helper function to return c4m date formatters (only).
 *
 * @return array
 *    Returns an array with date formatters.
 */
function c4m_helper_date_formatters() {
  $format_types    = system_get_date_types();
  $date_formatters = array();
  foreach (system_get_date_formats() as $type => $format) {
    // Only use date format types from C4M.
    if (FALSE === strpos($type, 'c4m', 0)) {
      continue;
    }
    foreach ($format as $format_instance) {
      $date_formatters[$format_instance['format']] = t("Time ago or date format '!date'",
        array('!date' => $format_types[$type]['title'] . ' (' . $format_instance['format'] . ')'));
    }
  }
  return $date_formatters;
}

/**
 * Helper function to render timestamp in some format.
 *
 * The timestamp gets rendered as date or time ago depending on the
 * time which is passed since.
 *
 * @param int $timestamp
 *   Timestamp on which to base output time ago or date.
 * @param string $format
 *   The date format for the (old) date.
 * @param int $switch
 *   The time past that decides to show time ago or date.
 *   By default time ago will be shown as long,
 *   as date is within 24 hours of now.
 * @param string $operator
 *   The operator which decides if 'time ago' is used if time since is smaller
 *   or bigger than current time.
 * @param string $string
 *    String to return instead of date formatting.
 *
 * @return mixed|null|string
 *    A translated date string in one of the requested formats.
 */
function c4m_helper_date_time_ago($timestamp, $format = 'j F Y', $switch = 86400, $operator = '<', $string = '') {
  if (!is_numeric($timestamp) ||
      (int) $timestamp != $timestamp) {
    return FALSE;
  }

  $time_since = time() - $timestamp;

  if ('<' === $operator &&
    $time_since < $switch) {
    $suffix = t('ago');
    return c4m_helper_date_format_interval($time_since, 1, $suffix);
  }
  elseif ('>' === $operator &&
          $time_since > $switch) {
    $suffix = t('ago');
    return c4m_helper_date_format_interval($time_since, 1, $suffix);
  }

  if ('<none>' === $format &&
      !empty($string)) {
    return $string;
  }

  return format_date($timestamp, 'custom', $format);
}


/**
 * Formats a time interval with the requested granularity.
 *
 * Modified copy of format_interval().
 *  - We modify the units somewhat.
 *  - We provide an optional suffix.
 *
 * @param int $interval
 *   The length of the interval in seconds.
 * @param int $granularity
 *   How many different units to display in the string.
 * @param string $suffix
 *   A suffix for the rendered date.
 *   Optional language code to translate to a language other than
 *   what is used to display the page.
 *
 * @return string
 *   A translated string representation of the interval.
 *
 * @see format_interval
 */
function c4m_helper_date_format_interval($interval, $granularity = 2,
                                         $suffix = '', $langcode = NULL) {
  $units = array(
    '1 year|@count years' => 31536000,
    '1 month|@count months' => 2592000,
    '1 week|@count weeks' => 604800,
    '1 day|@count days' => 86400,
    '1 hour|@count hours' => 3600,
    '1 min|@count minutes' => 60,
    '1 sec|@count seconds' => 1,
  );
  $output = '';
  foreach ($units as $key => $value) {
    $key = explode('|', $key);
    if ($interval >= $value) {
      $output .= ($output ? ' ' : '') . format_plural(floor($interval / $value), $key[0], $key[1], array(), array('langcode' => $langcode));
      $interval %= $value;
      $granularity--;
    }

    if ($granularity == 0) {
      break;
    }
  }
  $output = $output ? $output : t('0 seconds', array(), array('langcode' => $langcode));
  $output = $suffix ? $output . ' ' . $suffix : $output;
  return $output;
}
