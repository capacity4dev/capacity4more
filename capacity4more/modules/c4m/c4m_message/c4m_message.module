<?php
/**
 * @file
 * Code for the C4m Message feature.
 */

include_once 'c4m_message.features.inc';

/**
 * Implements hook_node_update().
 *
 * Create a node-updated message.
 */
function c4m_message_node_update($node) {
  // Check if an edit message was created in the past 24, to prevent multiple
  // messages from multiple edits.
  $time_ago = strtotime(date('r', time()) . '-1 day');

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('type', 'node_edited')
    ->propertyCondition('timestamp', $time_ago, '>=')
    ->fieldCondition('field_node', 'target_id', $node->nid)
    ->execute();

  if (!empty($result['message'])) {
    // A recent edit message already exists; Update its timestamp to the current
    // edit.
    $wrapper = entity_metadata_wrapper('message', key($result['message']));
    $wrapper->timestamp->set($node->changed);
    $wrapper->save();
  }
  else {
    // Create a new "Project edited" message.
    $message = message_create('node_edited');
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_node->set($node);
    $wrapper->save();
  }
}

/**
 * Implements hook_node_insert().
 *
 * Create a node-added message.
 */
function c4m_message_node_insert($node) {
  $message = message_create('node_added');
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node->set($node);
  $wrapper->save();
}

/**
 * Implements hook_comment_insert().
 *
 * Create a comment-added message.
 */
function c4m_message_comment_insert($comment) {
  $message = message_create('comment_added');
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_comment->set($comment);
  $wrapper->save();
}

/**
 * Implements hook_user_insert().
 *
 * Create a user-added message.
 */
function c4m_message_user_insert(&$edit, $account, $category) {
  $message = message_create('user_added', array(), $account);
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->save();
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add "Activity stream" view mode.
 */
function c4m_message_entity_info_alter(&$entity_info) {
  $entity_info['message']['view modes']['activity_stream'] = array(
    'label' => t('Activity stream'),
    'custom settings' => TRUE,
  );
}
