<?php
/**
 * @file
 * Code for the C4m Message feature.
 */

include_once 'c4m_message.features.inc';

/**
 * Implements hook_node_update().
 *
 * Create a node-updated message.
 */
function c4m_message_node_update($node) {
  // Check if an edit message was created in the past 24, to prevent multiple
  // messages from multiple edits.
  $time_ago = strtotime(date('r', time()) . '-1 day');

  $query = new entityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('type', 'node_edited')
    ->propertyCondition('timestamp', $time_ago, '>=')
    ->fieldCondition('field_node', 'target_id', $node->nid)
    ->execute();

  if (!empty($result['message'])) {
    // A recent edit message already exists; Update its timestamp to the current
    // edit.
    $wrapper = entity_metadata_wrapper('message', key($result['message']));
    $wrapper->timestamp->set($node->changed);
    $wrapper->save();
  }
  else {
    // Create a new "Project edited" message.
    $message = message_create('node_edited');
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_node->set($node);
    $wrapper->save();
  }
}

/**
 * Implements hook_node_insert().
 *
 * Create a node-added message.
 */
function c4m_message_node_insert($node) {
  $message = message_create('node_added');
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_node->set($node);
  $wrapper->save();
}

/**
 * Implements hook_comment_insert().
 *
 * Create a comment-added message.
 */
function c4m_message_comment_insert($comment) {
  $message = message_create('comment_added');
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_comment->set($comment);
  $wrapper->save();
}

/**
 * Implements hook_user_insert().
 *
 * Create a user-added message.
 */
function c4m_message_user_insert(&$edit, $account, $category) {
  $message = message_create('user_added', array(), $account);
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->save();
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add "Activity stream" view mode.
 */
function c4m_message_entity_info_alter(&$entity_info) {
  $entity_info['message']['view modes']['activity_stream'] = array(
    'label' => t('Activity stream'),
    'custom settings' => TRUE,
  );
}

/**
 * Activity stream messages preprocess.
 */
function c4m_message_preprocess_message(&$variables) {
  $message = $variables['message'];
  if (!in_array($message->type, array('node_added', 'node_edited', 'comment_added', 'user_added'))) {
    return;
  }

  $variables['theme_hook_suggestions'][] = 'message__activity_stream';

  $wrapper = entity_metadata_wrapper('user', $message->uid);
  $picture = $wrapper->c4m_media->value();

  $variables['user_picture'] = $picture ? theme('image_style', array('style_name' => 'thumbnail', 'path' => $picture['uri'])) : '';

  $variables['created'] = t('%time ago', array('%time' => format_interval(time() - $message->timestamp , 2)));

  $variables['activity_class'] = '';

  $variables['user_name'] = $wrapper->c4m_first_name->value() . ' ' . $wrapper->c4m_last_name->value();
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Override the message template.
 */
function c4m_message_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'c4m_message');
  $theme_registry['message']['theme path'] = $path;
  $theme_registry['message']['template'] = $path . '/message';
}
