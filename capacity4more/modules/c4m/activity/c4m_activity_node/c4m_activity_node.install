<?php
/**
 * @file
 * Install hooks for the c4m_activity_node module.
 */

/**
 * Implements hook_install().
 */
function c4m_activity_node_install() {
  $actions = array(
    'insert',
    'update',
    'delete',
  );

  _c4m_activity_node_install_message_types();
  _c4m_activity_node_install_create_fields($actions);
}

/**
 * Create the message types.
 */
function _c4m_activity_node_install_message_types() {
  $types   = array();
  $types[] = entity_import(
    'message_type', '{
    "name" : "c4m_activity_node_insert",
    "description" : "Node : Create",
    "argument_keys" : [],
    "argument" : [],
    "category" : "message_type",
    "data" : {
      "token options" : { "clear" : 1 },
      "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" }
    },
    "language" : "",
    "arguments" : null,
    "message_text" : { "und" : [
        {
          "value" : "\\u003Ca href=\\u0022user\\/[message:user:uid]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created @{message:c4m-activity-node:type}: \\u003Ca href=\\u0022node\\/[message:c4m-activity-node:nid]\\u0022\\u003E[message:c4m-activity-node:title]\\u003C\\/a\\u003E.",
          "format" : "filtered_html",
          "safe_value" : "\\u003Cp\\u003E\\u003Ca href=\\u0022user\\/[message:user:uid]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E created @{message:c4m-activity-node:type}: \\u003Ca href=\\u0022node\\/[message:c4m-activity-node:nid]\\u0022\\u003E[message:c4m-activity-node:title]\\u003C\\/a\\u003E.\\u003C\\/p\\u003E\\n"
        }
      ]
    },
    "rdf_mapping" : []
  }'
  );
  $types[] = entity_import(
    'message_type', '{
    "name" : "c4m_activity_node_update",
    "description" : "Node : Update",
    "argument_keys" : [],
    "argument" : [],
    "category" : "message_type",
    "data" : {
      "token options" : { "clear" : 1 },
      "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" }
    },
    "language" : "",
    "arguments" : null,
    "message_text" : { "und" : [
        {
          "value" : "\\u003Ca href=\\u0022user\\/[message:user:uid]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E updated @{message:c4m-activity-node:type}: \\u003Ca href=\\u0022node\\/[message:c4m-activity-node:nid]\\u0022\\u003E[message:c4m-activity-node:title]\\u003C\\/a\\u003E.",
          "format" : "filtered_html",
          "safe_value" : "\\u003Cp\\u003E\\u003Ca href=\\u0022user\\/[message:user:uid]\\u0022\\u003E[message:user:name]\\u003C\\/a\\u003E updated @{message:c4m-activity-node:type}: \\u003Ca href=\\u0022node\\/[message:c4m-activity-node:nid]\\u0022\\u003E[message:c4m-activity-node:title]\\u003C\\/a\\u003E.\\u003C\\/p\\u003E\\n"
        }
      ]
    },
    "rdf_mapping" : []
  }'
  );
  $types[] = entity_import(
    'message_type', '{
    "name" : "c4m_activity_node_delete",
    "description" : "Node : Delete",
    "argument_keys" : [],
    "argument" : [],
    "category" : "message_type",
    "data" : {
      "token options" : { "clear" : 0 },
      "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" }
    },
    "language" : "",
    "arguments" : null,
    "message_text" : { "und" : [
        {
          "value" : "\\u003Ca href=\\u0022user\\/@{message:user:uid}\\u0022\\u003E@{message:user:name}\\u003C\\/a\\u003E deleted @{message:c4m-activity-node:type} : @{message:c4m-activity-node:title}",
          "format" : "filtered_html",
          "safe_value" : "\\u003Cp\\u003E\\u003Ca href=\\u0022user\\/@{message:user:uid}\\u0022\\u003E@{message:user:name}\\u003C\\/a\\u003E deleted @{message:c4m-activity-node:type} : @{message:c4m-activity-node:title}\\u003C\\/p\\u003E\\n"
        }
      ]
    },
    "rdf_mapping" : []
  }'
  );

  foreach ($types as $type) {
    message_type_save($type);
  }
}

/**
 * Helper to create the node reference fields.
 *
 * @param array $actions
 *   The possible action types.
 */
function _c4m_activity_node_install_create_fields($actions) {
  $types = array(
    'c4m_activity_node' => array(
      'label' => st('Node'),
      'description' => st('The node where this message is about.'),
    ),
    'c4m_activity_group' => array(
      'label' => st('Group'),
      'description' => st('The (optional) group the node belongs to.'),
    ),
  );

  $weight = 0;
  foreach ($types as $type => $info) {
    $weight++;

    $field = field_info_field($type);
    if (!$field) {
      $field = array(
        'active' => 1,
        'cardinality' => 1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => $type,
        'foreign keys' => array(
          'node' => array(
            'columns' => array(
              'target_id' => 'nid',
            ),
            'table' => 'node',
          ),
        ),
        'indexes' => array(
          'target_id' => array(
            0 => 'target_id',
          ),
        ),
        'locked' => 0,
        'module' => 'entityreference',
        'settings' => array(
          'handler' => 'base',
          'handler_settings' => array(
            'behaviors' => array(
              'views-select-list' => array(
                'status' => 0,
              ),
            ),
            'sort' => array(
              'type' => 'none',
            ),
            'target_bundles' => array(),
          ),
          'target_type' => 'node',
        ),
        'translatable' => 0,
        'type' => 'entityreference',
      );
      field_create_field($field);
    }

    foreach ($actions as $action) {
      // message-c4m_activity_node_ACTION-c4m_activity_node
      $instance = array(
        'bundle' => 'c4m_activity_node_' . $action,
        'default_value' => NULL,
        'default_value_function' => '',
        'deleted' => 0,
        'description' => $info['description'],
        'display' => array(
          'default' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 1,
          ),
        ),
        'entity_type' => 'message',
        'field_name' => $type,
        'label' => $info['label'],
        'required' => 1,
        'settings' => array(
          'behaviors' => array(
            'prepopulate' => array(
              'status' => 0,
            ),
          ),
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'entityreference',
          'settings' => array(
            'match_operator' => 'CONTAINS',
            'path' => '',
            'size' => 60,
          ),
          'type' => 'entityreference_autocomplete',
          'weight' => $weight,
        ),
      );
      field_create_instance($instance);
    }
  }
}
