<?php
/**
 * @file
 * Web tests for the c4m_activity_node module configuration functionality.
 */

/**
 * Tests about the node activity configuration.
 */
class C4mActivityNodeTestConfig extends DrupalWebTestCase {

  /**
   * Get the test info.
   *
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'c4m - Activity Node Configuration',
      'description' => 'Test the activity configuration for node types.',
      'group' => 'capacity4more:activity:node',
    );
  }

  /**
   * Setup the test environment.
   */
  public function setUp() {
    // Create a content type programmaticaly.
    $type = $this->drupalCreateContentType();
    $this->type = $type;
    
    $modules = array('message', 'c4m_activity_node');
    parent::setUp($modules);

    // Create a new user with some permissions you need; then log in.
    $admin = $this->drupalCreateUser(array(
        'administer content types',
        'administer nodes'
      ));
    $this->drupalLogin($admin);

    // Create a new node type.
    node_type_save($this->type);
  }

  /**
   * Test the functionality to set the activity configuration for node types.
   */
  public function testConfig() {
    // Test the variable name creator.
    $name = c4m_activity_node_variable_name($this->type->name);
    $this->assertEqual('c4m_activity_node_' . $this->type->name, $name);

    // Test the default variable value.
    $this->assertFalse(variable_get($name, FALSE));
    $this->assertFalse(c4m_activity_node_needs_message($this->type->type, 'insert'));
    $this->assertFalse(c4m_activity_node_needs_message($this->type->type, 'update'));
    $this->assertFalse(c4m_activity_node_needs_message($this->type->type, 'delete'));

    // Edit the activity settings.
    $edit = array(
      'c4m_activity_node[insert]' => 'insert',
      'c4m_activity_node[update]' => 'update',
    );
    $this->drupalPost(
      'admin/structure/types/manage/' . $this->type->type,
      $edit,
      t('Save content type')
    );

    // Check if the settings are saved in the variable.
    $config = variable_get($name, array());
    $this->assertEqual(
      $config,
      array('insert' => 'insert', 'update' => 'update', 'delete' => 0)
    );
    $this->assertTrue(c4m_activity_node_needs_message($this->type->type, 'insert'));
    $this->assertTrue(c4m_activity_node_needs_message($this->type->type, 'update'));
    $this->assertFalse(c4m_activity_node_needs_message($this->type->type, 'delete'));

    // Check messages when deleting nodes in combinations with the message
    // module settings.
    variable_set(
      $name,
      array('insert' => 'insert', 'update' => 'update', 'delete' => 'delete')
    );

    $this->assertFalse(c4m_activity_node_needs_message($this->type->type, 'delete'));
    variable_set('message_delete_on_entity_delete', array());
    $this->assertTrue(c4m_activity_node_needs_message($this->type->type, 'delete'));

    // Rename the node type.
    $new_type = $this->type->type . '_new';
    $new_name = $name . '_new';
    $edit = array(
      'type' => $new_type,
    );
    $this->drupalPost(
      'admin/structure/types/manage/' . $this->type->type,
      $edit,
      t('Save content type')
    );

    // Check if the old variable is deleted and a new one is created.
    $this->assertFalse(variable_get($name, FALSE));
    $this->assertEqual(
      variable_get($new_name, array()),
      array('insert' => 'insert', 'update' => 'update', 'delete' => 0)
    );

    // Delete the node type.
    node_type_delete($new_type);

    // Check if the variable is deleted.
    $this->assertFalse(variable_get($new_name, FALSE));
  }

}
