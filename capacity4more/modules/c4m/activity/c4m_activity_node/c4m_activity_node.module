<?php
/**
 * @file
 * Code to support logging type activities using the messaging module.
 */

include_once 'c4m_activity_node.features.inc';

/******************************************************************************
 * Configuration
 ******************************************************************************/

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add messaging settings configuration to the type settings form.
 *
 * @see c4m_activity_node_node_type_form_save
 */
function c4m_activity_node_form_node_type_form_alter(
  &$form, &$form_state, $form_id
) {

  $info = $form['#node_type'];
  $default_config = array();
  if (!empty($info->type)) {
    $default_config = variable_get(
      c4m_activity_node_variable_name($info->type),
      array()
    );
  }

  $form['c4m_activity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Activity'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
  );
  $form['c4m_activity']['c4m_activity_node'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log node activity when'),
    '#description' => t('Select what node activities should be saved in the activity log.'),
    '#options' => array(
      'insert' => t('A node is created'),
      'update' => t('A node is updated'),
      'delete' => t('A node is deleted'),
    ),
    '#default_value' => $default_config,
  );

  $form['#submit'][] = 'c4m_activity_node_node_type_form_save';
}

/**
 * Saves the type type specific message settings.
 *
 * @see c4m_activity_node_form_node_type_form_alter
 */
function c4m_activity_node_node_type_form_save($form, $form_state) {
  $values = $form_state['values'];

  // Save the configuration.
  variable_set(
    c4m_activity_node_variable_name($values['type']),
    $values['c4m_activity_node']
  );

  // Delete the old variable if the machine name has changed.
  if ($values['type'] !== $values['old_type']) {
    variable_del(
      c4m_activity_node_variable_name($values['old_type'])
    );
  }
}

/**
 * Implements hook_node_type_delete().
 *
 * Delete the activity settings if the type type is deleted.
 */
function c4m_activity_node_node_type_delete($info) {
  variable_del(
    c4m_activity_node_variable_name($info->type)
  );
}

/**
 * Helper to determine if the type action needs a message or not.
 *
 * The config from the variables table is used to check if the given type type
 * requires messages.
 *
 * @param string $type
 *   The type type we want to log a message for.
 * @param string $action
 *   The action performed on the type.
 *
 * @return bool
 *   Needs an message yes/no.
 */
function c4m_activity_node_needs_message($type, $action) {
  $config = variable_get(c4m_activity_node_variable_name($type), FALSE);
  if (!$config) {
    return FALSE;
  }

  if (empty($config[$action]) || $config[$action] !== $action) {
    return;
  }

  return TRUE;
}

/**
 * Helper to get the variable name to access the activity config per content type.
 *
 * @param string $type
 *   The content type.
 *
 * @return string
 *   The variable name.
 */
function c4m_activity_node_variable_name($type) {
  return 'c4m_activity_node_' . $type;
}


/******************************************************************************
 * Message logging
 ******************************************************************************/

/**
 * Implements hook_node_insert().
 *
 * Adds a node created message to the message table.
 */
function c4m_activity_node_node_insert($node) {
  if (!c4m_activity_node_needs_message($node->type, 'insert')) {
    return;
  }

  $message = c4m_activity_node_create_message($node, 'insert');
  $message->save();
}

/**
 * Implements hook_node_update().
 *
 * Adds a node updated message to the message table.
 * The message will only be created if the last insert/update of the node was
 * not done during the last 6 hours.
 */
function c4m_activity_node_node_update($node) {
  if (!c4m_activity_node_needs_message($node->type, 'update')) {
    return;
  }

  $message = c4m_activity_node_create_message($node, 'update');
  $message->save();
}

/**
 * Create a message for a node based on the given action.
 *
 * @param stdClass $node
 *   The node that needs an message.
 * @param string $action
 *   The action performed on the node.
 *
 * @return EntityMetadataWrapper
 */
function c4m_activity_node_create_message($node, $action) {
  $message = message_create('c4m_activity_node_' . $action);

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->c4m_activity_node->set($node);
  if ($group_nid = _c4m_activity_node_get_node_group($node)) {
    $wrapper->c4m_activity_group->set($group_nid);
  }

  return $wrapper;
}

/**
 * Get the last stored message for a given node.
 *
 * @param stdClass $node
 *   The node we want to load the message for.
 * @param int $time_ago
 *   The minimum timestamp the record must have to be included in the query.
 *
 * @return NULL | EntityMetadataWrapper
 *
 * @deprecated
 */
function c4m_activity_node_get_last_message($node, $time_ago = 0) {
  $query = new entityFieldQuery();
  $query
    ->entityCondition('entity_type', 'message')
    ->fieldCondition('c4m_activity_node', 'target_id', $node->nid)
    ->propertyOrderBy('timestamp', 'DESC');

  if ($time_ago > 0) {
    $query->propertyCondition('timestamp', (int)$time_ago, '>=');
  }

  $result = $query->execute();
  if (empty($result['message'])) {
    return;
  }

  $message = entity_metadata_wrapper('message', key($result['message']));
  return $message;
}


/**
 * Fetch the group of a node.
 *
 * @param stdClass $node
 *   A node to search its group.
 *
 * @return int | NULL
 *   Group node ID.
 */
function _c4m_activity_node_get_node_group($node) {
  if (!module_exists('og')) {
    return;
  }

  if (!og_is_group_content_type('node', $node->type)) {
    return;
  }

  $groups = og_get_entity_groups('node', $node);
  if (empty($groups['node'])) {
    return;
  }

  // TODO: What if a node is added to another group then the original group?
  $group = reset($groups['node']);
  if (!$group) {
    return;
  }

  return $group;
}
