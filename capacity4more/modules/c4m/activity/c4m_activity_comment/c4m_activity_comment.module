<?php
/**
 * @file
 * Code to support logging comment activities using the messaging module.
 */

/******************************************************************************
 * Configuration
 ******************************************************************************/

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add messaging settings configuration to the node settings form.
 *
 * @see c4m_activity_comment_node_type_form_save()
 */
function c4m_activity_comment_form_node_type_form_alter(
  &$form, &$form_state, $form_id
) {

  $info = $form['#node_type'];
  $default_config = array();
  if (!empty($info->type)) {
    $default_config = variable_get(
      c4m_activity_comment_variable_name($info->type),
      array()
    );
  }

  if (empty($form['c4m_activity'])) {
    $form['c4m_activity'] = array(
      '#type' => 'fieldset',
      '#title' => t('Activity'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
    );
  }
  $form['c4m_activity']['c4m_activity_comment'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log comment activity when'),
    '#description' => t('Select what comment activities should be saved in the activity log.'),
    '#options' => array(
      'insert' => t('A comment is created'),
      'update' => t('A comment is updated'),
      'delete' => t('A comment is deleted'),
    ),
    '#default_value' => $default_config,
    '#weight' => 1,
  );

  $form['#submit'][] = 'c4m_activity_comment_node_type_form_save';
}

/**
 * Saves the type type specific message settings.
 *
 * @see c4m_activity_comment_form_node_type_form_alter
 */
function c4m_activity_comment_node_type_form_save($form, $form_state) {
  $values = $form_state['values'];

  // Save the configuration.
  variable_set(
    c4m_activity_comment_variable_name($values['type']),
    $values['c4m_activity_comment']
  );

  // Delete the old variable if the machine name has changed.
  if ($values['type'] !== $values['old_type']) {
    variable_del(
      c4m_activity_comment_variable_name($values['old_type'])
    );
  }
}

/**
 * Implements hook_node_type_delete().
 *
 * Delete the activity settings if the type type is deleted.
 */
function c4m_activity_comment_node_type_delete($info) {
  variable_del(
    c4m_activity_comment_variable_name($info->type)
  );
}

/**
 * Helper to determine if the type action needs a message or not.
 *
 * The config from the variables table is used to check if the given type type
 * requires messages.
 *
 * @param string $type
 *   The content type we want to log a message for.
 *   This supports also content types prefixed with the "comment_node_" prefix.
 * @param string $action
 *   The action performed on the type. The supported actions are:
 *   - insert
 *   - update
 *   - delete
 *
 * @return bool
 *   Needs an message yes/no.
 */
function c4m_activity_comment_needs_message($type, $action) {
  // Cleanup types received from a comment.
  $type = preg_replace('/^comment_node_/', '', $type);

  $config = variable_get(c4m_activity_comment_variable_name($type), FALSE);
  if (!$config) {
    return FALSE;
  }

  if (empty($config[$action]) || $config[$action] !== $action) {
    return FALSE;
  }

  // Check if messages are deleted when the node is deleted.
  // If so => no message needed.
  if ($action === 'delete'
    && in_array('comment', variable_get(
        'message_delete_on_entity_delete', array('node', 'user', 'taxonomy_term', 'comment')
      ))
  ) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Helper to determine if a comment update needs a revision.
 *
 * This is different then @see c4m_activity_comment_needs_message() as this:
 *   1. Checks the configuration for the node type.
 *   2. Checks if there is an message within the last 6 hours.
 *   3. Checks if the last message type is one of the types we don't want
 *      duplicates for.
 *   4. Checks if that message is by the same user as the one updating the node.
 *
 * @param stdClass $comment
 *   The comment that is being updated.
 *
 * @return bool
 *   Needs an update yes/no.
 */
function c4m_activity_comment_update_needs_message($comment) {
  // 1. Check config for the node type.
  if (!c4m_activity_comment_needs_message($comment->node_type, 'update')) {
    return FALSE;
  }

  // 2. Load the last previous message within the last 6 hours timeframe.
  $time_ago = strtotime(date('r', time()) . '-6 hours');
  $message = c4m_activity_comment_get_last_message($comment, $time_ago);
  if (!$message) {
    return TRUE;
  }

  // 3. Check if last message was one of the types we don't want to duplicate.
  $types = array('c4m_activity_comment_insert', 'c4m_activity_comment_update');
  if (!in_array($message->getBundle(), $types)) {
    return TRUE;
  }

  // @TODO: 4. Check if the last message was for another user then the one updating the comment.
  $account = $GLOBALS['user'];
  if ((int) $account->uid !== (int) $message->user->uid->value()) {
    return TRUE;
  }

  // No update needed.
  // @TODO: should we update the message timestamp? This could lead to wrong data.
  // $message->timestamp->set($node->changed);
  // $message->save();

  return FALSE;
}

/**
 * Helper to get the variable name to access the activity config per content type.
 *
 * @param string $type
 *   The content type.
 *
 * @return string
 *   The variable name.
 */
function c4m_activity_comment_variable_name($type) {
  return 'c4m_activity_comment_' . $type;
}


/******************************************************************************
 * Message logging
 ******************************************************************************/

/**
 * Create a message for a comment based on the given action.
 *
 * @param stdClass $comment
 *   The comment that needs an message.
 * @param string $action
 *   The action performed on the node.
 *
 * @return EntityMetadataWrapper
 */
function c4m_activity_comment_create_message($comment, $action) {
  $node = node_load($comment->nid);
  $group_nid = _c4m_activity_node_get_node_group($node);

  $arguments = array(
    '%comment_cid' => (int) $comment->cid,
    '!comment_uid' => (int) $comment->uid,
    '%node_nid' => (int) $node->nid,
    '!group_nid' => $group_nid,
  );

  $message = message_create(
    'c4m_activity_comment_' . $action,
    array('arguments' => $arguments)
  );

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->c4m_activity_comment->set($comment);
  $wrapper->c4m_activity_node->set($node);
  if ($group_nid) {
    $wrapper->c4m_activity_group->set($group_nid);
  }

  return $wrapper;
}

/**
 * Implements hook_comment_insert().
 *
 * Adds a node created message to the message table.
 */
function c4m_activity_comment_comment_insert($comment) {

  if (!c4m_activity_comment_needs_message($comment->node_type, 'insert')) {
    return;
  }

  $message = c4m_activity_comment_create_message($comment, 'insert');
  $message->save();
}

/**
 * Implements hook_comment_update().
 *
 * Adds a node updated message to the message table.
 * The message will only be created if the last insert/update of the node was
 * not done during the last 6 hours.
 */
function c4m_activity_comment_comment_update($comment) {
  // Avoid duplicated message due to updates by the same user within 6 hours.
  if (!c4m_activity_comment_update_needs_message($comment)) {
    return;
  }

  // No update, create a new one.
  $message = c4m_activity_comment_create_message($comment, 'update');
  $message->save();
}

/**
 * Implements hook_comment_delete().
 *
 * Adds a node deleted message to the message table.
 */
function c4m_activity_comment_comment_delete($comment) {
  if (!c4m_activity_comment_needs_message($comment->node_type, 'delete')) {
    return;
  }

  $message = c4m_activity_comment_create_message($comment, 'delete');
  $message->save();
}


/**
 * Get the last stored message for a given comment.
 *
 * @param stdClass $comment
 *   The comment we want to load the message for.
 * @param int $time_ago
 *   The minimum timestamp the record must have to be included in the query.
 *
 * @return NULL | EntityMetadataWrapper
 */
function c4m_activity_comment_get_last_message($comment, $time_ago = 0) {
  $query = new entityFieldQuery();
  $query
    ->entityCondition('entity_type', 'message')
    ->fieldCondition('c4m_activity_comment', 'target_id', $comment->cid)
    ->propertyOrderBy('timestamp', 'DESC');

  if ($time_ago > 0) {
    $query->propertyCondition('timestamp', (int) $time_ago, '>=');
  }

  $result = $query->execute();
  if (empty($result['message'])) {
    return NULL;
  }

  $message = entity_metadata_wrapper('message', key($result['message']));
  return $message;
}
