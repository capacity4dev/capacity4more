<?php
/**
 * @file
 * Code for the Group content type feature.
 */

include_once 'c4m_content_group.features.inc';

/**
 * Implements hook_c4m_og_vocab_info_groups().
 *
 * @return array
 */
function c4m_content_group_c4m_og_vocab_info_groups() {
  return array(
    'group' => array(
      'c4m_vocab_category',
      'c4m_vocab_tag',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_content_group_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_block_info().
 */
function c4m_content_group_block_info() {
  $blocks['header_name_banner'] = array(
    'info' => t('Group header'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Make sure that:
 * - c4m_content_group_node_insert().
 * - c4m_content_group_node_update().
 * Are called last.
 */
function c4m_content_group_module_implements_alter(&$implementations, $hook) {
  $last_hooks = array('node_insert', 'node_update');

  if (in_array($hook, $last_hooks)) {
    $group = $implementations['c4m_content_group'];
    unset($implementations['c4m_content_group']);
    $implementations['c4m_content_group'] = $group;
  }
}

/**
 * Implements hook_node_insert().
 *
 * Sends notifications (By email) to site administrators to notify
 * about a new group request.
 */
function c4m_content_group_node_insert($node) {
  // Only for OG enabled content type.
  if (!og_is_group_type('node', $node->type)) {
    return;
  }

  // Get all site administrators.
  $admin_role = user_role_load_by_name('administrator');
  $results = db_select('users_roles', 'r')
            ->fields('r', array('uid'))
            ->condition('rid', $admin_role->rid, '=')
            ->execute()
            ->fetchAll();

  // Send a notification for each site admin.
  if (!empty($results)) {
    foreach ($results as $result) {
      $admin = user_load($result->uid);

      // Send the actual mail.
      $key = 'group_pending_approval_admin';
      c4m_content_group_send_mail($key, $admin, $node);
    }
  }
}

/**
 * Implements hook_node_update().
 *
 * Sends notifications (By email) to the group author,
 * when the group status changes (Rejected/ Approved).
 */
function c4m_content_group_node_update($node) {
  // Only for OG enabled content type.
  if (!og_is_group_type('node', $node->type)) {
    return;
  }

  // Status now and before update.
  $status_new = $node->c4m_og_status[LANGUAGE_NONE][0]['value'];
  $status_original = (isset($node->original->c4m_og_status[LANGUAGE_NONE][0]['value']))
    ? $node->original->c4m_og_status[LANGUAGE_NONE][0]['value']
    : NULL;

  // Don't do anything if status did NOT change.
  if ($status_original === $status_new) {
    return;
  }

  $key = NULL;
  switch ($status_new) {
    case 'rejected':
      $key = 'group_rejected_user';
      break;

    case 'draft':
    case 'published':
      $key = 'group_approved_user';
      break;
  }

  // Send mail only if there's a key.
  if ($key) {
    $account = user_load($node->uid);
    c4m_content_group_send_mail($key, $account, $node);
  }
}

/**
 * Helper to send out an email.
 *
 * @param string $key
 *   The message type key.
 * @param object $account
 *   The user where to send the mail to.
 * @param object $group
 *   The group to send the mail for.
 *
 * @return array
 *   The $message array structure containing all details of the
 *   message. If already sent ($send = TRUE), then the 'result' element
 *   will contain the success indicator of the e-mail, failure being already
 *   written to the watchdog. (Success means nothing more than the message being
 *   accepted at php-level, which still doesn't guarantee it to be delivered.)
 */
function c4m_content_group_send_mail($key, $account, $group) {
  $language = user_preferred_language($account, language_default());

  $module = 'c4m_content_group';
  $params = array('group' => $group);

  $to = $account->mail;
  $from = variable_get('site_mail', ini_get('sendmail_from'));

  return drupal_mail($module, $key, $to, $language, $params, $from);
}

/**
 * Implements hook_mail().
 *
 * Defines the Subject and Body of the message depending on the "key".
 */
function c4m_content_group_mail($key, &$message, $variables) {
  module_load_include('inc', 'c4m_content_group', 'c4m_content_group.mail');

  $language = isset($message['language'])
    ? $message['language']
    : NULL;

  $message['subject'] .= _c4m_content_group_mail_text(
    $key . '_subject',
    $language,
    $variables
  );
  $message['body'][] = _c4m_content_group_mail_text(
    $key . '_body',
    $language,
    $variables
  );
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by the token_replace() call at the end of
 * _user_mail_text() to set up some additional tokens that can be
 * used in email messages generated by user_mail().
 *
 * @param $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param $data
 *   An associative array of token replacement values. If the 'group' element
 *   exists, it must contain a group node object.
 * @param $options
 *   Unused parameter required by the token_replace() function.
 */
function c4m_content_group_mail_tokens(&$replacements, $data, $options) {
  if (isset($data['group'])) {
    $group = $data['group'];
    $owner = user_load($group->uid);

    $url_options = array(
      'absolute' => TRUE,
      'purl' => array(
        'provider' => 'og_purl|node',
        'id' => $group->nid,
      ),
    );

    $replacements['[group:dashboard_url]'] = url('<front>', $url_options);
    $replacements['[group:owner]'] = $owner->name;
    $replacements['[group:title]'] = $group->title;
  }
}

/**
 * Implements hook_block_view().
 */
function c4m_content_group_block_view($delta = '') {
  module_load_include('inc', 'c4m_content_group', 'c4m_content_group.block');
  $callback = '_c4m_content_group_block_' . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Preprocess for blocks of this module.
 *
 * @param $variables
 */
function c4m_content_group_preprocess_block(&$variables) {
  module_load_include('inc', 'c4m_content_group', 'c4m_content_group.block');
  if ($variables['block']->module == 'c4m_content_group' &&
      !empty($variables['block']->delta)) {
    $callback = '_c4m_content_group_preprocess_' . $variables['block']->delta;
    if (function_exists($callback)) {
      $callback($variables);
    }
  }
}

/**
 * Implements hook_node_access(),
 *
 * Set right permissions for users to group nodes based on c4m_og_status field.
 */
/*function c4m_content_group_node_access($node, $op, $account) {
  if (!is_object($node) || $node->type != 'group') {
    return NODE_ACCESS_IGNORE;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $value = $wrapper->c4m_og_status->value();

  if (user_access('administer site configuration', $account)) {
    // This is site administrator.
    return NODE_ACCESS_ALLOW;
  }

  if (!$account->uid) {
    // This is an anonymous user.
    if (in_array($value, array('requested', 'draft', 'rejected', 'deleted')) && $op == 'view') {
      // Anonymous user can't view groups that  are not public with
      // published or archived status.
      return NODE_ACCESS_DENY;
    }
    return NODE_ACCESS_IGNORE;
  }

  if ($account->uid == $node->uid) {
    // Group owner.
    if ($value == 'deleted' && ($op == 'view' || $op == 'update')) {
      // Group owner can't view deleted groups.
      return NODE_ACCESS_DENY;
    }
    return NODE_ACCESS_ALLOW;
  }

  if (og_is_member('node', $node->nid, 'user', $account)) {

    if (!og_user_access('node', $node->nid, 'administer group', $account) && $op == 'update') {
      // Not group administrator can't change group.
      return NODE_ACCESS_DENY;
    }

    if (in_array($value, array('requested', 'rejected', 'deleted')) && ($op == 'view' || $op == 'update')) {
      // Group member can't view groups with requested, rejected or deleted status.
      return NODE_ACCESS_DENY;
    }
  }
  else if ($op == 'update' || in_array($value, array('requested', 'draft', 'rejected', 'deleted'))) {
    // Authenticated users not members of the group can only view groups with
    // published and archived status.
    return NODE_ACCESS_DENY;
  }

  return NODE_ACCESS_IGNORE;
}*/

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide fields for authenticated users and set submit function.
 */
function c4m_content_group_form_group_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($user->uid && !user_access('administer nodes', $user)
    && strpos($form['#action'], 'add')) {
    // Hide fields for authenticated users.
    $form['c4m_related_group']['#access'] = FALSE;
    $form['c4m_related_projects']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    // After a form is submitted, run a redirect function.
    $form['actions']['submit']['#submit'][] = 'c4m_content_group_submit_redirect';
  }
}

/**
 * Submit form function.
 *
 * Set redirect and successful message.
 *
 * @param $form
 * @param $form_state
 */
function c4m_content_group_submit_redirect(&$form, &$form_state) {
  // Set a successful message for a user.
  drupal_set_message(t('The group you requested is pending review by one of the administrators. You will receive an email with the outcome of that review.'));
  // Redirect a user to homepage.
  $form_state['redirect'] = url('', array('absolute' => TRUE));
}

/**
 * Implements hook_og_user_access_alter().
 *
 * Set permissions to users based on og_role and group status.
 */
function c4m_content_group_og_user_access_alter(&$perm, $context) {

  $account = $context['account'];
  $group = $context['group'];

  if ($group->type != 'group') {
    return;
  }

  if (!$account->uid) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $group);
  $status = $wrapper->c4m_og_status->value();

  $site_admin = user_access('administer site configuration', $account);
  $group_owner = $account->uid == $group->uid;
  $group_admin = !empty($perm['administer group']) ? $perm['administer group'] : FALSE;

  if ($site_admin || $group_owner || $group_admin) {
    // Site admin/group owner/group admin can invite/approve group members only
    // for Draft and Published groups.

    if ($status != 'draft' && $status != 'published') {
      $perm['add user'] = FALSE;
      $perm['approve and deny subscription'] = FALSE;
    }
  }
  else {
    // Not site admin/group owner/group admin can't invite/approve group members.
    $perm['add user'] = FALSE;
    $perm['approve and deny subscription'] = FALSE;
  }


  if (!og_is_member('node', $group->nid, 'user', $account)) {
    // Users that are not members can ask membership only for published groups.

    if ($status != 'published') {
      $perm['subscribe'] = FALSE;
    }
  }
}

define('REALM', 'c4m_group_status');
define('c4m_group_status_GRANT_ID_view_requested', 0);
define('c4m_group_status_GRANT_ID_view_draft', 1);
define('c4m_group_status_GRANT_ID_view_published', 2);
define('c4m_group_status_GRANT_ID_view_archived', 3);
define('c4m_group_status_GRANT_ID_view_rejected', 4);
define('c4m_group_status_GRANT_ID_view_deleted', 5);
define('c4m_group_status_GRANT_ID_update_requested', 6);
define('c4m_group_status_GRANT_ID_update_draft', 7);
define('c4m_group_status_GRANT_ID_update_published', 8);
define('c4m_group_status_GRANT_ID_update_archived', 9);
define('c4m_group_status_GRANT_ID_update_rejected', 10);
define('c4m_group_status_GRANT_ID_update_deleted', 11);


/**
 *
 */
function c4m_content_group_node_grants($account = NULL, $op = 'view') {
  $nodes = og_get_entity_groups();
  $grants = array();
  if (empty($account)) {
    global $user;
    $account = user_load($user->uid);
  }

  if ($op == 'view') {
    // View operation.

    if (!$account->uid || empty($nodes)) {
      $grants[REALM . '_0'] = array(
        c4m_group_status_GRANT_ID_view_published,
        c4m_group_status_GRANT_ID_view_archived,
      );
      return $grants;
    }

    if (user_access('administer site configuration', $account)) {
      // Site admin.

      $grants[REALM . '_all'] = array(
        c4m_group_status_GRANT_ID_view_requested,
        c4m_group_status_GRANT_ID_view_draft,
        c4m_group_status_GRANT_ID_view_published,
        c4m_group_status_GRANT_ID_view_archived,
        c4m_group_status_GRANT_ID_view_rejected,
        c4m_group_status_GRANT_ID_view_deleted,
      );
      return $grants;
    }

    foreach (og_get_entity_groups() as $group_type => $gids) {
      foreach ($gids as $gid) {
        $node = node_load($gid);

        if ($account->uid == $node->uid) {
          // Group owner.

          $grants[REALM . '_' . $gid] = array(
            c4m_group_status_GRANT_ID_view_requested,
            c4m_group_status_GRANT_ID_view_draft,
            c4m_group_status_GRANT_ID_view_published,
            c4m_group_status_GRANT_ID_view_archived,
            c4m_group_status_GRANT_ID_view_rejected,
          );
          return $grants;
        } else {
          // Group admin or group member.

          $grants[REALM . '_' . $gid] = array(
            c4m_group_status_GRANT_ID_view_published,
            c4m_group_status_GRANT_ID_view_archived,
            c4m_group_status_GRANT_ID_view_draft,
          );
        }
      }
    }
  }
  else if ($op == 'update') {
    // Update operation.

    if (!$account->uid || empty($nodes)) {
      $grants[REALM . '_0'] = array();
      return $grants;
    }

    if (user_access('administer site configuration', $account)) {
      // Site admin.

      $grants[REALM . '_all'] = array(
        c4m_group_status_GRANT_ID_update_requested,
        c4m_group_status_GRANT_ID_update_draft,
        c4m_group_status_GRANT_ID_update_published,
        c4m_group_status_GRANT_ID_update_archived,
        c4m_group_status_GRANT_ID_update_rejected,
        c4m_group_status_GRANT_ID_update_deleted,
      );
      return $grants;
    }

    foreach (og_get_entity_groups() as $group_type => $gids) {
      foreach ($gids as $gid) {
        $node = node_load($gid);

        if ($account->uid == $node->uid) {
          // Group owner.

          $grants[REALM . '_' . $gid] = array(
            c4m_group_status_GRANT_ID_update_requested,
            c4m_group_status_GRANT_ID_update_draft,
            c4m_group_status_GRANT_ID_update_published,
            c4m_group_status_GRANT_ID_update_archived,
            c4m_group_status_GRANT_ID_update_rejected,
          );
          return $grants;
        }
        else {
          // Group admin or group member.
          if (og_user_access('node', $gid, 'administer group', $account)) {
            // Group admin.

            $grants[REALM . '_' . $gid] = array(
              c4m_group_status_GRANT_ID_view_published,
              c4m_group_status_GRANT_ID_view_archived,
              c4m_group_status_GRANT_ID_view_draft,
            );
          }
          else {
            $grants[REALM . '_' . $gid] = array();
          }
        }
      }
    }
  }
  return $grants;
}


function c4m_content_group_node_access_records($node) {
  if ($node->type != 'group') {
    // Node is not a group.
    return array();
  }
  $wrapper = entity_metadata_wrapper('node', $node);
  $grants = array();

  switch ($node->c4m_og_status[LANGUAGE_NONE][0]['value']) {
    case 'requested':
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_view_requested,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_view_requested,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_update_requested,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_update_requested,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      break;
    case 'draft':
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_view_draft,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_view_draft,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_update_draft,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_update_draft,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      break;
    case 'published':
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_view_published,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      if (!$wrapper->{OG_AUDIENCE_FIELD}->value()) {
        // Only for public groups.
        $grants[] = array(
          'realm' => REALM . '_0',
          'gid' => c4m_group_status_GRANT_ID_view_published,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      }
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_view_published,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_update_published,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_update_published,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      break;
    case 'archived':
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_view_archived,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      if (!$wrapper->{OG_AUDIENCE_FIELD}->value()) {
        // Only for public groups.
        $grants[] = array(
          'realm' => REALM . '_0',
          'gid' => c4m_group_status_GRANT_ID_view_archived,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      }
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_view_archived,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_update_archived,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_update_archived,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      break;
    case 'rejected':
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_view_rejected,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_view_rejected,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_update_rejected,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_update_rejected,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      break;
    case 'deleted':
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_view_deleted,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_view_deleted,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_' . $node->nid,
        'gid' => c4m_group_status_GRANT_ID_update_deleted,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      $grants[] = array(
        'realm' => REALM . '_all',
        'gid' => c4m_group_status_GRANT_ID_update_deleted,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
      break;
  }

  return $grants;
}
