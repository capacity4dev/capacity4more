<?php
/**
 * @file
 * Code for the Quick Post feature.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_restful_quick_post_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function c4m_restful_quick_post_theme() {
  $theme['c4m_restful_quick_post_angular_form'] = array(
    'template' => 'quick-post-form',
    'path' => drupal_get_path('module', 'c4m_restful_quick_post') . '/templates',
    'variables' => array(
      'show_resources' => NULL,
    ),
  );

  return $theme;
}

/**
 * Page callback; Load the AngularJs form.
 *
 * @param int $group_id
 *   The node ID of the current group.
 *
 * @return string
 *   A rendered form of the Quick Post.
 */
function c4m_restful_quick_post_form($group_id) {
  // Load the activity stream.
  $activity_stream_handler = restful_get_restful_handler('activity_stream');
  $request = array(
    'group' => $group_id,
    'html' => TRUE,
    // Sort the activity stream by timestamp descending.
    'sort' => '-timestamp',
    'hide_articles' => 1,
  );
  $activities = $activity_stream_handler->get('', $request);

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  // Global settings for the AngularJs app.
  $settings['c4m'] = array(
    'basePath' => url('', $options),
    'purlPath' => url('', array('absolute' => TRUE)),
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
    'activities' => $activities,
    'data' => array(
      'request' => $request,
    ),
  );

  // Don't load the quick post form or it's components for anonymous user.
  if (!user_is_logged_in()) {
    // Add group id to the settings for the app.
    $settings['c4m']['data']['entity']['group'] = $group_id;
    drupal_add_js($settings, 'setting');
    return FALSE;
  }

  $resources = array(
    'discussions' => array(
      'bundle' => 'Discussion',
      'description' => t('Discussion'),
    ),
    'documents' => array(
      'bundle' => 'Document',
      'description' => t('Document'),
    ),
    'events' => array(
      'bundle' => 'Event',
      'description' => t('Event'),
    ),
  );

  $resource_names = array_keys($resources);

  $show_resources = $resources;

  // Get fields.
  $field_schema = array();
  $public_fields = array();
  $categories = array();
  foreach ($resource_names as $resource_name) {
    $handler = restful_get_restful_handler($resource_name);
    // Send the fields to the app as separate objects by resource
    // (for validation on submit.)
    $field_schema['resources'][$resource_name] = $handler->options('', array('group' => $group_id));
    // Clean the categories values from the field Schema (Duplicated values).
    // Order them and assign them to a separate variable.
    foreach ($field_schema['resources'][$resource_name] as $field_name => $values) {
      $fixed_values = array();
      $allowed_values = $field_name == 'categories' ? $values['form_element']['allowed_values']['categories'] : $values['form_element']['allowed_values'];
      if (!empty($allowed_values)) {
        foreach ($allowed_values as $id => $label) {
          $fixed_values[] = array(
            'id' => $id,
            'label' => $label,
          );
        }
      }
      if ($field_name == 'categories') {
        $categories = $fixed_values;
        unset($field_schema['resources'][$resource_name][$field_name]['form_element']['allowed_values']);
      }
      else {
        $field_schema['resources'][$resource_name][$field_name]['form_element']['allowed_values'] = $fixed_values;
      }
    }
    $public_fields += $handler->getPublicFields();
  }
  $field_schema['categories'] = $categories;

  // Gathering all the fields to pass to the angular-app.
  $entity_fields = array();
  $skipped_fields = array(
    'id',
    'self',
  );

  foreach ($public_fields as $public_field_name => $value) {
    // Skipped fields.
    if (in_array($public_field_name, $skipped_fields)) {
      continue;
    }
    // Set all fields values to NULL.
    $entity_fields[$public_field_name] = NULL;

    // Set the current Group.
    if ($public_field_name == 'group') {
      $entity_fields[$public_field_name] = $group_id;
    }
  }

  // Pass quick post form info via Drupal.settings.
  $settings['c4m'] += array(
    'resources' => $show_resources,
    'field_schema' => $field_schema,
  );
  $settings['c4m']['data']['entity'] = $entity_fields;
  drupal_add_js($settings, 'setting');

  // Theme function adds the Quick post form.
  return theme('c4m_restful_quick_post_angular_form', array('show_resources' => $show_resources));
}

/**
 * Implements hook_field_info_alter().
 *
 * Adding entity metadata wrapper support for the image field crop module.
 */
function c4m_restful_quick_post_field_info_alter(&$info) {
  $info['getlocations_fields'] += array(
    'property_type' => 'getlocations',
    'property_callbacks' => array('c4m_restful_quick_post_c4m_location_field_entity_property_info'),
  );
}

/**
 * Additional callback to adapt the property info for file fields.
 *
 * @see entity_metadata_field_entity_property_info()
 */
function c4m_restful_quick_post_c4m_location_field_entity_property_info(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  // Define a data structure so it's possible to deal with files and their
  // descriptions.
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
}

/**
 * Implements hook_preprocess_html().
 *
 * Attach Angular application to the page.
 */
function c4m_restful_quick_post_preprocess_html(&$vars) {
  // Check if we need to load the c4m-app on the current page.
  if (!c4m_restful_quick_post_needs_app()) {
    return;
  }

  // Call the activity stream on the homepage.
  $handler = og_purl_og_context_handler();
  if (drupal_is_front_page() && empty($handler)) {
    c4m_message_load_homepage_activity_stream();
  }

  $vars['attributes_array']['ng-app'][] = 'c4mApp';
  $vars['attributes_array']['ng-controller'][] = 'MainCtrl';
  $vars['attributes_array']['ng-cloak'][] = 'true';

  // Load Angular.
  $bower_path = libraries_get_path('bower_components');

  // AngularJs.
  drupal_add_js($bower_path . '/angular/angular.min.js');

  // Angular-touch
  drupal_add_js($bower_path . '/angular-touch/angular-touch.min.js');

  // Upload file library.
  drupal_add_js($bower_path . '/danialfarid-angular-file-upload/dist/angular-file-upload-shim.min.js');
  drupal_add_js($bower_path . '/danialfarid-angular-file-upload/dist/angular-file-upload.min.js');

  // Angular-animate.
  drupal_add_js($bower_path . '/angular-animate/angular-animate.min.js');

  // Angular-Carousel.
  drupal_add_css($bower_path . '/angular-carousel/dist/angular-carousel.min.css');
  drupal_add_js($bower_path . '/angular-carousel/dist/angular-carousel.min.js');

  // CKEditor library.
  drupal_add_css($bower_path . '/ng-ckeditor/ng-ckeditor.css');
  drupal_add_js($bower_path . '/ng-ckeditor/libs/ckeditor/ckeditor.js');
  drupal_add_js($bower_path . '/ng-ckeditor/ng-ckeditor.js');

  // Select UI.
  drupal_add_css($bower_path . '/select2/select2.css');
  drupal_add_css($bower_path . '/select2/select2-bootstrap.css');
  drupal_add_js($bower_path . '/select2/select2.js');
  drupal_add_js($bower_path . '/angular-ui-select2/src/select2.js');

  // Bootstrap DatePicker.
  drupal_add_js($bower_path . '/angular-bootstrap/ui-bootstrap.min.js');
  drupal_add_js($bower_path . '/angular-bootstrap/ui-bootstrap-tpls.min.js');

  // Filesize library.
  drupal_add_js($bower_path . '/filesize/lib/filesize.min.js');

  // Load our custom app.
  $app_path = $bower_path . '/c4m-app/dist';
  drupal_add_js($app_path . '/c4m-app.js');

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  $settings['c4m'] = array(
    'basePath' => url('', $options),
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
  );
  drupal_add_js($settings, 'setting');
}

/**
 * Helper to determine if a the current path requires the Angular c4m-app.
 *
 * The app should be loaded if:
 * - We are on a group dashboard (<front> with OG active OG context).
 * - On a node add form (node/add/<bundle-type>).
 * - On a node edit form (node/%/edit).
 *
 * @return bool
 *   True if current path requires the app to be loaded.
 */
function c4m_restful_quick_post_needs_app() {
  // If we are on the site homepage or a group dashboard, we need the app.
  if (drupal_is_front_page()) {
    return TRUE;
  }

  // Get the current path.
  $item = menu_get_item();
  $path = $item['path'];

  // If we are on a group edit form, the app should be loaded.
  if ($path === 'node/%/edit') {
    return TRUE;
  }

  // If we are on a node creation form, the app should be loaded.
  $node_types = array_keys(node_type_get_types());
  foreach ($node_types as $bundle) {
    if ($path === 'node/add/' . str_replace('_', '-', $bundle)) {
      return TRUE;
    }
  }
  if (preg_match('/overlay/i', current_path())) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * Allow non-administrators to set status of nodes.
 */
function c4m_restful_quick_post_entity_property_info_alter(&$info) {
  if (!empty($info['node']['properties']['status']['setter permission'])) {
    unset($info['node']['properties']['status']['setter permission']);
  }
}
