<?php
/**
 * @file
 * Code for the Quick Post feature.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_restful_quick_post_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_theme().
 */
function c4m_restful_quick_post_theme() {
  $theme['c4m_restful_quick_post_angular_form'] = array(
    'template' => 'quick-post-form',
    'path' => drupal_get_path('module', 'c4m_restful_quick_post') . '/templates',
    'variables' => array(
      'show_resources' => NULL,
    ),
  );

  return $theme;
}

/**
 * Page callback; Load the AngularJs form.
 *
 * @param int $group_id
 *   The node ID of the current group.
 * @param array $show_resources
 *   Array with the resources name that should appear. Defaults to all
 *   resources.
 * @param bool $full_form
 *   Determine if full form should be used. This is checked only when a single
 *   $show_resources is passed.
 * @param stdClass $node
 *   (optional) The node object to edit using the form.
 *
 * @return string
 *   A rendered form of the Quick Post.
 */
function c4m_restful_quick_post_form($group_id, $show_resources = array(), $full_form = FALSE, $node = NULL) {
  $resources = array(
    'discussions' => array(
      'bundle' => 'Discussion',
      'description' => t('Discussion'),
    ),
    'documents' => array(
      'bundle' => 'Document',
      'description' => t('Document'),
    ),
    'events' => array(
      'bundle' => 'Event',
      'description' => t('Event'),
    ),
    // MORE
  );

  $resource_names = !empty($show_resources) ? array_keys($show_resources) : array_keys($resources);

  if (!empty($show_resources) && in_array('discussions', array_keys($show_resources))) {
    // Also need document fields for the discussion.
    $resource_names[] = 'documents';
  }
  $show_resources = !empty($show_resources) ? $show_resources : $resources;


  // Get fields.
  $field_schema = array();
  $public_fields = array();
  foreach ($resource_names as $resource_name) {
    $handler = restful_get_restful_handler($resource_name);
    // Send the fields to the app as separate objects by resource (for validation on submit.)
    $field_schema['resources'][$resource_name] = $handler->options('', array('group' => $group_id));
    $public_fields += $handler->getPublicFields();

    if ($node && in_array($resource_name, array_keys($show_resources))) {
      // Get the nodes' ids if they exist.
      $node_values = $handler->get($node->nid);
    }
  }

  // Gathering all the fields to pass to the angular-app.
  $entity_fields = array();
  $skipped_fields = array(
    'id',
    'self',
  );

  foreach($public_fields as $public_field_name => $value) {
    // Skipped fields.
    if (in_array($public_field_name, $skipped_fields)) {
      continue;
    }
    if ($node) {
      // Set default values of the fields that already exist.
      $entity_fields[$public_field_name] = isset($node_values[0][$public_field_name]) ? $node_values[0][$public_field_name] : NULL;
    }
    else {
      // Set all fields values to NULL.
      $entity_fields[$public_field_name] = NULL;
    }

    // Set the current Group.
    if ($public_field_name == 'group') {
      $entity_fields[$public_field_name] = $group_id;
    }
  }

  // Set the current node id.
  $entity_fields['entityId'] = $node ? $node->nid : NULL;

  $activity_stream_handler = restful_get_restful_handler('activity_stream');

  $request = array(
    'filter' => array(
      'group' => $group_id,
    ),
    'html' => true,
    // Sort the activity stream by ID descending.
    'sort' => '-id',
  );

  $activities = $activity_stream_handler->get('', $request);

  // The quick post debugger.
  // In order to activate the debug: "drush vset c4m_quick_post_debug 1".
  $c4m_quick_post_debug = variable_get('c4m_quick_post_debug');

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  if (array_key_exists('related_document', $entity_fields)) {
    // Set the related_document field value if field exists.
    $entity_fields['related_document'] = $entity_fields['related_document'] ? $entity_fields['related_document'] : array();
  }

  // Pass info via Drupal.settings.
  $settings['c4m'] = array(
    'basePath' => url('', $options),
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
    'resources' => $show_resources,
    'field_schema' => $field_schema,
    'debug' => $c4m_quick_post_debug,
    'activities' => $activities,
    'data' => array(
      'entity' => $entity_fields,
      'full_form' => $full_form,
    ),
  );
  drupal_add_js($settings, 'setting');

  // Theme function adds the Quick post form.
  return theme('c4m_restful_quick_post_angular_form', array('show_resources' => $show_resources));
}

/**
 * Implements hook_field_info_alter().
 *
 * Adding entity metadata wrapper support for the image field crop module.
 */
function c4m_restful_quick_post_field_info_alter(&$info) {
  $info['getlocations_fields'] += array(
    'property_type' => 'getlocations',
    'property_callbacks' => array('c4m_restful_quick_post_c4m_location_field_entity_property_info'),
  );
}

/**
 * Additional callback to adapt the property info for file fields.
 * @see entity_metadata_field_entity_property_info().
 */
function c4m_restful_quick_post_c4m_location_field_entity_property_info(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  // Define a data structure so it's possible to deal with files and their
  // descriptions.
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
}

/**
 * Implements hook_preprocess_html().
 *
 * Attach Angular application to the page.
 */
function c4m_restful_quick_post_preprocess_html(&$vars) {
  $item = menu_get_item();

  if (!menu_get_object() && isset($item['map']) && $item['map'][0] != 'node') {
    // Not a node page and not a node/add(edit) page.
  }
  $vars['attributes_array']['ng-app'][] = 'c4mApp';
  $vars['attributes_array']['ng-controller'][] = 'MainCtrl';

  // Load Angular.
  $bower_path = libraries_get_path('bower_components');

  // AngularJs.
  drupal_add_js($bower_path . '/angular/angular.min.js');

  // Upload file library.
  drupal_add_js($bower_path . '/danialfarid-angular-file-upload/dist/angular-file-upload-shim.min.js');
  drupal_add_js($bower_path . '/danialfarid-angular-file-upload/dist/angular-file-upload.min.js');

  // Angular-animate.
  drupal_add_js($bower_path . '/angular-animate/angular-animate.min.js');

  // JSON pretty print library.
  drupal_add_css($bower_path . '/ng-prettyjson/dist/ng-prettyjson.min.css');
  drupal_add_js($bower_path . '/ng-prettyjson/dist/ng-prettyjson.min.js');

  // CKEditor library.
  drupal_add_css($bower_path . '/ng-ckeditor/ng-ckeditor.css');
  drupal_add_js($bower_path . '/ng-ckeditor/libs/ckeditor/ckeditor.js');
  drupal_add_js($bower_path . '/ng-ckeditor/ng-ckeditor.js');

  // Select UI
  drupal_add_css($bower_path . '/select2/select2.css');
  drupal_add_css($bower_path . '/select2/select2-bootstrap.css');
  drupal_add_js($bower_path . '/select2/select2.js');
  drupal_add_js($bower_path . '/angular-ui-select2/src/select2.js');

  // Bootstrap DatePicker.
  drupal_add_js($bower_path . '/angular-bootstrap/ui-bootstrap.min.js');
  drupal_add_js($bower_path . '/angular-bootstrap/ui-bootstrap-tpls.min.js');

  // Font-awesome library.
  drupal_add_css($bower_path . '/components-font-awesome/css/font-awesome.min.css');

  // Filesize library.
  drupal_add_js($bower_path . '/filesize/lib/filesize.min.js');

  // Load our custom app.
  $app_path = $bower_path . '/c4m-app/dist';
  drupal_add_js($app_path . '/c4m-app.js');

  $settings['c4m'] = array();
  drupal_add_js($settings, 'setting');
}
