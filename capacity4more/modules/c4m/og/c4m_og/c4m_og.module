<?php
/**
 * @file
 *
 * General Organic Groups functionality
 */

include_once 'c4m_og.features.inc';
include_once 'c4m_og.access.inc';

/**
 * Helper to get the current active group (based on og_context()).
 *
 * @return stdClass|FALSE
 *   The group entity, or FALSE if no context was found.
 */
function c4m_og_current_group() {
  $context = og_context();
  if (!$context) {
    return FALSE;
  }

  $group = node_load($context['gid']);
  if (!$group) {
    return FALSE;
  }

  return $group;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_og_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
  if ($module == 'entityreference' && !empty($plugin)) {
    return "plugins/entityreference/$plugin";
  }
}

/**
 * Helper function to get the human readable name of a group type
 *
 * @param null $node
 *
 * @internal param object $group
 *
 * @return string
 */
function c4m_og_get_group_type_name($node = NULL) {
  if (!$node) {
    $node = c4m_og_current_group();
  }
  if (!$node || !og_is_group_type('node', $node->type)) {
    return NULL;
  }

  return strtolower(node_type_get_name($node));
}

/**
 * Implements hook_form_alter().
 */
function c4m_og_form_alter(&$form, $form_state) {
  if (empty($form['#node_edit_form']) || !og_is_group_type('node', $form['#node']->type)) {
    return;
  }
  $form['og_purl']['purl']['value']['#title']        = t('Group path');
  $form['og_purl']['purl']['value']['#type']         = 'machine_name';
  $form['og_purl']['purl']['value']['#machine_name'] = array(
    'source'          => array('title'),
    'label'           => t('Group path'),
    'exists'          => 'c4m_og_purl_exists',
    'replace'         => '-',
    'replace_pattern' => '[^a-z0-9_-]+',
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function c4m_og_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['c4m_og'])) {
    $c4m_og = $implementations['c4m_og'];
    unset($implementations['c4m_og']);
    $implementations['c4m_og'] = $c4m_og;
  }
}

function c4m_og_purl_exists($value) {
  return FALSE;
}

/**
 * Function to get roles per group bundle.
 *
 * @return array
 *    Array of roles per group bundle
 */
function c4m_og_get_group_bundles() {
  $result = db_select('og_role', 'ogr')
            ->fields('ogr', array('group_bundle', 'rid', 'name'))
            ->execute()
            ->fetchAll();
  foreach ($result as $row) {
    $roles[$row->group_bundle][$row->rid] = $row->name;
  }

  return $roles;
}

/**
 * Get all the users with certain roles in a group.
 *
 * @param $gid
 *   The group unique ID.
 * @param $roles
 *   Array with the role IDs to query.
 */
function c4m_og_get_users_by_roles($gid, $rids = array()) {
  $query = db_select('og_users_roles', 'og_users_roles');

  return $query->fields('og_users_roles', array('uid'))
               ->condition('gid', $gid)
               ->condition('rid', $rids, 'IN')
               ->execute()
               ->fetchAll();
}
