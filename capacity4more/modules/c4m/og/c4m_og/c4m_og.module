<?php
/**
 * @file
 *
 * General Organic Groups functionality
 */

include_once 'c4m_og.features.inc';
include_once 'c4m_og.access.inc';
include_once 'c4m_og.fields.inc';

/**
 * The access realm of C4M group member.
 */
define('C4M_OG_ACCESS_REALM', 'c4m_og_access');

/**
 * Helper to get the current active group (based on og_context()).
 *
 * @return stdClass|FALSE
 *   The group entity, or FALSE if no context was found.
 */
function c4m_og_current_group() {
  $context = og_context();
  if (!$context) {
    return FALSE;
  }

  $group = node_load($context['gid']);
  if (!$group) {
    return FALSE;
  }

  return $group;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_og_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
  if ($module == 'entityreference' && !empty($plugin)) {
    return "plugins/entityreference/$plugin";
  }
}

/**
 * Helper function to get the human readable name of a group type
 *
 * @param null $node
 *
 * @internal param object $group
 *
 * @return string
 */
function c4m_og_get_group_type_name($node = NULL) {
  if (!$node) {
    $node = c4m_og_current_group();
  }
  if (!$node || !og_is_group_type('node', $node->type)) {
    return NULL;
  }

  return strtolower(node_type_get_name($node));
}

/**
 * Implements hook_form_alter().
 */
function c4m_og_form_alter(&$form, $form_state) {
  if (empty($form['#node_edit_form']) || !og_is_group_type('node', $form['#node']->type)) {
    return;
  }
  $form['og_purl']['purl']['value']['#title']        = t('Group path');
  $form['og_purl']['purl']['value']['#type']         = 'machine_name';
  $form['og_purl']['purl']['value']['#machine_name'] = array(
    'source'          => array('title'),
    'label'           => t('Group path'),
    'exists'          => 'c4m_og_purl_exists',
    'replace'         => '-',
    'replace_pattern' => '[^a-z0-9_-]+',
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function c4m_og_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['c4m_og'])) {
    $c4m_og = $implementations['c4m_og'];
    unset($implementations['c4m_og']);
    $implementations['c4m_og'] = $c4m_og;
  }
}

function c4m_og_purl_exists($value) {
  return FALSE;
}

/**
 * Function to get roles per group bundle.
 *
 * @return array
 *    Array of roles per group bundle
 */
function c4m_og_get_group_bundles() {
  $roles = array();
  $result = db_select('og_role', 'ogr')
            ->fields('ogr', array('group_bundle', 'rid', 'name'))
            ->execute()
            ->fetchAll();
  foreach ($result as $row) {
    $roles[$row->group_bundle][$row->rid] = $row->name;
  }

  return $roles;
}

/**
 * Function to get OG permissions by OG role.
 *
 * @param $rid
 *   The role ID.
 * @return array
 *    Array of OG permissions
 */
function c4m_og_get_permissions_by_role($rid, $module = 'c4m_og') {
  $perms = array();
  $result = db_select('og_role_permission', 'ogrp')
    ->fields('ogrp', array('permission'))
    ->condition('rid', $rid)
    ->condition('module', $module)
    ->execute()
    ->fetchAll();
  foreach ($result as $row) {
    $perms[$row->permission] = $row->permission;
  }

  return $perms;
}

/**
 * Function to get OG roles by OG permission.
 *
 * @param $perm
 *   The permission.
 * @return array
 *    Array of role ids.
 */
function c4m_og_get_roles_by_permission($permission, $module = 'c4m_og') {
  $roles = array();
  $result = db_select('og_role_permission', 'ogrp')
    ->fields('ogrp', array('rid'))
    ->condition('permission', $permission)
    ->condition('module', $module)
    ->execute()
    ->fetchAll();
  foreach ($result as $row) {
    $roles[$row->rid] = $row->rid;
  }

  return $roles;
}

/**
 * Get all the users with certain roles in a group.
 *
 * @param $gid
 *   The group unique ID.
 * @param $roles
 *   Array with the role IDs to query.
 */
function c4m_og_get_users_by_roles($gid, $rids = array()) {
  $query = db_select('og_users_roles', 'og_users_roles');

  return $query->fields('og_users_roles', array('uid'))
               ->condition('gid', $gid)
               ->condition('rid', $rids, 'IN')
               ->execute()
               ->fetchAll();
}

/**
 * Implements hook_views_plugins().
 */
function c4m_og_views_plugins() {
  $plugins = array(
    'access' => array(
      'c4m_og_access_og_context' => array(
        'title' => t('User has access to the OG context'),
        'help' => t('this is a custom access plugin'),
        'handler' => 'c4m_og_access_plugin',
        'path' => drupal_get_path('module', 'c4m_og'),
        ),
      ),
    );
  return $plugins;
}

/**
 * Implementation of hook_access()
 *
 * @return bool
 */
function c4m_og_access() {
  $access = TRUE;
  $og_context = og_context();
  if (!$og_context) {
    $access = FALSE;
  }
  return $access;
}

/**
 * Implementation of hook_og_permission
 *
 * Add group permissions.
 */
function c4m_og_og_permission() {
  return array(
    'view unpublished group content' => array(
      'title' => t('View unpublished group content'),
      'description' => t("Allow user to view unpublished content of a group."),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(OG_ANONYMOUS_ROLE, OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Function to filter all groups of a user by a certain permission.
 * It returns only the gids of the groups for which the user has the permission.
 *
 * We do this by retrieving roles of the user for the groups
 * and then check per role if it has that permission.
 *
 * We assemble all the permissions this user has in a group and with those we
 * filter out the groups which do not contain the desired permission.
 *
 * @param $perm
 * @param $gids
 * @return array
 */
function c4m_og_user_has_permission_in($uid, $perm, &$gids) {
  foreach ($gids as $membership_id => $gid) {
    $roles = og_get_user_roles('node', $gid, $uid);
    $rids = array_keys($roles);
    $perms_for_gid = array();
    foreach($rids as $rid) {
      $perms_for_gid = array_merge($perms_for_gid,
        c4m_og_get_permissions_by_role($rid));
    }
    if (!in_array($perm, $perms_for_gid)) {
      unset($gids[$gid]);
    }
  }
}

/**
 * Implements hook_node_grants().
 */
function c4m_og_node_grants($account, $op) {
  switch ($op) {
    case 'view':
      if ($groups = og_get_entity_groups('user', $account)) {
        // Only grant group members and users with the appropriate role within
        // the group the right to view unpublished nodes.

        // We need to know if the user has the right role within these
        // groups, meaning a role with the right permission.
        foreach ($groups as $group_type => $gids) {
          $perm = 'view unpublished group content';
          c4m_og_user_has_permission_in($account->uid, $perm, $gids);
          foreach ($gids as $gid) {
            $realm = C4M_OG_ACCESS_REALM . ':' . $perm;
            $grants[$realm][] = $gid;
          }
        }
        return !empty($grants) ? $grants : array();
      }
      break;
  }
}

/**
 * Implementation of hook_node_access_records_alter.
 *
 * We could use hook_node_access_records for this because node module and
 * og_access module do not deliver grants for unpublished nodes so there is no
 * real need to alter grants.
 * But then we would have an implementation of hook_node_access_records and
 * possibly in the future one of hook_node_access_records_alter.
 *
 * It's clearer to have our node_access_records logic in one place.
 *
 * @param $grants
 * @param $node
 */
function c4m_og_node_access_records_alter(&$grants, $node) {
  // Allow group members with the right permission to view unpublished group
  // content nodes.
  if (empty($node->status) &&
      og_is_group_content_type('node', $node->type)) {
    // Node is unpublished, so og_access will not deliver grants, nor will node
    // (module).

    // We allow a view grant within our realm
    // 'c4m_og_access:view unpublished group content' for the groups of
    // which this node is content.
    $perm = 'view unpublished group content';
    // Retrieve groups of this node.
    $entity_groups = og_get_entity_groups('node', $node);
    foreach ($entity_groups as $group_type => $values) {
      foreach ($values as $gid) {
        $list_gids[$group_type][] = $gid;
        $grants[] = array(
          'realm' => C4M_OG_ACCESS_REALM . ':' . $perm,
          'gid' => $gid,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        );
      }
    }
  }
}

/**
 * Counts the number of members in a given group.
 *
 * @param $group
 *  The group entity.
 *
 * @return int
 *  The count of members in the group.
 */
function c4m_og_get_members_count($group) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'og_membership')
    // This is the group ID.
    ->propertyCondition('gid', $group->nid)
    // Get only the active members.
    ->propertyCondition('state', OG_STATE_ACTIVE)
    ->count()
    ->execute();

  return $result;
}

/**
 * Get the group nid of the given entity.
 *
 * @param object $entity
 *   The entity we want the group id of.
 *
 * @return NULL|int
 *   The group ID if any.
 */
function c4m_og_get_gid_from_entity($entity) {
  if (og_is_group_type('node', $entity->type)) {
    return (int) $entity->nid;
  }

  if (og_is_group_content_type('node', $entity->type)
    && isset($entity->og_group_ref[LANGUAGE_NONE][0]['target_id'])
  ) {
    return (int) $entity->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  }

  return NULL;
}
