<?php
/**
 * @file
 * Module to support automatically created group vocabularies.
 *
 * This module is the glue between the og_vocab module and the capacity4more
 * distribution.
 */

define('C4M_OG_VOCAB_INFO_VOCABULARIES', 'vocabularies');
define('C4M_OG_VOCAB_INFO_GROUPS', 'groups');
define('C4M_OG_VOCAB_INFO_CONTENT', 'content');


/**
 * Implements hook_node_insert().
 *
 * Automatically adds the Category taxonomy to a newly created group.
 * It uses the information collected trough the implemented
 * hook_c4m_og_vocab_info_groups() hooks to know what vocabularies to create per
 * group node type.
 *
 * It will use the information collected trough the implemented
 * hook_c4m_og_vocab_info_content() hooks to know for what group content types
 * to enable the vocabularies.
 */
function c4m_og_vocab_node_insert($node) {
  // Only for OG enabled content type.
  if (!og_is_group_type('node', $node->type)) {
    return;
  }

  // Run the code to create all the vocabularies
  // and link it with the content types.
  module_load_include('inc', 'c4m_og_vocab');
  c4m_og_vocab_trigger_create_group_vocabularies($node);
}


/**
 * Load and cache all vocabularies info from implemented info_vocabulary hooks.
 *
 * @param string $type
 *   The type of the info we need. Following types are supported:
 *   - vocabularies : Get all the Vocabulary types.
 *   - groups : Get the Vocabulary names per Group type.
 *   - content : Get the Vocabulary names per Group content type.
 *
 * @return array
 *   Configuration as collected trough the implemented
 *   hook_c4m_og_vocab_info_<$type> hooks.
 */
function c4m_og_vocab_info($type) {
  $cache_key  = 'c4m_og_vocab:info_' . $type;
  $info = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($info)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $info = $cache->data;
    }
    else {
      $hook = 'c4m_og_vocab_info_' . $type;
      $info = module_invoke_all($hook);
      cache_set($cache_key, $info);
    }
  }

  return $info;
}


/**
 * Load the group vocabulary by the given vocabulary name.
 *
 * @param object $group
 *   The group node.
 * @param string $name
 *   The vocab name as set in the hook_c4m_og_vocab_info_vocabularies() hooks.
 *
 * @return object
 *   Vocabulary object
 */
function c4m_og_vocab_load_group_vocabulary($group, $name) {
  $vocabularies = c4m_og_vocab_info(C4M_OG_VOCAB_INFO_VOCABULARIES);
  if (!isset($vocabularies[$name])) {
    return FALSE;
  }

  module_load_include('inc', 'c4m_og_vocab');

  $vocabulary = $vocabularies[$name];
  $machine_name = c4m_og_vocab_fill_string($group, $vocabulary['machine_name']);
  return taxonomy_vocabulary_machine_name_load($machine_name);
}

/**
 * Implements hook_field_widget_info_alter().
 *
 * Alter the module that handles our widget to limit the vocabularies displayed.
 */
function c4m_og_vocab_field_widget_info_alter(&$info) {
  $info['og_vocab_complex']['module'] = 'c4m_og_vocab';
}

/**
 * Implements hook_field_widget_form().
 *
 * Code taken from og_vocab, altered to display only the vocabularies of the
 * group we are currently in.
 */
function c4m_og_vocab_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $entity_type = $instance['entity_type'];
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
  $field_name = $field['field_name'];

  if (!$entity) {
    return;
  }

  // Cache the processed entity, to make sure we call the widget only once.
  $cache = &drupal_static(__FUNCTION__, array());
  list($id, , $bundle) = entity_extract_ids($entity_type, $entity);
  $identifier = $entity_type . ':' . $id . ':' . $field_name;

  if (isset($cache[$identifier])) {
    return array();
  }
  $cache[$identifier] = TRUE;

  // Retrieve the group from the context. Note: By default you can change the
  // group manually in the node creation form.
  // We are not handling this case, because we will prevent this.
  // If you create content in a group, it will be only for THAT group (fixed).
  $context = og_context();
  if (empty($context['gid'])) {
    $element['no_group_context'] = array(
      '#type' => 'markup',
      '#markup' => t('There is no group context available. Please save your group content first and then edit it.'),
      '#prefix' => '<span class="description">',
      '#suffix' => '</span>',
    );
    return $element;
  }

  $group = node_load($context['gid']);
  $all_group_vocabularies = c4m_og_vocab_info('groups');

  $terms = array();
  $tags_id = 0;
  // Iterate over all possible (enabled) vocabularies for our group type.
  foreach ($all_group_vocabularies[$group->type] as $vocabulary) {
    // Load vocabulary.
    $group_vocab = c4m_og_vocab_load_group_vocabulary($group, $vocabulary);
    $og_vocab = og_vocab_load_og_vocab($group_vocab->vid, $entity_type, $bundle);
    if ($vocabulary == 'c4m_vocab_category') {
      $terms['categories'] = taxonomy_get_tree($og_vocab->vid);
    }
    else {
      $terms['tags'] = taxonomy_get_tree($og_vocab->vid);
      $tags_id = $group_vocab->vid;
    }
    $element[$group_vocab->vid] = $og_vocab->getFormElement($entity_type, $entity, $form, $form_state);
  }

  // AngularJs widgets:
  // Needs the base url, current group ID, The "categories" taxonomy tree,
  // The values chosen for the "categories" in case of editing an entity.
  // We call the global taxonomy widget for the categories,
  // Building the necessary tree for this widget,
  // Then we call the "tags" directive.
  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  $settings['c4m']['basePath'] = url('', $options);

  $settings['c4m']['data']['group'] = $group->nid;

  $settings['c4m']['data']['tags_id'] = $tags_id;

  // For the "taxonomy" widget.
  $settings['c4m']['data']['vocabularies']['categories'] = c4m_vocab_widget_prepare_taxonomy_tree($terms['categories']);

  // Send the tags to the AngularJs if we have values (On edit page).
  $tags = array();
  foreach ($terms['tags'] as $term) {
    if (isset($entity->og_vocabulary) && !empty($entity->og_vocabulary)) {
      $values = $entity->og_vocabulary;
      foreach ($values[LANGUAGE_NONE] as $value) {
        // This is node/edit page. Need to send field values to the app.
        if ($term->tid == $value['target_id']) {
          $tags[] = array(
            'isNew' => FALSE,
            'text' => $term->name,
            'id' => $term->tid,
          );
        }
      }
    }
  }
  $settings['c4m']['data']['tags'] = $tags;

  if (!empty($entity->og_vocabulary)) {
    $categories = c4m_vocab_widget_get_selected_values($entity, 'og_vocabulary');
    // Exclude tags from categories.
    foreach ($categories as $key => $value) {
      $keep_value = TRUE;
      foreach ($tags as $tag) {
        if ($key == $tag['id']) {
          // This term is tag.
          $keep_value = FALSE;
        }
      }
      if ($keep_value) {
        $settings['c4m']['data']['values']['categories'][$key] = $value;
      }
    }
  }

  // Send all the settings to the app.
  $form['#attached']['js'][] = array(
    'data' => $settings,
    'type' => 'setting',
  );

  // Add the directive.
  // Add the "taxonomy" widget for the "categories" directive,
  // Add the "ig_vocab" widget for "tags" directive.
  $variables = array(
    'vocabulary_label' => 'Categories',
    'vocabulary_machine_name' => 'categories',
    'required' => $element['#required'],
  );

  $form['directive-categories'] = array(
    '#markup' => theme('c4m_categories_vocab_widget', $variables),
    '#weight' => $instance['widget']['weight'],
  );

  $form['directive-tags'] = array(
    '#markup' => theme(
      'c4m_og_vocab_widget',
      array('required' => $element['#required'])
    ),
    // The order of the tags directive should always
    // be under the "Region-Countries" directive.
    '#weight' => $form['directive-c4m_vocab_geo']['#weight'] + 1,
  );

  $fieldset = c4m_document_widget_get_field_parent_fieldset($instance['bundle'], $field['field_name']);
  $form['directive-categories']['#parent_fieldset'] = $fieldset;
  $form['directive-tags']['#parent_fieldset'] = $form['directive-c4m_vocab_geo']['#parent_fieldset'];

  $element['target_id']['#element_validate'][] = 'c4m_og_vocab_validate';
  $form['#attributes']['ng-controller'] = 'DrupalFormCtrl';
  $form['#attributes']['class'][] = 'drupal-form';
  $element['#prefix'] = '<div class="ng-hide">';
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Keep selected and created tags in the AngularJS when form is validating.
 *
 * @param array $element
 *    Form element.
 * @param array $form_state
 *    The current state of the validating form.
 * @param array $form
 *    The from that is validating.
 */
function c4m_og_vocab_validate(array $element, array &$form_state, array &$form) {
  // Submitted values for the og vocab field.
  $values = $form_state['values']['og_vocabulary'][LANGUAGE_NONE][0];

  $tags = array();
  $categories = array();
  foreach ($values as $value) {
    if (is_array($value)) {
      // This is a value.
      foreach ($value as $term_array) {
        if ($term_array['target_id']) {
          // The value is not empty.
          if ($term_array['target_id'] == 'autocreate') {
            // This is a new tag.
            $tags[] = array(
              'isNew' => TRUE,
              'text' => $term_array['name'],
              'id' => $term_array['name'],
            );
          }
          else {
            // This is the existing tag.
            $term = taxonomy_term_load($term_array['target_id']);
            if (is_object($term) && preg_match('/tag/i', $term->vocabulary_machine_name)) {
              $tags[] = array(
                'isNew' => FALSE,
                'text' => $term->name,
                'id' => $term->tid,
              );
            }
            elseif (is_object($term)) {
              // This is an existing category.
              $categories[$term->tid] = TRUE;
            }
          }
        }
      }
    }
  }
  $settings['c4m']['data']['tags'] = $tags;
  $settings['c4m']['data']['values']['categories'] = $categories;

  // Unset previous values.
  foreach ($form['#attached']['js'] as $id => $data) {
    if (is_array($data['data'])) {
      if (!empty($data['data']['c4m']['data']['values']['categories'])) {
        unset($form['#attached']['js'][$id]['data']['c4m']['data']['values']['categories']);
      }
    }
  }

  // Send all the settings to the app.
  $form['#attached']['js'][] = array(
    'data' => $settings,
    'type' => 'setting',
  );
}
/**
 * Implements hook_theme().
 */
function c4m_og_vocab_theme() {
  $theme['c4m_og_vocab_widget'] = array(
    'template' => 'c4m_og_vocab_widget',
    'path' => drupal_get_path('module', 'c4m_og_vocab') . '/templates',
    'variables' => array(),
  );

  $theme['c4m_categories_vocab_widget'] = array(
    'template' => 'c4m_categories_vocab_widget',
    'path' => drupal_get_path('module', 'c4m_og_vocab') . '/templates',
    'variables' => array(
      'vocabulary_label' => NULL,
      'vocabulary_machine_name' => NULL,
    ),
  );

  return $theme;
}

/**
 * Implements hook_facetapi_facet_info().
 */
function c4m_og_vocab_facetapi_facet_info(array $searcher_info) {
  $facets = array();

  // Facets are usually associated with the type of content stored in the index.
  if (isset($searcher_info['types']['node'])) {
    $vocabulary_types = c4m_og_vocab_info('vocabularies');
    foreach ($vocabulary_types as $type => $info) {
      $params = array('@type' => $info['name']);

      $facets[$type] = array(
        'name' => $type,
        'label' => t('Group : @type', $params),
        'description' => t('Filter by Group metadata of type @type.', $params),
        'field' => 'og_vocabulary',
        'field alias' => 'og_vocabulary',
        'field type' => 'taxonomy_term',
        'field api name' => 'og_vocabulary',
        'hierarchy callback' => 'search_api_facetapi_get_taxonomy_hierarchy',
        'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
        'dependency plugins' => array('role', 'bundle'),
        'facet missing allowed' => TRUE,
        'facet mincount allowed' => TRUE,
        'map callback' => 'search_api_facetapi_facet_map_callback',
        'map options' => array(
          'field' => array(
            'type' => 'list<integer>',
            'entity_type' => 'taxonomy_term',
            'name' => 'Metadata',
            'description' => 'Field "og_vocabulary".',
            'boost' => '1.0',
            'indexed' => TRUE,
            'key' => 'og_vocabulary',
          ),
          'index id' => $searcher_info['instance'],
          'value callback' => '_search_api_facetapi_facet_create_label',
        ),
        'alter callbacks' => array('c4m_og_vocab_alter_callback'),
      );
    }
  }

  return $facets;
}

/**
 * Alter the facet before it is build.
 *
 * @param array $data
 *   The data that will be displayed in the facet.
 * @param FacetapiAdapter $adapter
 *   The Facet Api adapter in use.
 * @param array $settings
 *   Teh facet settings.
 */
function c4m_og_vocab_alter_callback(array &$data, FacetapiAdapter $adapter, array $settings) {
  // Group vocabulary is only possible within a group.
  $group = c4m_og_current_group();
  if (!$group) {
    return;
  }

  // Get the vocabulary.
  $vocabulary = c4m_og_vocab_load_group_vocabulary($group, $settings['name']);
  if (!$vocabulary) {
    return;
  }

  // Filter out terms that are not related to the vocabulary.
  $terms = taxonomy_term_load_multiple(array_keys($data));
  foreach ($terms as $term) {
    if ((int) $term->vid !== (int) $vocabulary->vid) {
      unset($data[$term->tid]);
    }
  }
}
