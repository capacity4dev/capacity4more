<?php
/**
 * @file
 * Code for the Message feature.
 */

include_once 'c4m_message.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_message_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Delegate message creation for inserted entities.
 */
function c4m_message_entity_insert($entity, $entity_type) {
  c4m_message_crud_message($entity_type, $entity, 'insert');
}

/**
 * Implements hook_entity_update().
 *
 * Delegate message creation for inserted entities.
 */
function c4m_message_entity_update($entity, $entity_type) {
  c4m_message_crud_message($entity_type, $entity, 'update');
}

/**
 * Implements hook_entity_delete().
 *
 * @todo: Push item to queue.
 */
function c4m_message_entity_delete($entity, $entity_type) {
  $valid_entity_types = array(
    'comment',
    'node',
    'taxonomy_term',
    'og_membership',
  );

  if (!in_array($entity_type, $valid_entity_types)) {
    // Not an entity related to message.
    return;
  }

}

/**
 * Implements hook_entity_load().
 *
 * Add callbacks to the arguments. Instead of hardcoding them, we add those
 * arguments on the fly.
 */
function c4m_message_entity_load($entities, $entity_type) {
  if ($entity_type != 'message') {
    return;
  }

  foreach ($entities as $entity) {

    list(, , $bundle) = entity_extract_ids($entity_type, $entity);
    $func = 'c4m_message_load__' . $bundle;

    if (function_exists($func)) {
      // Call the delegated load function.
      $func($entity);
    }
  }
}

/**
 * Delegate message CRUD to message type specific functions.
 *
 * @param $entity_type
 *   The entity type.
 * @param $entity
 *   The entity object.
 * @param $op
 *   The operation to perform. Possible values are "insert" or "update"
 *
 * @return Message
 *   The saved message object, or NULL if not created or updated.
 */
function c4m_message_crud_message($entity_type, $entity, $op) {
  if (!empty($entity->_skip_message)) {
    // Entity should not create a message.
    return;
  }

  $valid_entity_types = array(
    'comment',
    'node',
    'taxonomy_term',
    'og_membership',
  );

  $valid_node_types = array(
    'discussion',
    'event',
    'photo',
    'photoalbum',
    'document',
    'wiki_page',
  );

  // Hide message for the type 'article' when the operation 'update' happened.
  if ($op != 'update') {
    array_push($valid_node_types, 'article');
  }

  if (!in_array($entity_type, $valid_entity_types)) {
    // Not an entity related to message.
    return;
  }
  if ($entity_type == 'node' && !in_array($entity->type, $valid_node_types)) {
    // Don't have to create message for this node type.
    return;
  }

  $message = NULL;

  $func = 'c4m_message__' . $op . '__' . $entity_type;
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $bundle_func = $func . '__' . $bundle;

  if (function_exists($bundle_func)) {
    // Call the bundle specific function.
    $message = $bundle_func($entity);
  }
  elseif (function_exists($func)) {
    // Call the entity specific function.
    $message = $func($entity);
  }

  if ($message) {
    $message_wrapper = entity_metadata_wrapper('message', $message);
    $message_wrapper->field_entity_published->set($entity->status);
    if (isset($message_wrapper->field_operation)) {
      $message_wrapper->field_operation->set($op);
    }
    $message->save();
  }

  return $message;
}

/**
 * A general function to add arguments for node related messages.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load_general_arguments(Message $message) {
  $message->arguments['@date'] = array(
    'callback' => 'c4m_message_format_date_for_message',
    'pass message' => TRUE,
  );

  $message->arguments['!group_info'] = array(
    'callback' => 'c4m_messages_group_info',
    'pass message' => TRUE,
  );
}

/**
 * Replace the date value of a message with a formatted value.
 *
 * @param Message $message
 *   The Message entity.
 *
 * @return string
 *   The formatted date.
 */
function c4m_message_format_date_for_message(Message $message) {
  $format = variable_get('date_format_c4m_long_without_time', 'j F Y');
  return c4m_helper_date_time_ago($message->timestamp, $format);
}

function c4m_messages_group_info(Message $message) {
  $group_info = '';
  // Add group info for activity stream on the homepage,
  // When the request is from RESTful, "drupal_is_front_page" won't work.
  $handler = og_purl_og_context_handler();
  if (((drupal_is_front_page() || !empty($_GET['homepage'])) && empty($handler) || (isset($_GET['group']) && is_array($_GET['group'])))) {
    if (isset($message->field_group_node) && !empty($message->field_group_node)) {
      $wrapper = entity_metadata_wrapper('node', $message->field_group_node[LANGUAGE_NONE][0]['target_id']);
      $group_info = t('Group: ') . l($wrapper->label(), $wrapper->value()->purl);
    }
  }
  return $group_info;
}


/**
 * Delegated hook_entity_load() for node of "discussion" bundle.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__node__discussion(Message $message) {
  c4m_message_load_general_arguments($message);
  $message->arguments['@type'] = array(
    'callback' => 'c4m_message_format_node_discussion_type',
    'pass message' => TRUE,
  );

  $message->arguments['!content'] = array(
    'callback' => 'c4m_message_format_rendered_node',
    'pass message' => TRUE,
  );
}

/**
 * Delegated hook_entity_load() for node of "article" bundle.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__node__article(Message $message) {
  c4m_message_load_general_arguments($message);

  $message->arguments['@operation'] = array(
    'callback' => 'c4m_message_format_operation',
    'pass message' => TRUE,
  );

  $message->arguments['!content'] = array(
    'callback' => 'c4m_message_format_rendered_node',
    'pass message' => TRUE,
  );
}

/**
 * Delegated hook_entity_load() for node of "wiki_page" bundle.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__node__wiki_page(Message $message) {
  c4m_message_load_general_arguments($message);

  $message->arguments['@operation'] = array(
    'callback' => 'c4m_message_format_operation',
    'pass message' => TRUE,
  );

  $message->arguments['!content'] = array(
    'callback' => 'c4m_message_format_rendered_node',
    'pass message' => TRUE,
  );
}

/**
 * Delegated hook_entity_load() for node of "document" bundle.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__node__document(Message $message) {
  c4m_message_load_general_arguments($message);

  $message->arguments['!content'] = array(
    'callback' => 'c4m_message_format_rendered_node',
    'pass message' => TRUE,
  );

  $message->arguments['@operation'] = array(
    'callback' => 'c4m_message_format_operation',
    'pass message' => TRUE,
  );
}

/**
 * Delegated hook_entity_load() for node of "photo" bundle.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__node__photo(Message $message) {
  c4m_message_load_general_arguments($message);

  $message->arguments['!content'] = array(
    'callback' => 'c4m_message_format_rendered_node',
    'pass message' => TRUE,
  );

  $message->arguments['@operation'] = array(
    'callback' => 'c4m_message_format_operation',
    'pass message' => TRUE,
  );
}

/**
 * Delegated hook_entity_load() for node of "photoalbum" bundle.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__node__photoalbum(Message $message) {
  c4m_message_load_general_arguments($message);

  $message->arguments['!content'] = array(
    'callback' => 'c4m_message_format_rendered_node',
    'pass message' => TRUE,
  );

  $message->arguments['@operation'] = array(
    'callback' => 'c4m_message_format_operation',
    'pass message' => TRUE,
  );
}

/**
 * Delegated hook_entity_load() for node of "event" bundle.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__node__event(Message $message) {
  c4m_message_load_general_arguments($message);

  $message->arguments['!content'] = array(
    'callback' => 'c4m_message_format_rendered_node',
    'pass message' => TRUE,
  );

  $message->arguments['@operation'] = array(
    'callback' => 'c4m_message_format_operation',
    'pass message' => TRUE,
  );
}

/**
 * Delegated hook_entity_load() for comment.
 *
 * Add Message arguments callbacks.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_load__c4m_insert__comment(Message $message) {
  c4m_message_load_general_arguments($message);

  $message->arguments['@node_type'] = array(
    'callback' => 'c4m_message_format_comment',
    'pass message' => TRUE,
  );

  $message->arguments['!content'] = array(
    'callback' => 'c4m_message_format_rendered_comment',
    'pass message' => TRUE,
  );
}

/**
 * Return the formatted discussion type.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_format_node_discussion_type(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $discussion_type = $wrapper->field_node->c4m_discussion_type->value();
  $operation = $wrapper->field_operation->value();

  switch ($discussion_type) {
    case 'info':
      return $operation == 'insert' ? t('posted Information') : t('updated the Information');

    case 'idea':
      return $operation == 'insert' ? t('posted an Idea') : t('updated the Idea');

    case 'question':
      return $operation == 'insert' ? t('asked a Question') : t('updated the Question');

    case 'debate':
      return $operation == 'insert' ? t('started a Debate') : t('updated the Debate');
  }
}

/**
 * Return the formatted operation name (added or updated).
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_format_operation(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $operation = $wrapper->field_operation->value();
  switch ($message->type) {
    case 'c4m_insert__node__event':
      return $operation == 'insert' ? t('added a new') : t('updated the');
    case 'c4m_insert__node__document':
      return $operation == 'insert' ? t('uploaded a new') : t('updated the');
    case 'c4m_insert__node__photo':
      return $operation == 'insert' ? t('added a new') : t('updated the');
    case 'c4m_insert__node__photoalbum':
      return $operation == 'insert' ? t('created a new') : t('updated the');
    case 'c4m_insert__node__wiki_page':
      return $operation == 'insert' ? t('created a new') : t('updated the');
    case 'c4m_insert__node__article':
      return $operation == 'insert' ? t('posted an') : t('updated the');
  }
}

/**
 * Return the formatted node type.
 *
 * @param Message $message
 *   The Message entity.
 */
function c4m_message_format_comment(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $node_type = $wrapper->field_node->type->value();

  if ($node_type == 'discussion') {
    $discussion_type = $wrapper->field_node->c4m_discussion_type->value();
    switch ($discussion_type) {
      case 'info':
        return t('Information');

      case 'idea':
        return t('Idea');

      case 'question':
        return t('Question');

      case 'debate':
        return t('Debate');
    }
  }
  else {
    switch ($node_type) {
      case 'document':
        return t('Document');
      case 'event':
        return t('Event');
      case 'wiki_page':
        return t('Wiki page');
      case 'photoalbum':
        return t('Photo album');
      case 'photo':
        return t('Photo');
      case 'task':
        return t('Task');
      case 'article':
        return t('Article');
    }
  }
}

/**
 * Return the formatted body and image.
 *
 * We get the body and image on te fly, in case a user edited the content - not
 * to show an outdated teaser.
 * We use a view mode to control the rendered node.
 *
 * @param Message $message
 *   The Message entity.
 *
 * @return string
 *   The formated string.
 */
function c4m_message_format_rendered_node(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);

  $handler = og_purl_og_context_handler();
  if ((empty($_GET['homepage'])) && !empty($handler)) {
    $view = node_view($wrapper->field_node->value(), 'activity_group');
  }
  else {
    $view = node_view($wrapper->field_node->value(), 'activity_global');
  }

  return drupal_render($view);
}

/**
 * Return the body of the comment.
 *
 * @param Message $message
 *
 * @return string
 */
function c4m_message_format_rendered_comment(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $view = comment_view($wrapper->field_comment->value(), $wrapper->field_node->value(), 'activity_stream');
  return drupal_render($view);
}

/**
 * Create a comment message.
 *
 * @param $comment
 *   The comment object.
 *
 * @return Message
 *   The non-saved message entity.
 */
function c4m_message__insert__comment($comment) {
  $values = array('uid' => $comment->uid);
  $message = message_create('c4m_insert__comment', $values);

  $node = node_load($comment->nid);
  c4m_message_prepare_insert_entity($message, 'node', $node);
  $message_wrapper = entity_metadata_wrapper('message', $message);
  $message_wrapper->field_comment->set($comment);
  return $message;
}

/**
 * Updating a comment message.
 *
 * @param $comment
 *   The comment object.
 *
 * @return Message
 *   The non-saved message entity.
 */
function c4m_message__update__comment($comment) {
  $time_since = time() - variable_get('c4m_message_join_messages', '3600');

  // Load existing message that is not older then 6 hours for the current node.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('type', 'c4m_insert__comment')
    ->propertyCondition('timestamp', $time_since, '>')
    ->fieldCondition('field_node', 'target_id', $comment->nid)
    ->fieldCondition('field_comment', 'target_id', $comment->cid)
    ->propertyOrderBy('timestamp', 'desc')
    ->range(0, 1)
    ->execute();


  $message = NULL;
  if (!empty($result['message'])) {
    $id = key($result['message']);
    $message = message_load($id);
  }

  if (!$message) {
    // Message doesn't exist - create a new message.
    $values = array('uid' => $comment->uid);
    $message = message_create('c4m_insert__comment', $values);
  }
  $node = node_load($comment->nid);
  c4m_message_prepare_insert_entity($message, 'node', $node);
  $message_wrapper = entity_metadata_wrapper('message', $message);
  $message_wrapper->field_comment->set($comment);
  return $message;
}

/**
 * Create a node message.
 *
 * @param $node
 *   The node object.
 *
 * @return Message
 *   The non-saved message entity.
 */
function c4m_message__insert__node($node) {
  $values = array('uid' => $node->uid);
  $message = message_create('c4m_insert__node__' . $node->type, $values);

  c4m_message_prepare_insert_entity($message, 'node', $node);
  return $message;
}

/**
 * Updating a node message.
 *
 * @param object $node
 *   The node object.
 * @param object $account
 *   The user object.
 *
 * @return Message
 *   The non-saved message entity, or NULL if update shouldn't occur.
 */
function c4m_message__update__node($node, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = clone $user;
  }

  if ($account->uid == 0) {
    // Drush has user "0". Assign updates to the original node creator.
    $account = user_load($node->uid);
  }

  $time_since = time() - variable_get('c4m_message_join_messages', '3600');
  // Load existing message that is not older then 6 hours for the current node.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->propertyCondition('type', 'c4m_insert__node__' . $node->type)
    ->propertyCondition('timestamp', $time_since, '>')
    ->fieldCondition('field_node', 'target_id', $node->nid)
    ->propertyOrderBy('timestamp', 'desc')
    ->range(0, 1)
    ->execute();

  $message = NULL;
  if (!empty($result['message'])) {
    $id = key($result['message']);
    $message = message_load($id);
    $wrapper = entity_metadata_wrapper('message', $message);

    if ($message->uid == $user->uid) {
      if ($wrapper->field_operation->value() == 'update') {
        // When an existing item is updated within 6 hours after the PREVIOUS
        // UPDATE by the SAME user who did the last update.
        $message->timestamp = $node->timestamp;
      }
      else {
        // When an existing item is updated within 6 hours after the initial
        // insert by the SAME user.
        return;
      }
    }
    else {
      // Need to create new message, not to update existing one.
      $values = array(
        'uid' => $account->uid,
        'timestamp' => $node->timestamp,
      );
      $message = message_create('c4m_insert__node__' . $node->type, $values, $account);
    }
  }
  else {
    // More than 6 hours last - need to create a new message.
    $values = array(
      'uid' => $account->uid,
      'timestamp' => $node->timestamp,
    );
    $message = message_create('c4m_insert__node__' . $node->type, $values, $account);
  }
  if ($message) {
    c4m_message_prepare_insert_entity($message, 'node', $node);
  }
  return $message;
}

/**
 * Set the message fields values.
 *
 * @param Message $message
 *    The message entity.
 * @param         $entity_type
 *    The entity type.
 * @param         $entity
 *    The Entity for we create/update message.
 */
function c4m_message_prepare_insert_entity(Message &$message, $entity_type, $entity) {
  $message_wrapper = entity_metadata_wrapper('message', $message);
  if ($entity_type != 'node') {
    return;
  }

  $node_wrapper = entity_metadata_wrapper($entity_type, $entity);
  $node = $entity;

  $message_wrapper->field_node->set($node);

  if (!isset($node_wrapper->{OG_AUDIENCE_FIELD})) {
    return;
  }

  if (!$node_wrapper->{OG_AUDIENCE_FIELD}->value()) {
    return;
  }

  $group_id = $node_wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE));
  $message_wrapper->field_group_node->set($group_id);
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add "Activity stream" view mode.
 */
function c4m_message_entity_info_alter(&$entity_info) {
  $entity_info['message']['view modes']['activity_group'] = array(
    'label' => t('Activity group'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['activity_group'] = array(
    'label' => t('Activity group'),
    'custom settings' => TRUE,
  );

  $entity_info['message']['view modes']['activity_global'] = array(
    'label' => t('Activity global'),
    'custom settings' => TRUE,
  );

  $entity_info['node']['view modes']['activity_global'] = array(
    'label' => t('Activity global'),
    'custom settings' => TRUE,
  );
}

/**
 * Node preprocess.
 */
function c4m_message_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'activity_group' || $variables['view_mode'] == 'activity_global') {
    $variables['theme_hook_suggestions'][] = 'node__activity_stream';
    $variables['theme_hook_suggestions'][] = 'node__' . $variables['node']->type . '__activity_stream';
  }
  $preprocess_function = "c4m_message_preprocess_node__{$variables['node']->type}";
  if (function_exists($preprocess_function)) {
    $preprocess_function($variables);
  }
}

/**
 * Node document preprocess.
 */
function c4m_message_preprocess_node__document(&$variables) {
  if ($variables['view_mode'] != 'activity_group' && $variables['view_mode'] != 'activity_global') {
    // Current view mode is not an 'activity stream'.
    return;
  }

  $node = $variables['node'];
  $node_wrapper = entity_metadata_wrapper('node', $node);

  $document = $node_wrapper->c4m_document->value();
  if (empty($document)) {
    // There is no file.
    $variables['download_link'] = '';
    $variables['file_info'] = '';
    return;
  }

  $file_uri = file_load($document['fid']);
  $download = file_entity_download_uri($file_uri);
  $variables['download_link'] = l(t('Download this Document'), $download['path'], $download['options']);
  $file_size = format_size($document['filesize']);
  $file_type = $document['type'];
  $variables['file_info'] = t('Filetype: @filetype | Filesize: @filesize', array('@filetype' => $file_type, '@filesize' => $file_size));
}

/**
 * Node event preprocess.
 */
function c4m_message_preprocess_node__event(&$variables) {
  if ($variables['view_mode'] != 'activity_group' && $variables['view_mode'] != 'activity_global') {
    // Current view mode is not an 'activity stream'.
    return;
  }

  $node = $variables['node'];
  $node_wrapper = entity_metadata_wrapper('node', $node);

  $start = $node_wrapper->c4m_datetime_end->value->value();
  $end = $node_wrapper->c4m_datetime_end->value2->value();

  $start_date = format_date($start, 'custom', 'd/m/Y');
  $end_date = format_date($end, 'custom', 'd/m/Y');

  $start_date_time = format_date($start ,'custom', 'd/m/Y H:i');
  $end_date_time = $start_date == $end_date ? format_date($end ,'custom', 'H:i') : format_date($end ,'custom', 'd/m/Y H:i');

  $variables['event_info'] = t('From @start to @end', array('@start' => $start_date_time, '@end' => $end_date_time));
}

/**
 * Adds the activity stream to the AngularJs app.
 * Depending on if the user is logged in or not,
 * The activity stream is loaded from the user's groups,
 * Or from all the public groups if user is anonymous.
 */
function c4m_message_load_homepage_activity_stream() {
  global $user;

// Get filter value.
  $filter = !empty($_GET['filter']) ? $_GET['filter'] : '';
  $groups = array();
  $interests = array();
  $hide_articles = $filter == 'groups' ? 1 : 0;

  if ($user->uid) {
    // This is an Authenticated user.

    if ($filter == 'interests' || $filter == 'groups') {
      $groups = c4m_og_get_user_group_nodes_by_bundle('group');
      $groups = $groups ? $groups : array();

      if ($filter == 'interests') {
        $hide_articles = 0;
        // Get user's interests.
        $user_wrapper = entity_metadata_wrapper('user', $user->uid);
        $interests = $user_wrapper->c4m_related_topic->raw();

        // Get groups that have topics from user's interests
        // but user is not member of these groups (we already have this list)
        $query = new EntityFieldQuery();

        $query
          ->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'group')
          ->propertyCondition('status', NODE_PUBLISHED);
        if (!empty($groups)) {
          $query->propertyCondition('nid', $groups, 'NOT IN');
        }
        if (!empty($interests)) {
          $query->fieldCondition('c4m_related_topic', 'target_id', $interests, 'IN');
        }
        $result = $query->execute();
        if (!empty($result['node'])) {
          $groups = array_merge($groups, array_keys($result['node']));
        }
      }
    }
  }



  $activity_stream_handler = restful_get_restful_handler('activity_stream');

  $request = array(
    'group' => $groups,
    'topics' => $interests,
    'html' => true,
    // Sort the activity stream by timestamp descending.
    'sort' => '-timestamp',
    'homepage' => 1,
    'hide_articles' => $hide_articles,
  );

  $activities = $activity_stream_handler->get('', $request);

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  // Pass info via Drupal.settings.
  $settings['c4m'] = array(
    'basePath' => url('', $options),
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
    'activities' => $activities,
    'data' => array(
      'request' => $request,
      'entity' => array('group' => $groups),
    ),
  );
  drupal_add_js($settings, 'setting');
}

/**
 * Implementation of hook_query_TAG_alter().
 *
 * Changes the join of the group field to "LEFT" join,
 * So it's possible to get messages without this field,
 * Also changes the condition from AND to OR. (field group has those values OR is null).
 */
function c4m_message_query_activity_stream_homepage_alter(SelectQuery &$query) {
  $tables = &$query->getTables();
  $conditions = &$query->conditions();

  $tables['field_data_field_group_node1']['join type'] = 'LEFT';
  $values = $conditions[1]['value'];
  $or = db_or()
    ->condition('field_group_node_target_id',  $values, 'IN')
    ->isNull('field_group_node_target_id');
   $query->condition($or);

  foreach ($conditions as $key => $condition) {
    if (isset($condition['field']) && !is_object($condition['field']) && $condition['field'] == 'field_data_field_group_node1.field_group_node_target_id') {
      unset($conditions[$key]);
    }
  }
}

function c4m_message_query_activity_stream_entity_field_access_alter(SelectQuery &$query) {
  $query->addMetaData('base_table', 'field_data_field_group_node');

  global $user;

  // Read meta-data from query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = $user;
  }
  if (!$op = $query->getMetaData('op')) {
    $op = 'view';
  }

  // If $account can bypass node access, or there are no node access modules,
  // or the operation is 'view' and the $account has a global view grant
  // (such as a view grant for node ID 0), we don't need to alter the query.
  if (user_access('bypass node access', $account)) {
    return;
  }
  if (!count(module_implements('node_grants'))) {
    return;
  }
  if ($op == 'view' && node_access_view_all_nodes($account)) {
    return;
  }

  $tables = $query->getTables();
  $base_table = $query->getMetaData('base_table');

  // Find all instances of the base table being joined -- could appear
  // more than once in the query, and could be aliased. Join each one to
  // the node_access table.

  $grants = node_access_grants($op, $account);

  $node_conditions = db_and();

  foreach ($tables as $nalias => $tableinfo) {
    $table = $tableinfo['table'];
    if (!($table instanceof SelectQueryInterface) && $table == $base_table) {
      // Set the subquery.
      $subquery = db_select('node_access', 'na')
        ->fields('na', array('nid'));

      $grant_conditions = db_or();
      // If any grant exists for the specified user, then user has access
      // to the node for the specified operation.
      foreach ($grants as $realm => $gids) {
        foreach ($gids as $gid) {
          $grant_conditions->condition(db_and()
            ->condition('na.gid', $gid)
            ->condition('na.realm', $realm)
          );
        }
      }

      // Attach conditions to the subquery for nodes.
      if (count($grant_conditions->conditions())) {
        $subquery->condition($grant_conditions);
      }
      $subquery->condition('na.grant_' . $op, 1, '>=');
      $field = 'nid';
      // Now handle entities.
      // Set a common alias for entities.
      $base_alias = $nalias;
      $field = 'field_group_node_target_id';
      $subquery->where("$nalias.$field = na.nid");

      // For an entity query, attach the subquery to entity conditions.
      $node_conditions->exists($subquery);
    }
  }

  if (count($subquery->conditions())) {
    // All the node access conditions are only for field values belonging to
    // nodes.
    $node_conditions->condition("$base_alias.entity_type", 'message');
    $or = db_or();
    $or->condition($node_conditions);
    // If the field value belongs to a non-node entity type then this function
    // does not do anything with it.
    $or->condition("$base_alias.entity_type", 'message', '<>');
    $or->isNull('gn.field_group_node_target_id');
    // Add the compiled set of rules to the query.
    $query->condition($or);
  }
}
