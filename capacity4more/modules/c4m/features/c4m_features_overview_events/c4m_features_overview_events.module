<?php
/**
 * @file
 * Code for the Events overview feature.
 */

include_once 'c4m_features_overview_events.features.inc';

define('C4M_FEATURES_OVERVIEW_EVENTS_SORT_BY_START_DATE', 'Sort by Start Date');
define('C4M_FEATURES_OVERVIEW_EVENTS_SORT_BY_RELEVANCE', 'Relevance');

/**
 * Implements hook_c4m_search_page_info().
 */
function c4m_features_overview_events_c4m_search_page_info() {
  return array(
    'search_api_views_c4m_overview_events' => array(
      'name' => t('Events'),
      'description' => t('Search events.'),
      'machine_name' => 'search_api_views_c4m_overview_events',
      'path' => 'events',
      'weight' => 4,
      'default' => FALSE,
      'type' => 'global',
    ),
  );
}

/**
 * Implements hook_search_api_sorts_get_default_sort_alter().
 *
 * Courtesy of https://www.drupal.org/node/1894502.
 * Unfortunately search_api_sorts module provides one sort block and not a
 * block per view, so we need to alter some stuff. Here the default sort.
 */
function c4m_features_overview_events_search_api_sorts_get_default_sort_alter(&$default_sort, $search_sorts, $keys) {
  // Change default sort into 'Sort by Start Date' for events overviews.
  if (FALSE === strpos(current_path(), 'events', 0)) {
    return;
  }
  $default_sort = $default_sort;
  foreach($search_sorts as $search_sort) {
    if (C4M_FEATURES_OVERVIEW_EVENTS_SORT_BY_START_DATE === $search_sort->name) {
      // Sort past events on date descending.
      if (0 === strpos(current_path(), 'events/past', 0)) {
        $search_sort->default_order = 'desc';
      }
      $default_sort = $search_sort;
      break;
    }
  }
}

/**
 * Implements custom hook_search_api_sorts_alter().
 *
 * See Class c4m_views_handler_area_search_api_sorts.
 * Unfortunately search_api_sorts module provides one sort block and not a
 * block per view, so we need to alter some stuff. Here we remove superfluous
 * sorts and give ours a new name.
 */
function c4m_features_overview_events_search_api_sorts_alter(&$block, $view) {
  if (in_array($view->name, array('c4m_overview_events',
    'c4m_overview_events_landing'))) {
    foreach ($block['content']['#items'] as $key => $item) {
      // Remove all sorts but start date and relevance.
      if (C4M_FEATURES_OVERVIEW_EVENTS_SORT_BY_START_DATE !== $item['#name']
        && C4M_FEATURES_OVERVIEW_EVENTS_SORT_BY_RELEVANCE !== $item['#name']
      ) {
        unset($block['content']['#items'][$key]);
      }
    }
  }
  else {
    // Remove 'Start date' sort if this is not an events overview.
    if (!in_array($view->name, array('c4m_overview_og_events',
      'c4m_overview_og_events_landing'))) {
      foreach ($block['content']['#items'] as $key => $item) {
        if (C4M_FEATURES_OVERVIEW_EVENTS_SORT_BY_START_DATE === $item['#name']) {
          unset($block['content']['#items'][$key]);
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 * 
 * On the events landing page, we need ...
 * - a Dummy View page to have an exposed search form block (page) of which we
 * will remove the output here
 * - 2 views blocks: upcoming and past
 * - a dummy views block after the 2 other blocks to overwrite the facets with
 * facet links for ALL events and not just for the latest loaded view
 * (which would be past events). We remove the output of it here.
 */
function c4m_features_overview_events_views_pre_render(&$view) {
  if ('c4m_overview_events_landing' != $view->name) {
    return;
  }
  if ('page' == $view->current_display ||
    'block_3' == $view->current_display) {
    // Nullify Views results and total count for the dummy Views displays.
    $view->result = array();
    $view->total_rows = 0;
  }
}

/**
 * Implements hook_block_info().
 */
function c4m_features_overview_events_block_info() {
  $blocks['event_views_links'] = array(
    'info' => t('Links to event views'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_features_overview_events_block_view($delta = '') {
  module_load_include('inc', 'c4m_features_overview_events', 'includes/c4m_features_overview_events.block');
  $callback = '_c4m_features_overview_events_block_' . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Implements hook_search_api_query_alter().
 *
 * Apply filter on search results in event overview.
 */
function c4m_features_overview_events_search_api_query_alter(SearchApiQueryInterface $query) {
  if (FALSE === strpos(current_path(), 'events', 0)) {
    return;
  }

  $params = drupal_get_query_parameters();
  if (empty($params['filter'])) {
    return;
  }

  global $user;

  switch ($params['filter']) {
    case 'groups':
      // Get groups.
      $groups = og_get_groups_by_user();
      if (isset($groups['node'])) {
        $groups = $groups['node'];
      }
      else {
        return;
      }

      // Create filter.
      $filter = $query->createFilter('OR');

      // Filter on groups.
      foreach ($groups as $group) {
        $filter->condition('og_group_ref', $group);
      }

      // Apply filter.
      $query->filter($filter);
      break;

    case 'interests':
      // Get user object.
      $user_wrapper = entity_metadata_wrapper('user', $user->uid);

      // Get interests & regions.
      $interests = $user_wrapper->c4m_vocab_topic->raw();
      $regions = $user_wrapper->c4m_vocab_geo->raw();
      if (empty($interests) && empty($regions)) {
        return;
      }

      // Create filter.
      $filter = $query->createFilter('OR');

      // Filter on interests.
      foreach ($interests as $interest) {
        $filter->condition('c4m_vocab_topic', $interest);
      }

      // Filter on geographic regions.
      foreach ($regions as $region) {
        $filter->condition('c4m_vocab_geo', $region);
      }

      // Apply filter.
      $query->filter($filter);
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function c4m_features_overview_events_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == '_c4m_features_overview_events_block_event_filter_form') {
    // Unset the hidden token field and form_build_id field.
    unset($form['form_id'], $form['#token'], $form['form_build_id'], $form['#build_id']);
  }
}
