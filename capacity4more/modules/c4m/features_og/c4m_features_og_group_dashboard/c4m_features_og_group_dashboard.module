<?php
/**
 * @file
 * Code for the Group Dashboard feature.
 */

include_once 'c4m_features_og_group_dashboard.features.inc';

/**
 * Implements hook_og_permission().
 */
function c4m_features_og_group_dashboard_og_permission() {
  return array(
    'c4m_og_content_promote' => array(
      'title'         => t('Promote group content'),
      'description'   => t("Allow user to promote content of the group he's a member of."),
      'roles'         => array(OG_AUTHENTICATED_ROLE),
      'default role'  => array(OG_ADMINISTRATOR_ROLE),
    ),
    'c4m_og_content_depromote' => array(
      'title'         => t('Depromote group content'),
      'description'   => t("Allow user to depromote content of the group he's a member of."),
      'roles'         => array(OG_AUTHENTICATED_ROLE),
      'default role'  => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Implements hook_flag_access().
 */
function c4m_features_og_group_dashboard_flag_access($flag, $entity_id, $action, $account) {
  if ($flag->name !== 'c4m_og_content_highlight') {
    return FALSE;
  }

  $group = c4m_og_current_group();
  if (!isset($group->nid)) {
    return FALSE;
  }

  if ($action == 'flag') {
    return og_user_access('node', $group->nid, 'c4m_og_content_promote', $account);
  }

  return og_user_access('node', $group->nid, 'c4m_og_content_depromote', $account);
}

/**
 * Implements hook_action_info().
 */
function c4m_features_og_group_dashboard_action_info() {
  $info['c4m_unflag_nodes_action'] = array(
    'type' => 'node',
    'label' => t('Unflag all nodes belonging to a group'),
    'configurable' => FALSE,
    'triggers' => array(),
  );

  return $info;
}

/**
 * Action to remove flagged group content.
 *
 * @param object $object
 *   The object that is flagged.
 * @param mixed $context
 *   The context where the content is flagged.
 */
function c4m_unflag_nodes_action(&$object, $context = array()) {
  if (isset($object->nid) && isset($context['flag'])) {
    $group_id   = c4m_og_get_gid_from_entity($object);
    $flag_id    = $context['flag']->fid;
    $flag_name  = $context['flag']->name;
    $nid = $object->nid;

    $flagged_og_content = c4m_features_og_group_dashboard_get_flagged_group_content($group_id, $flag_id);

    if (!empty($flagged_og_content)) {
      // Remove the newly flagged node from the flagged content.
      // Because this one shouldn't be unflagged.
      unset($flagged_og_content[$nid]);

      // Unflag all group content.
      foreach ($flagged_og_content as $row) {
        flag('unflag', $flag_name, $row->nid);
      }
    }
  }
}

/**
 * Implements hook_c4m_content_actions_info().
 */
function c4m_features_og_group_dashboard_c4m_content_actions_info() {
  return array(
    'action_promote' => array(
      'context'   => array('group'),
      'callback'  => 'c4m_features_og_group_dashboard_action_promote',
      'weight'    => '2',
    ),
  );
}

/**
 * Callback to show the promote link.
 *
 * @param object $node
 *    The node object.
 *
 * @return string
 *    Rendered output of the promote link.
 */
function c4m_features_og_group_dashboard_action_promote($node) {
  $flag_link = flag_create_link('c4m_og_content_highlight', $node->nid);
  $output = '<div class="group-actions-promote">' . $flag_link . '</div>';
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function c4m_features_og_group_dashboard_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'flag_confirm') {
    $flag = $form['#flag'];
    if ($flag->name === 'c4m_og_content_highlight' && $form['action']['#value'] == 'flag') {
      $flag_id = $flag->fid;
      $entity_id = $form['entity_id']['#value'];
      // Get entity you wan't to flag.
      $entity = entity_load_single($flag->entity_type, $entity_id);
      // Get group of the entity.
      $group_id   = c4m_og_get_gid_from_entity($entity);

      // Get flagged content.
      $flagged_og_content = c4m_features_og_group_dashboard_get_flagged_group_content($group_id, $flag_id);
      $flagged_og_content = entity_load($flag->entity_type, array_keys($flagged_og_content));

      // Show summary of entities who will be unflagged if you confirm.
      if (!empty($flagged_og_content)) {
        $list = array();
        foreach ($flagged_og_content as $flagged_entity) {
          $list[] = $flagged_entity->title;
        }
        $flagged_content_summary = array(
          '#theme'  => 'item_list',
          '#items'  => $list,
        );
        $flagged_content_summary = render($flagged_content_summary);

        $form['flagged_content'] = array(
          '#markup'   => '<strong>' . t('Following items will be depromoted:') . '</strong>' . $flagged_content_summary,
        );
      }
    }
  }
}

/**
 * Function to get flagged group content.
 *
 * @param mixed $og_id
 *   The Organic Group nid.
 * @param mixed $flag_id
 *   The Flag record id.
 * @param mixed $limit
 *   The number of items to return.
 *
 * @return array|null
 *   Array of node objects that are flagged.
 */
function c4m_features_og_group_dashboard_get_flagged_group_content($og_id = NULL, $flag_id = NULL, $limit = NULL) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->fields('f', array('uid'));
  $query->join('og_membership', 'og', 'n.nid = og.etid');
  $query->join('flagging', 'f', 'n.nid = f.entity_id');
  $query->condition('og.gid', $og_id, '=');
  $query->condition('f.fid', $flag_id, '=');
  if (isset($limit)) {
    $query->range(0, $limit);
  }

  $flagged_content = $query->execute();
  $flagged_content = $flagged_content->fetchAllAssoc('nid');

  return $flagged_content;
}
