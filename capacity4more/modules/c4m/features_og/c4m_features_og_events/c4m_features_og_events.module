<?php
/**
 * @file
 * Code for the Group Events feature.
 */
define('C4M_FEATURES_OG_EVENTS_SORT_BY_START_DATE', "Sort by Start Date");

include_once 'c4m_features_og_events.features.inc';

/**
 * Implements hook_c4m_og_feature_info().
 */
function c4m_features_og_events_c4m_og_feature_info() {
  return array(
    'c4m_features_og_events' => array(
      'name' => t('Events'),
      'description' => t('Events overview.'),
      'machine_name' => 'c4m_features_og_events',
      'weight' => 4,
      'default' => TRUE,
      'group_types' => array('group', 'project'),
      'content_types' => array('event'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_features_og_events_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_search_api_sorts_get_default_sort_alter()
 * Courtesy of https://www.drupal.org/node/1894502
 *
 * Unfortunately search_api_sorts module provides one sort block and not a
 * block per view, so we need to alter some stuff. Here the default sort.
 *
 * @param $default_sort
 * @param $search_sorts
 * @param $keys
 */
function c4m_features_og_events_search_api_sorts_get_default_sort_alter(&$default_sort, $search_sorts, $keys) {
  // Change default sort into 'Sort by Start Date' for events overviews.
  if (FALSE === strpos(current_path(), 'calendar', 0)) {
    return;
  }
  foreach($search_sorts as $search_sort) {
    if (C4M_FEATURES_OG_EVENTS_SORT_BY_START_DATE === $search_sort->name) {
      // Sort past events on date descending.
      if (0 === strpos(current_path(), 'calendar/past', 0)) {
        $search_sort->default_order = 'desc';
      }
      $default_sort = $search_sort;
      break;
    }
  }
}

/**
 * Implements custom hook_search_api_sorts_alter().
 * See Class c4m_views_handler_area_search_api_sorts.
 *
 * Unfortunately search_api_sorts module provides one sort block and not a
 * block per view, so we need to alter some stuff. Here we remove superfluous
 * sorts and give ours a new name.
 *
 * @param $block
 */
function c4m_features_og_events_search_api_sorts_alter(&$block, $view) {
  // Change default sort into 'Sort by Start Date' for events overviews.
  if (FALSE === strpos(current_path(), 'calendar', 0)) {
    return;
  }
  // Remove 'Start date' sort if this is not an events overview.
  if (!in_array($view->name, array('c4m_overview_og_events',
      'c4m_overview_og_events_landing'))) {
    foreach($block['content']['#items'] as $key => $item) {
      if (C4M_FEATURES_OG_EVENTS_SORT_BY_START_DATE === $item['#name']) {
        unset($block['content']['#items'][$key]);
        break;
      }
    }
    return;
  }

  foreach($block['content']['#items'] as $key => $item) {
    // Remove all sorts but start date if we are on events overview.
    if (C4M_FEATURES_OG_EVENTS_SORT_BY_START_DATE !== $item['#name']) {
      unset($block['content']['#items'][$key]);
    }
  }
}

/**
 * Implementation of hook_search_api_views_query_alter()
 *
 * We need to alter the search query for the events landing page.
 * The first Views display is only there to have an exposed fulltext search
 * form.
 *
 * We retrieve the search terms from it and manually put it in the search
 * query for the block displays (upcoming and past).
 *
 * @param view $view
 * @param SearchApiViewsQuery $query
 */
function c4m_features_og_events_search_api_views_query_alter(view &$view, SearchApiViewsQuery &$query) {
  if ('c4m_overview_og_events_landing' != $view->name) {
    return;
  }
  $keys = &drupal_static(__FUNCTION__);

  if ('page' === $view->current_display) {
    // The first page display, this is merely to have the exposed form.
    // We save the fulltext search terms in a static variable.
    // We know this view is executed first.
    $keys = $query->getKeys();
  }
  else {
    // We manually put the search term of the exposed form of the Views
    // page display into the block displays. (Upcoming and past blocks.)
    // Otherwise a search query with terms would visually seem to have no
    // effect.
    // We also put it in the third block which overrides the facet links and
    // makes sure we have the correct facet link counts.
    $query->keys($keys);
  }
}

/**
 * Implementation of hook_views_pre_render()
 *
 * On the events landing page, we need ...
 * - a Dummy View page to have an exposed search form block (page) of which we
 * will remove the output here
 * - 2 views blocks: upcoming and past
 * - a dummy views block after the 2 other blocks to overwrite the facets with
 * facet links for ALL events and not just for the latest loaded view
 * (which would be past events). We remove the output of it here.
 *
 * @param $view
 */
function c4m_features_og_events_views_pre_render(&$view) {
  if ('c4m_overview_og_events_landing' != $view->name) {
    return;
  }
  if ('page' == $view->current_display ||
      'block_3' == $view->current_display) {
    // Nullify Views results and total count for the dummy Views displays.
    $view->result = array();
    $view->total_rows = 0;
  }
}

/**
 * Implements hook_block_info().
 */
function c4m_features_og_events_block_info() {
  $blocks['event_views_links'] = array(
    'info' => t('Links to event views'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_features_og_events_block_view($delta = '') {
  module_load_include('inc', 'c4m_features_og_events', 'includes/c4m_features_og_events.block');
  $callback = '_c4m_features_og_events_block_' . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Implements hook_block_view_alter().
 *
 * @param $data
 * @param $block
 */
function c4m_features_og_events_block_view_alter(&$data, $block) {
  if ('calendar' === current_path()) {
    // Override blocks on the events landing page.
    module_load_include('inc', 'c4m_features_og_events', 'includes/c4m_features_og_events.block');
    return _c4m_features_og_events_landing_block_view_alter($data, $block);
  }
}

/**
 * Implements hook_facet_items_alter()
 *
 * @param $build
 * @param $settings
 */
function c4m_features_og_events_facet_items_alter(&$build, &$settings) {
  if ($settings->facet == "c4m_datetime_end:value2") {
    foreach($build as $key => $item) {
      // Change the path of the link to the corresponding Views pages.
      // upcoming events: ./upcoming
      // past events: ./past
      $build[$key]['#path'] .= '/' . $key;
      $build[$key]['#class'][] = $key . '-events';
      // Remove the filter on this range, because it's superfluous.
      foreach ($build[$key]['#query']['f'] as $i => $facet) {
        $range_facet = 'c4m_datetime_end%3Avalue2:' . $key;
        if ($range_facet === $facet) {
          unset($build[$key]['#query']['f'][$i]);
        }
      }
      // If there are no more facet query parameters, remove them entirely.
      if (empty($build[$key]['#query']['f'])) {
        unset($build[$key]['#query']['f']);
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add "Upcoming event" view mode.
 */
function c4m_features_og_events_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['upcoming_event'] = array(
    'label' => t('Upcoming event'),
    'custom settings' => TRUE,
  );
}

/**
 * Get rendered events for loggedin user.
 *
 * @return string
 *  HTML of rendered upcoming events, FALSE if there's no events.
 */
function c4m_features_og_events_upcoming_events_loggedin() {
  global $user;
  // Get content filter.
  $filter = !empty($_GET['filter']) ? $_GET['filter'] : '';
  $range = 3;

  $user_wrapper = entity_metadata_wrapper('user', $user->uid);
  $interests = $filter == 'interests' ? $user_wrapper->c4m_related_topic->raw() : array();

  $groups = $filter == 'groups' ? og_get_groups_by_user() : array();

  $events = c4m_features_og_events_upcoming_events_get_events($range, $interests, $groups);

  return $events;
}

/**
 * Get rendered events for anonymous user.
 *
 * @return string
 *  HTML of rendered upcoming events, FALSE if there's no events.
 */
function c4m_features_og_events_upcoming_events_anonymous() {
  $range = 1;
  return c4m_features_og_events_upcoming_events_get_events($range);
}

/**
 * @param $range
 *  Count of events should be taken.
 * @param $groups
 *  Optionally list of groups events belong to.
 * @param $topics
 *  Optionally list of topics user is interested in.
 *
 * @return bool|string
 *  HTML of rendered upcoming events, FALSE if there's no events.
 */
function  c4m_features_og_events_upcoming_events_get_events($range, $topics = array(), $groups = array()) {
  // Show all events starting from midnight onwards.
  $tomorrow = new DateTime('midnight tomorrow');
  $date = $tomorrow->format('Y-m-d H:i:s');
  $events = '';

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('c4m_datetime_end', 'value', $date, '>=');

  if (!empty($groups)) {
    $query->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $groups, 'IN');
  }

  if (!empty($topics)) {
    $query->fieldCondition('c4m_related_topic', 'target_id', $topics, 'IN');
  }

  $result = $query
    ->fieldOrderBy('c4m_datetime_end', 'value', 'ASC')
    ->range(0, $range)
    ->execute();

  if (empty($result['node'])) {
    return FALSE;
  }

  // Render events.
  foreach ($result['node'] as $event) {
    $node = node_view(node_load($event->nid), 'upcoming_event');
    $events .= drupal_render($node);
  }

  return $events;
}
