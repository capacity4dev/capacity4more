<?php

/**
 * Implements hook_field_widget_info().
 */
function c4m_document_widget_field_widget_info() {
  $widgets['c4m_add_document'] = array(
    'label' => t('C4M Document'),
    'description' => t('Load new document or select existing.'),
    'field types' => array('entityreference'),
    'settings' => array(
      'match_operator' => 'CONTAINS',
      'size' => 60,
      'path' => '',
    ),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_overlay_child_initialize().
 */
function c4m_document_widget_overlay_child_initialize() {
  $item = menu_get_item();
  // If this is overlay page - do not refresh the parent page in order not to
  // loose previous changes.
  if ($item['path'] == 'overlay-node/%/edit') {
    $_SESSION['overlay_refresh_parent'] = FALSE;
  }

  if ($item['path'] == 'overlay/documents' || $item['path'] == 'overlay-node/%/edit') {
    // Add specific for overlay pages javascript.
    drupal_add_js(drupal_get_path('module', 'c4m_document_widget') . '/js/document_overlay.js');
  }
}

/**
 * hook_module_implements_alter(&$implementations, $hook)
 *
 * Change the execution order of the hook_overlay_child_initialize().
 */
function c4m_document_widget_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'overlay_child_initialize') {
    $c4m_document_widget = $implementations['c4m_document_widget'];
    unset($implementations['c4m_document_widget']);
    $implementations['c4m_document_widget'] = $c4m_document_widget;
  }
}


/**
 * Implements hook_field_widget_form().
 */
function c4m_document_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;

  if (!$entity) {
    return;
  }
  $entity_type = $entity->type;

  // Add autocomplete widget, that will be hidden.
  $instance['widget']['type'] = 'entityreference_autocomplete_tags';
  $instance['widget']['active'] = 1;

  $form['#attributes']['ng-controller'] = 'DrupalFormCtrl';
  $form['#attributes']['class'][] = 'drupal-form';

  unset($element['#weight']);
  $element = entityreference_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  $element['#element_validate'] = array('c4m_document_widget_entityreference_autocomplete_tags_validate');
  $element['#prefix'] = '<div class="ng-hide">';
  $element['#suffix'] = '</div>';

  // Add the angular directive.

  // Get the existing field value.
  $default_value = $element['#default_value'];

  $default_values = array();
  preg_match_all("/\((\d+)\)/", $default_value, $default_values);
  $default_value = implode(',', $default_values[1]);

  $field_name = drupal_clean_css_identifier($field['field_name']);
  $params = array(
    'default_value' => $default_value,
    'field_name' => $field_name,
    'title' => $element['#title'],
  );
  $directive = theme('c4m_document_widget_document_widget', $params);
  $form['add_document-' . $field_name] = array(
    '#markup' => $directive,
    '#weight' => $instance['widget']['weight'],
  );

  $fieldset = c4m_document_widget_get_field_parent_fieldset($entity_type, $field['field_name']);
  $form['add_document-' . $field_name]['#parent_fieldset'] = $fieldset;

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );
  // PURL options.
  $options_context = array(
    'purl' => array(
      'disabled' => FALSE,
    ),
    'absolute' => TRUE,
  );

  $settings['c4m'] = array(
    'basePath' => url('', $options),
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
    'data' => array(
      'purl' => url('', $options_context),
      'relatedDocuments' => array(
        $field_name => $default_values[1],
      ),
      // The form id in HTML is with dashes, not underscores.
      'formId' => drupal_clean_css_identifier($form_state['build_info']['form_id']),
    )
  );

  // Send all the settings to the app.
  $form['#attached']['js'][] = array(
    'data' => $settings,
    'type' => 'setting'
  );

  return $element;
}

/**
 * Get field parent fieldset name.
 *
 * @param $entity_type
 *  The entity type.
 * @param $field_name
 *  The name of the field.
 *
 * @return String
 *  Return fieldset name.
 */
function c4m_document_widget_get_field_parent_fieldset($entity_type, $field_name) {
  $fieldset_name = NULL;
  // Get parent fieldset name and add it as a property to the widget.
  $field_groups = field_group_info_groups('node', $entity_type);
  if (!empty($field_groups['form'])) {
    foreach ($field_groups['form'] as $group) {
      $children = $group->children;
      if (in_array($field_name, $children)) {
        $fieldset_name = $group->group_name;
        // We already found the fieldset name.
        return $fieldset_name;
      }
    }
  }
  return $fieldset_name;
}

/**
 * Implements hook_form_alter().
 *
 * Add our custom widgets to theirs fieldsets if needed.
 */
function c4m_document_widget_form_alter(&$form, &$form_state, $form_id) {
  foreach($form as $field_name => $field) {
    if (is_array($field)) {
      if (!empty($field['#parent_fieldset'])) {
        // Add field as a child to his parent fieldset.
        $form['#groups'][$field['#parent_fieldset']]->children[] = $field_name;
        $form['#group_children'][$field_name] = $field['#parent_fieldset'];
      }
    }
  }
}

/**
 * Redefines the _entityreference_autocomplete_tags_validate().
 *
 * Only nids in the input are now required.
 */
function c4m_document_widget_entityreference_autocomplete_tags_validate($element, &$form_state, &$form) {
  $value = array();
  $field_name = drupal_clean_css_identifier($element['#field_name']);
  // If a value was entered into the autocomplete...
  if (!empty($element['#value'])) {
    $entities = drupal_explode_tags($element['#value']);
    $value = array();
    foreach ($entities as $entity) {
      // Take "label (entity id)', match the id from parenthesis.
      if (preg_match("/.*\((\d+)\)/", $entity, $matches)) {
        $value[] = array(
          'target_id' => $matches[1],
        );
      }
      else {
        // Try to get a match from the input string when the user didn't use the
        // autocomplete but filled in a value manually.
        $field = field_info_field($field_name);
        $handler = entityreference_get_selection_handler($field);
        $value[] = array(
          'target_id' => $handler->validateAutocompleteInput($entity, $element, $form_state, $form),
        );
      }
    }

  }
  // Update the value of this element so the field can validate the product IDs.
  form_set_value($element, $value, $form_state);

  // Getting array of related document ids from the existing field value.
  $field_values = array();

  preg_match_all("/\((\d+)\)/", $element['#value'], $field_values);

  $settings['c4m']['data']['relatedDocuments'][$field_name] = $field_values[1];

  // Unset previous related documents values.
  foreach ($form['#attached']['js'] as $id => $data) {
    if (!empty($data['data']['c4m']['data']['relatedDocuments'][$field_name])) {
      unset($form['#attached']['js'][$id]['data']['c4m']['data']['relatedDocuments'][$field_name]);
    }
  }

  // Send all the settings to the app.
  $form['#attached']['js'][] = array(
    'data' => $settings,
    'type' => 'setting'
  );
}

/**
 * Implements hook_theme().
 */
function c4m_document_widget_theme() {
  $theme['c4m_document_widget_document_widget'] = array(
    'template' => 'c4m_document_widget',
    'path' => drupal_get_path('module', 'c4m_document_widget') . '/templates',
    'variables' => array(
      'default_value' => NULL,
      'field_name' => NULL,
      'title' => NULL,
    ),
  );

  $theme['c4m_document_widget_add_document'] = array(
    'template' => 'c4m_document_widget_add_document',
    'path' => drupal_get_path('module', 'c4m_document_widget') . '/templates',
    'variables' => array(
      'file_id' => NULL,
      'file' => NULL,
    ),
  );

  return $theme;
}

/**
 * Implements hook_entity_type_label().
 */
function c4m_document_widget_entity_type_label($variables) {
  if ($variables['entity_type'] !== 'node') {
    return;
  }

  $node = $variables['entity'];

  if ($node->type !== 'discussion') {
    return;
  }

  $object_wrapper = entity_metadata_wrapper('node', $node);
  $variables['return'] = $object_wrapper->c4m_discussion_type->value();

  return $variables;
}

/**
 * Implements hook_menu_alter().
 *
 * Add a custom menu alter for editing nodes which simply can be opened via
 * overlay.
 *
 * @see c4m_document_widget_admin_paths_alter().
 */
function c4m_document_widget_menu_alter(&$items) {
  $items['overlay-node/%node/edit'] = $items['node/%node/edit'];
}

/**
 * Implements hook_admin_paths().
 */
function c4m_document_widget_admin_paths() {
  $paths = array(
    '*/overlay/*' => TRUE,
    'overlay/*' => TRUE,
    '*/overlay-file/*' => TRUE,
    'overlay-file/*' => TRUE,
    '*/node/*/edit' => TRUE,
    'overlay-node/*' =>TRUE,
  );
  return $paths;
}

/**
 * Implements hook_menu().
 */
function c4m_document_widget_menu() {
  $items['overlay-file/%'] = array(
    'page callback' => 'c4m_document_widget_add_document_file',
    'access callback' => 'c4m_document_widget_check_file_access',
    'page arguments' => array(1),
    'access arguments' => array(1),
  );
  return $items;
}

/**
 * Check if user has access to the current file.
 *
 * @param $file_id
 *  Document's file id
 *
 * @return boolean
 *  Return true if user has access at list to one node with the current file.
 *  Otherwise return false.
 */
function c4m_document_widget_check_file_access($file_id) {

  // Get all references to the current file.
  $file_references = file_get_file_references(file_load($file_id));
  $image_references = file_get_file_references(file_load($file_id), NULL, FIELD_LOAD_REVISION, 'image');

  $references = array_merge($file_references, $image_references);
  if (!$references) {
    // This is new file, that user has just added.
    return TRUE;
  }
  foreach ($references as $element) {
    foreach ($element as $type => $entity){
      $entity = reset($entity);
      if ($type != 'node') {
        // Entity is not a node.
        continue;
      }
      if (node_access('view', node_load($entity->nid))) {
        // User has access to at list one node with the current file so he has
        // access to the file.
        return TRUE;
      }
    }
  }
  // User doesn't have access to the file.
  return FALSE;
}

/**
 * Renders pre-create document form.
 *
 * @param $file_id
 *  Document's file id.
 *
 * @return string
 *  Return formatted html of the overlay-file page.
 */
function c4m_document_widget_add_document_file($file_id) {
  $file = file_load($file_id);
  // Get file view.
  $file_view = file_view($file);
  $variables = array(
    'file_id' => $file_id,
    'file' => drupal_render($file_view, 'teaser'),
  );

  // Get group context or use the default one.
  $context = og_context();
  if (!$context) {
    // There is no og context.
    return;
  }
  $group_id = $context['gid'];

  // Get fields for the documents.
  $handler = restful_get_restful_handler('documents');
  // Send the fields to the app as separate objects by resource (for validation on submit.)
  $field_schema['resources']['documents'] = $handler->options('', array('group' => $group_id));

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );
  // PURL options.
  $options_context = array(
    'purl' => array(
      'disabled' => FALSE,
    ),
    'absolute' => TRUE,
  );
  $settings['c4m'] = array(
    'field_schema' => $field_schema,
    'basePath' => url('', $options),
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
    'data' => array(
      'groupID' => $group_id,
      'purl' => url('', $options_context),
    )
  );

  drupal_add_js($settings, 'setting');

  return theme('c4m_document_widget_add_document', $variables);
}

/**
 * Implements hook_entity_info_alter().
 */
function c4m_document_widget_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['library'] = array(
    'label' => t('Library'),
    'custom settings' => TRUE,
  );
}

/**
 * Node preprocess.
 */
function c4m_document_widget_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'library') {
    $variables['theme_hook_suggestions'][] = 'node__' . $variables['node']->type . '__library';
  }
  $preprocess_function = "c4m_document_widget_preprocess_node__{$variables['node']->type}";
  if (function_exists($preprocess_function)) {
    $preprocess_function($variables);
  }
}

/**
 * Node document preprocess.
 *
 * Prepare node for 'library' node view.
 */
function c4m_document_widget_preprocess_node__document(&$variables) {
  if ($variables['view_mode'] != 'library') {
    // Current view mode is not a 'library'.
    return;
  }

  $node = $variables['node'];
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Get the node author's name.
  $user = user_load($node->uid);
  $user_name = $user->name;

  // Format the creation date.
  $timestamp = $node->created;
  $date = format_date($timestamp ,'custom', 'l, d/m/Y');

  $variables['document_data'] = t('Submitted by @user on @date', array('@user' => $user_name, '@date' => $date));

  // Set default preview if we don't have file or it's not an image.
  $image_params = array(
    'attributes' => array('class' => array('img-responsive')),
    'path' => 'missing_icon.png',
  );
  $variables['preview'] = theme('image', $image_params);

  $document = $node_wrapper->c4m_document->value();
  if (empty($document)) {
    // There is no file.
    $variables['file_info'] = '';
    return;
  }

  // Prepare file data.
  $file_size = format_size($document['filesize']);
  $file_type = $document['type'];
  $variables['file_info'] = t('Filetype: @filetype | Filesize: @filesize', array('@filetype' => $file_type, '@filesize' => $file_size));

  if ($file_type == 'image') {
    // Use the image file itself as a preview.
    $file = file_load($document['fid']);
    $image_params = array(
      'attributes' => array('class' => array('img-responsive')),
      'path' => $file->uri,
    );
    $variables['preview'] = theme('image', $image_params);
  }
}
