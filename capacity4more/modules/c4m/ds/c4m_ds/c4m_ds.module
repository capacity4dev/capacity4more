<?php
/**
 * @file
 * Code for the C4M Display Suite feature.
 */

include_once 'c4m_ds.features.inc';

// Fallback to avoid missing bootstrap functionality.
require_once(drupal_get_path('theme', 'bootstrap') . '/includes/process.inc');

/**
 * Implements hook_ds_layout_info().
 */
function c4m_ds_ds_layout_info() {
  $path = drupal_get_path('module', 'c4m_ds');
  $path .= '/layouts';

  $layouts = array();

  // Details of the layouts.
  $layouts['c4m_ds_3_9_fluid'] = array(
    'label'   => t('Fluid 3-9 unstacked.'),
    'path'    => $path . '/c4m_ds_3_9_fluid',
    'regions' => array(
      'left'  => t('Left'),
      'right' => t('Right'),
    ),
    'form'    => TRUE,
    'image'   => FALSE,
  );
  $layouts['c4m_ds_3_9_fluid_stacked'] = array(
    'label'    => t('Fluid 3-9 stacked.'),
    'path'     => $path . '/c4m_ds_3_9_fluid_stacked',
    'regions'  => array(
      'header' => t('Header'),
      'left'   => t('Left'),
      'right'  => t('Right'),
    ),
    'form'     => TRUE,
    'image'    => FALSE,
  );

  $layouts['c4m_ds_4_8_fluid'] = array(
    'label'   => t('Fluid 4-8 unstacked.'),
    'path'    => $path . '/c4m_ds_4_8_fluid',
    'regions' => array(
      'left'  => t('Left'),
      'right' => t('Right'),
    ),
    'form'    => TRUE,
    'image'   => TRUE,
  );

  $layouts['c4m_ds_8_4_fluid'] = array(
    'label'    => t('Fluid 8-4 stacked.'),
    'path'     => $path . '/c4m_ds_8_4_fluid',
    'regions'  => array(
      'header' => t('Header'),
      'left'   => t('Left'),
      'right'  => t('Right'),
    ),
    'form'     => TRUE,
    'image'    => TRUE,
  );

  $layouts['c4m_ds_2col_icon_left'] = array(
    'label'   => t('Two columns with the content icon left.'),
    'path'    => $path . '/c4m_ds_2col_icon_left',
    'regions' => array(
      'left'  => t('Icon'),
      'right' => t('Content'),
    ),
    'form'    => TRUE,
    'image'   => TRUE,
  );

  $layouts['c4m_ds_3col_icon_left'] = array(
    'label'   => t('Three columns with the content icon left.'),
    'path'    => $path . '/c4m_ds_3col_icon_left',
    'regions' => array(
      'left'  => t('Icon'),
      'middle' => t('Content middle'),
      'right' => t('Content right'),
    ),
    'form'    => TRUE,
    'image'   => TRUE,
  );

  $layouts['c4m_ds_4col_table_vbo'] = array(
    'label'   => t('Fluid 4 columns with space on the left for a bulk operation checkbox.'),
    'path'    => $path . '/c4m_ds_4col_table_vbo',
    'regions' => array(
      'first' => t('First'),
      'second' => t('Second'),
      'third' => t('Third'),
      'fourth' => t('Fourth'),
    ),
    'form'    => TRUE,
    'image'   => TRUE,
  );

  return $layouts;
}

/**
 * Expose default view modes.
 *
 * This hook is called by CTools. For this hook to work, you need
 * hook_ctools_plugin_api(). The values of this hook can be overridden
 * and reverted through the UI.
 */
function c4m_ds_ds_view_modes_info() {
  $ds_view_modes = array();

  // Prevent using default preview view mode because certain modules
  // depend on it. We introduce a custom preview view mode.
  $ds_view_mode                 = new stdClass;
  $ds_view_mode->disabled       = FALSE; /* Edit this to true to make a default ds_view_mode disabled initially */
  $ds_view_mode->api_version    = 1;
  $ds_view_mode->view_mode      = 'c4m_preview';
  $ds_view_mode->label          = 'C4M preview';
  $ds_view_mode->entities       = array(
    'file' => 'file',
  );
  $ds_view_modes['c4m_preview'] = $ds_view_mode;

  $ds_view_mode                   = new stdClass;
  $ds_view_mode->disabled         = FALSE; /* Edit this to true to make a default ds_view_mode disabled initially */
  $ds_view_mode->api_version      = 1;
  $ds_view_mode->view_mode        = 'c4m_dashboard';
  $ds_view_mode->label            = 'Dashboard';
  $ds_view_mode->entities         = array(
    'node' => 'node',
  );
  $ds_view_modes['c4m_dashboard'] = $ds_view_mode;

  $ds_view_mode                   = new stdClass;
  $ds_view_mode->disabled         = FALSE; /* Edit this to true to make a default ds_view_mode disabled initially */
  $ds_view_mode->api_version      = 1;
  $ds_view_mode->view_mode        = 'c4m_teaser_list';
  $ds_view_mode->label            = 'Teaser list';
  $ds_view_mode->entities         = array(
    'node' => 'node',
  );
  $ds_view_modes['c4m_teaser_list'] = $ds_view_mode;

  $ds_view_mode                   = new stdClass;
  $ds_view_mode->disabled         = FALSE; /* Edit this to true to make a default ds_view_mode disabled initially */
  $ds_view_mode->api_version      = 1;
  $ds_view_mode->view_mode        = 'c4m_teaser_table';
  $ds_view_mode->label            = 'Teaser table';
  $ds_view_mode->entities         = array(
    'node' => 'node',
  );
  $ds_view_modes['c4m_teaser_table'] = $ds_view_mode;


  return $ds_view_modes;
}

/**
 * Define fields.
 *
 * These fields are not overridden through the interface.
 * If you want those, look at hook_ds_custom_fields_info().
 *
 * @param string $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return array
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function c4m_ds_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_ds');

  // Fields for entity type node.

  // Creation time.
  $date_formatters = c4m_helper_date_formatters();

  $fields['node']['c4m_ds_submitted_by_and_on'] = array(
    'title'      => t('User name + creation date'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('*|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_submitted_by_and_on',
    'properties' => array(
      'formatters' => $date_formatters,
    ),
  );

  $fields['node']['c4m_ds_creation_date'] = array(
    'title'      => t('C4M creation date'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('*|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_creation_date',
    'properties' => array(
      'formatters' => $date_formatters,
    ),
  );

  $fields['node']['c4m_ds_type_posted_by'] = array(
    'title'      => t('Node type posted by - on (meta)'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('*|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_type_posted_by',
    'properties' => array(
      'default' => 'Default',
    ),
  );

  $fields['node']['c4m_ds_content_type_icon'] = array(
    'title'      => t('Content type icon'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('*|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_content_type_icon',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['node']['c4m_ds_content_footer_stats'] = array(
    'title'      => t('Footer stats'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('*|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_content_footer_stats',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['node']['c4m_ds_content_status'] = array(
    'title'      => t('Publication Status'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('*|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_content_status',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  // Fields for Group nodes

  // A field to give list of all members of a group node with a particular role.
  foreach (c4m_og_get_group_bundles() as $group_bundle => $og_roles) {
    $fields['node']['c4m_ds_group_role_members'] = array(
      'title'      => t('Group role members'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit'   => array($group_bundle . '|*'),
      'file'       => $path . '/includes/c4m_ds.theme.node.inc',
      'function'   => 'theme_c4m_ds_group_role_members',
      'properties' => array('formatters' => $og_roles),
    );
  }

  $fields['node']['c4m_ds_group_access_info'] = array(
    'title'      => t('Group access info'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('group|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_group_access_info',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['node']['c4m_ds_group_members_count'] = array(
    'title'      => t('Group members count'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('group|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_group_members_count',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['node']['c4m_ds_group_posts_count'] = array(
    'title'      => t('Group posts count'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('group|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_group_posts_count',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['node']['c4m_ds_group_type'] = array(
    'title'      => t('Group type'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('group|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_group_type',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['node']['c4m_ds_group_type_icon'] = array(
    'title'      => t('Group type icon'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('group|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_group_type_icon',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['node']['c4m_ds_group_membership_type'] = array(
    'title'      => t('Group membership type'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit'   => array('group|*'),
    'file'       => $path . '/includes/c4m_ds.theme.node.inc',
    'function'   => 'theme_c4m_ds_group_membership_type',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  // Fields for entity type file.
  $fields['file']['c4m_ds_download_link'] = array(
    'title'      => t('C4M file download link'),
    'field_type' => DS_FIELD_TYPE_THEME,
    // Currently for all file bundles.
    'ui_limit'   => array('*|*'),
    'properties' => array(
      'formatters' => array(
        'c4m_ds_formatter_link_and_size' => t('C4M download link with filesize'),
      ),
    ),
  );

  $fields['file']['c4m_ds_document_preview'] = array(
    'title'      => t('C4M document preview'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    // Currently for document only.
    'ui_limit'   => array('document|*'),
    'file'       => $path . '/includes/c4m_ds.theme.file.inc',
    'function'   => 'theme_c4m_ds_document_preview',
  );

  return $fields;
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_ds_field_formatter_info() {
  $formatters = array(
    // Formatter to present download link of a file in particular format.
    'c4m_ds_formatter_link_and_size' => array(
      'label'       => t('C4M Download link with filesize'),
      'description' => t('Displays a link that will force the browser to
        download the file.'),
      'field types' => array('file', 'image'),
      'settings'    => array(
        'text' => t('Download [file:name]'),
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see media_field_formatter_info()
 */
function c4m_ds_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'c4m_ds_formatter_link_and_size') {
    $settings = $display['settings'];
    $element  = array();
    foreach ($items as $delta => $item) {
      $file = (object) $item;
      if (file_entity_access('download', $file)) {
        $element[$delta] = array(
          '#theme' => 'c4m_ds_formatter_link_and_size',
          '#file'  => $file,
          '#text'  => $settings['text'],
        );
      }
    }
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function c4m_ds_theme() {
  $path = drupal_get_path('module', 'c4m_ds') . '/templates';

  return array(
    'c4m_ds_formatter_link_and_size' => array(
      'variables' => array('file' => NULL, 'icon_directory' => NULL, 'text' => NULL),
      'file' => 'includes/c4m_ds.theme.file.inc',
    ),
    'c4m_ds_entity_comments_count' => array(
      'variables' => array('count' => 0),
      'path' => $path,
      'template' => 'c4m_ds_entity_comments_count',
    ),
    'c4m_ds_entity_views_count' => array(
      'variables' => array('count' => 0),
      'path' => $path,
      'template' => 'c4m_ds_entity_views_count',
    ),
  );
}

/**
 *  Implements hook_ds_pre_render_alter().
 */
function c4m_ds_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {
  // DS and field_group together sometimes break weight.
  // We can use field key in region as weight as fields are ordered now.
  foreach ($layout_render_array as $region_name => $content) {
    foreach ($content as $key => $field) {
      $layout_render_array[$region_name][$key]['#weight'] = $key;
    }
  }
}
