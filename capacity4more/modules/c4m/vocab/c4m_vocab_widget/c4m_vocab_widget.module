<?php

/**
 * Implements hook_field_widget_info().
 */
function c4m_vocab_widget_field_widget_info() {
  $widgets['c4m_taxonomy_reference'] = array(
    'label' => t('C4M Taxonomy'),
    'description' => t('Taxonomy widget using Angular.'),
    'field types' => array('entityreference', 'taxonomy_term_reference'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  return $widgets;
}


/**
 * Implements hook_field_widget_form().
 */
function c4m_vocab_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;

  if (!$entity) {
    return;
  }

  // Get taxonomy vocabulary and send it to the app.
  $vocabulary = taxonomy_vocabulary_machine_name_load($field['field_name']);
  // If $vocabulary is empty, it mean this field is not taxonomy term, It's a node.
  if ($vocabulary) {
    $vocabulary_label = $vocabulary->name;
    $vocabulary_machine_name = $vocabulary->machine_name;
    $terms = taxonomy_get_tree($vocabulary->vid);
  }
  else {
    $vocabulary = entityreference_get_selection_handler($field);
    $vocabulary_label = $instance['label'];
    $vocabulary_machine_name = $vocabulary->field['field_name'];
    $terms = $vocabulary->getReferencableEntities();
  }

  $settings['c4m']['data']['vocabularies'][$vocabulary_machine_name] = c4m_vocab_widget_prepare_taxonomy_tree($terms);

  // This is node/edit page. Need to send field values to the app.
  if (isset($entity->$vocabulary_machine_name) && !empty($entity->$vocabulary_machine_name)) {
    $settings['c4m']['data']['values'][$vocabulary_machine_name] = c4m_vocab_widget_get_selected_values($entity, $vocabulary_machine_name);
  }

  // Send all the settings to the app.
  $form['#attached']['js'][] = array(
    'data' => $settings,
    'type' => 'setting'
  );

  // Add the directive.
  $variables = array(
    'vocabulary_label' => $vocabulary_label,
    'vocabulary_machine_name' => $vocabulary_machine_name,

  );
  $directive = theme('c4m_vocab_widget_taxonomy_widget', $variables);
  $form['directive-' . $vocabulary_machine_name] = array(
    '#markup' => $directive,
    '#weight' => $instance['widget']['weight'],
  );
  $form['#attributes']['ng-controller'] = 'DrupalFormCtrl';
  $form['#attributes']['class'][] = 'drupal-form';

  // Using default widget, that will be hidden.
  $instance['widget']['type'] = 'options_buttons';
  $instance['widget']['active'] = 1;
  $element = options_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  $element['#element_validate'][] = 'c4m_vocab_widget_validate';
  $element['#title'] = '';
  $element['#prefix'] = '<div class="ng-hide">';
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Keep selected terms in the AngularJS when form is validating.
 *
 * @param $element
 *  Form element.
 * @param $form_state
 *  The current state of the validating form.
 * @param $form
 *  The from that is validating.
 */
function c4m_vocab_widget_validate($element, $form_state, &$form) {
  $model = array();
  $settings['c4m']['data']['values'][$element['#field_name']] = array();

  foreach ($element['#value'] as $value) {
    $model[$value] = TRUE;
  }

  $settings['c4m']['data']['values'][$element['#field_name']] = $model;

  // Send all the settings to the app.
  $form['#attached']['js'][] = array(
    'data' => $settings,
    'type' => 'setting'
  );
}

/**
 * Builds an array of selected values to be displayed on the taxonomy widgets.
 *
 * @param $entity
 *  The entity being edited.
 * @param $vocabulary_machine_name
 *  The name of the Vocab.
 *
 * @return array
 *  An array of the selected values.
 */
function c4m_vocab_widget_get_selected_values($entity, $vocabulary_machine_name) {
  $taxonomy_values = array();
  $values = $entity->$vocabulary_machine_name;
  foreach ($values[LANGUAGE_NONE] as $value) {
    // Check if the vocabulary is "Taxonomy term" or "node".
    if (isset($value['tid'])) {
      $taxonomy_values[$value['tid']] = TRUE;
    }
    else {
      $taxonomy_values[$value['target_id']] = TRUE;
    }
  }

  return $taxonomy_values;
}

/**
 * Build the taxonomy-tree for the AngularJs vocab widget.
 *
 * @param $terms
 *  The taxonomy-terms.
 *
 * @return array
 *  The praised tree, ready to send to the angularJs app.
 */
function c4m_vocab_widget_prepare_taxonomy_tree($terms) {
  $options = array();
  foreach($terms as $term) {
    // If the term is array, this vocab is of type "node".
    if(is_array($term)) {
      foreach($term as $id => $label) {
        $options[$id]['label'] = check_plain($label);
        $options[$id]['id'] = $id;
      }
    }
    else {
      $parents = $term->parents;
      if ($parents[0] == '0') {
        // This is the parent term.
        $options[$term->tid]['label'] = check_plain($term->name);
        $options[$term->tid]['id'] = $term->tid;
      }
      else {
        // This is the child term - add it to the children of the parent term.
        $options[$parents[0]]['children'][] = array(
          'label' => check_plain($term->name),
          'id' => $term->tid,
        );
      }
    }
  }

  return $options;
}

/**
 * Implements hook_theme().
 */
function c4m_vocab_widget_theme() {
  $theme['c4m_vocab_widget_taxonomy_widget'] = array(
    'template' => 'c4m_vocab_widget',
    'path' => drupal_get_path('module', 'c4m_vocab_widget') . '/templates',
    'variables' => array(
      'vocabulary_label' => NULL,
      'vocabulary_machine_name' => NULL,
    ),
  );

  return $theme;
}
