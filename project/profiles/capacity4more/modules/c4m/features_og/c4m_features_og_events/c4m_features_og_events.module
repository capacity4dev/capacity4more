<?php
/**
 * @file
 * Code for the Group Events feature.
 */

define('C4M_FEATURES_OG_EVENTS_SORT_BY_START_DATE', "Sort by Start Date");

include_once 'c4m_features_og_events.features.inc';

/**
 * Implements hook_c4m_og_feature_info().
 */
function c4m_features_og_events_c4m_og_feature_info() {
  return array(
    'c4m_features_og_events' => array(
      'name' => t('Events'),
      'description' => t('Events overview.'),
      'machine_name' => 'c4m_features_og_events',
      'weight' => 4,
      'default' => TRUE,
      'group_types' => array('group', 'project'),
      'content_types' => array('event'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_features_og_events_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_search_api_sorts_get_default_sort_alter().
 *
 * Courtesy of https://www.drupal.org/node/1894502
 *
 * Unfortunately search_api_sorts module provides one sort block and not a
 * block per view, so we need to alter some stuff. Here the default sort.
 */
function c4m_features_og_events_search_api_sorts_default_sort_alter(&$default_sort, $search_sorts, $keys) {
  // Change default sort into 'Sort by Start Date' for events overviews.
  if (FALSE === strpos(current_path(), 'calendar', 0)) {
    return;
  }
  foreach ($search_sorts as $search_sort) {
    if (C4M_FEATURES_OG_EVENTS_SORT_BY_START_DATE === $search_sort->name) {
      // Sort past events on date descending.
      if (0 === strpos(current_path(), 'calendar/past', 0)) {
        $search_sort->default_order = 'desc';
      }
      $default_sort = $search_sort;
      break;
    }
  }
}

/**
 * Implements hook_search_api_sorts_alter().
 *
 * See Class c4m_views_handler_area_search_api_sorts.
 *
 * Unfortunately search_api_sorts module provides one sort block and not a
 * block per view, so we need to alter some stuff. Here we remove superfluous
 * sorts and give ours a new name.
 */
function c4m_features_og_events_search_api_sorts_alter(&$block, $view) {
  $views_global = array(
    'c4m_overview_events',
    'c4m_overview_events_landing',
  );
  $views_group = array(
    'c4m_overview_og_events',
    'c4m_overview_og_events_landing',
  );

  if (in_array($view->name, $views_group)) {
    // Remove all sorts but start date if we are on events overview.
    foreach ($block['content']['#items'] as $key => $item) {
      if (C4M_FEATURES_OG_EVENTS_SORT_BY_START_DATE !== $item['#name']) {
        unset($block['content']['#items'][$key]);
      }
    }
  }
  elseif (!in_array($view->name, $views_global)) {
    // Remove 'Start date' sort if this is not an events overview.
    foreach ($block['content']['#items'] as $key => $item) {
      if (C4M_FEATURES_OG_EVENTS_SORT_BY_START_DATE === $item['#name']) {
        unset($block['content']['#items'][$key]);
        break;
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * On the events landing page, we need ...
 * - a Dummy View page to have an exposed search form block (page) of which we
 *   will remove the output here
 * - 2 views blocks: upcoming and past
 * - a dummy views block after the 2 other blocks to overwrite the facets with
 *   facet links for ALL events and not just for the latest loaded view
 *   (which would be past events). We remove the output of it here.
 */
function c4m_features_og_events_views_pre_render(&$view) {
  if ('c4m_overview_og_events_landing' != $view->name) {
    return;
  }
  if ('page' == $view->current_display ||
      'block_3' == $view->current_display) {
    // Nullify Views results and total count for the dummy Views displays.
    $view->result = array();
    $view->total_rows = 0;
  }
}

/**
 * Implements hook_preprocess().
 *
 * Add an icon to the "Add an event" button that appears in the event related views.
 */
function c4m_features_og_events_preprocess_views_view(&$variables) {
  if (!in_array($variables['name'], array('c4m_overview_og_events_landing', 'c4m_overview_og_events'))) {
    // Not an event related view.
    return;
  }

  if (!in_array($variables['display_id'], array('page', 'page_1'))) {
    // Not a "page" display.
    return;
  }

  $og_context = og_context();

  if (!og_user_access($og_context['group_type'], $og_context['gid'], 'create event content')) {
    // User doesn't have permission to create a new event.
    $variables['header'] = '';
    return;
  }

  $icon = '<i class="fa fa-calendar-plus-o" aria-hidden="true"></i>';
  $text = t('Add an Event');
  $variables['header'] = str_replace($text, $icon . ' ' . $text, $variables['header']);
}

/**
 * Implements hook_block_info().
 */
function c4m_features_og_events_block_info() {
  $blocks['event_views_links'] = array(
    'info' => t('Links to event views'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_features_og_events_block_view($delta = '') {
  module_load_include('inc', 'c4m_features_og_events', 'includes/c4m_features_og_events.block');
  $callback = '_c4m_features_og_events_block_' . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Get rendered events for loggedin user.
 *
 * @return string
 *   HTML of rendered upcoming events, FALSE if there's no events.
 */
function c4m_features_og_events_upcoming_events_loggedin() {
  global $user;
  // Get content filter.
  $get_query = drupal_get_query_parameters();
  $filter = !empty($get_query['filter'])
    ? $get_query['filter']
    : '';
  $range = 3;

  $user_wrapper = entity_metadata_wrapper('user', $user->uid);
  $interests = $filter == 'interests' ? $user_wrapper->c4m_vocab_topic->raw() : array();

  $groups = $filter == 'groups' ? og_get_groups_by_user() : array();

  $events = c4m_features_og_events_upcoming_events_get_events($range, $interests, $groups);

  return $events;
}

/**
 * Get rendered events for anonymous user.
 *
 * @return string
 *   HTML of rendered upcoming events, FALSE if there's no events.
 */
function c4m_features_og_events_upcoming_events_anonymous() {
  $range = 1;
  return c4m_features_og_events_upcoming_events_get_events($range);
}

/**
 * Get all upcoming events.
 *
 * @param int $range
 *   Count of events should be taken.
 * @param mixed $topics
 *   Optionally list of topics user is interested in.
 * @param mixed $groups
 *   Optionally list of groups events belong to.
 *
 * @return bool|string
 *   HTML of rendered upcoming events, FALSE if there's no events.
 */
function c4m_features_og_events_upcoming_events_get_events($range, $topics = array(), $groups = array()) {
  // Show all events starting from midnight onwards.
  $tomorrow = new DateTime('midnight tomorrow');
  $date = $tomorrow->format('Y-m-d H:i:s');
  $events = '';

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('c4m_datetime_end', 'value', $date, '>=');

  if (!empty($groups)) {
    $query->fieldCondition(OG_AUDIENCE_FIELD, 'target_id', $groups, 'IN');
  }

  if (!empty($topics)) {
    $query->fieldCondition('c4m_vocab_topic', 'tid', $topics, 'IN');
  }

  $result = $query
    ->fieldOrderBy('c4m_datetime_end', 'value', 'ASC')
    ->range(0, $range)
    ->execute();

  if (empty($result['node'])) {
    return FALSE;
  }

  // Render events.
  foreach ($result['node'] as $event) {
    $node = node_view(node_load($event->nid), 'block_list');
    $events .= drupal_render($node);
  }

  return $events;
}
