<?php

/**
 * @file
 * Code for the Group Dashboard feature.
 */

include_once 'c4m_features_og_group_dashboard.features.inc';

/**
 * Implements hook_og_permission().
 */
function c4m_features_og_group_dashboard_og_permission() {
  return array(
    // Promote flag.
    'c4m_og_content_promote' => array(
      'title'         => t('Promote group content'),
      'description'   => t("Allow user to promote content of the group he's a member of."),
      'roles'         => array(OG_AUTHENTICATED_ROLE),
      'default role'  => array(OG_ADMINISTRATOR_ROLE),
    ),
    'c4m_og_content_depromote' => array(
      'title'         => t('Depromote group content'),
      'description'   => t("Allow user to depromote content of the group he's a member of."),
      'roles'         => array(OG_AUTHENTICATED_ROLE),
      'default role'  => array(OG_ADMINISTRATOR_ROLE),
    ),

    // Recommend flag.
    'c4m_og_content_recommend' => array(
      'title'         => t('Recommend group content'),
      'description'   => t("Allow user to recommend content of the group he's a member of."),
      'roles'         => array(OG_AUTHENTICATED_ROLE),
      'default role'  => array(OG_ADMINISTRATOR_ROLE),
    ),
    'c4m_og_content_unrecommend' => array(
      'title'         => t('Unrecommend group content'),
      'description'   => t("Allow user to unrecommend content of the group he's a member of."),
      'roles'         => array(OG_AUTHENTICATED_ROLE),
      'default role'  => array(OG_ADMINISTRATOR_ROLE),
    ),
  );
}

/**
 * Implements hook_flag_access().
 */
function c4m_features_og_group_dashboard_flag_access($flag, $entity_id, $action, $account) {
  if ($flag->name == 'c4m_og_content_recommend') {
    // Show recommend flag to everyone.
    return TRUE;
  }

  if (!in_array($flag->name, array('c4m_og_content_highlight'))) {
    // Flags we don't care about.
    return;
  }

  $group = c4m_og_current_group();
  if (!isset($group->nid)) {
    return;
  }

  if ($action == 'flag') {
    $flag->name == 'c4m_og_content_highlight' ? 'c4m_og_content_promote' : 'c4m_og_content_recommend';
    return og_user_access('node', $group->nid, 'c4m_og_content_promote', $account);
  }

  $flag->name == 'c4m_og_content_highlight' ? 'c4m_og_content_depromote' : 'c4m_og_content_unrecommend';
  return og_user_access('node', $group->nid, 'c4m_og_content_depromote', $account);
}

/**
 * Implements hook_action_info().
 */
function c4m_features_og_group_dashboard_action_info() {
  $info['c4m_unflag_nodes_action'] = array(
    'type' => 'node',
    'label' => t('Unflag all nodes belonging to a group'),
    'configurable' => FALSE,
    'triggers' => array(),
  );

  return $info;
}

/**
 * Action to remove flagged group content.
 *
 * @param object $object
 *   The object that is flagged.
 * @param mixed $context
 *   The context where the content is flagged.
 */
function c4m_unflag_nodes_action(&$object, $context = array()) {
  if (isset($object->nid) && isset($context['flag'])) {
    $group_id = c4m_og_get_gid_from_entity($object);
    $flag_id = $context['flag']->fid;
    $flag_name = $context['flag']->name;
    $nid = $object->nid;

    $flagged_og_content = c4m_features_og_group_dashboard_get_flagged_group_content($group_id, $flag_id);

    if (!empty($flagged_og_content)) {
      // Remove the newly flagged node from the flagged content.
      // Because this one shouldn't be unflagged.
      unset($flagged_og_content[$nid]);

      // Unflag all group content.
      foreach ($flagged_og_content as $row) {
        flag('unflag', $flag_name, $row->nid);
      }
    }
  }
}

/**
 * Implements hook_c4m_content_actions_info().
 */
function c4m_features_og_group_dashboard_c4m_content_actions_info() {
  return [
    'action_recommend' => [
      'context' => ['group', 'global'],
      'callback' => 'c4m_features_og_group_dashboard_action_recommend',
      'weight' => '3',
    ],
  ];
}

/**
 * Callback to show the recomendation link.
 *
 * @param object $node
 *   The node object.
 *
 * @return string
 *   Rendered output of the promote link.
 */
function c4m_features_og_group_dashboard_action_recommend($node) {
  if (empty($node->nid)) {
    return '';
  }

  $flag_link = flag_create_link('c4m_og_content_recommend', $node->nid);
  if (!$flag_link) {
    return '';
  }

  $output = theme('html_tag', array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array(
        'class' => 'group-actions-recommend',
      ),
      '#value' => $flag_link,
    ),
  ));
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function c4m_features_og_group_dashboard_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'flag_confirm') {
    $flag = $form['#flag'];

    $entity_id = $form['entity_id']['#value'];
    // Get entity you wan't to flag.
    $entity = entity_load_single($flag->entity_type, $entity_id);
    // Get group of the entity.
    $group_id = c4m_og_get_gid_from_entity($entity);

    if ($_GET['destination'] == 'node') {
      // When destination is 'node' it actually means the group homepage.
      $_GET['destination'] = 'node/' . $group_id;
    }
    else {
      $url_options = array(
        'purl' => array(
          'provider' => 'og_purl|node',
          'id' => $group_id,
        ),
      );

      // Override the destination so we'll get the purl.
      $_GET['destination'] = url($_GET['destination'], $url_options);
    }

    if ($flag->name === 'c4m_og_content_highlight' && $form['action']['#value'] == 'flag') {
      $flag_id = $flag->fid;

      // Get flagged content.
      $flagged_og_content = c4m_features_og_group_dashboard_get_flagged_group_content($group_id, $flag_id);

      if (!empty($flagged_og_content)) {
        // Store the entities IDs to be unflaged, as part of form state.
        $form_state['flagged_og_content'] = array_keys($flagged_og_content);
        // The unflaging of group's other promoted content.
        $form['#submit'][] = 'c4m_features_og_group_dashboard_demote_promoted_flag_submit';

        // Show summary of entities who will be unflagged if the user confirms.
        $flagged_og_content = entity_load($flag->entity_type, array_keys($flagged_og_content));
        $list = array();
        foreach ($flagged_og_content as $flagged_entity) {
          $list[] = l($flagged_entity->title, 'node/' . $flagged_entity->nid);
        }
        $flagged_content_summary = array(
          '#theme'  => 'item_list',
          '#items'  => $list,
        );
        $flagged_content_summary = render($flagged_content_summary);

        $form['flagged_content'] = array(
          '#markup'   => '<strong>' . t('Following items will be demoted:') . '</strong>' . $flagged_content_summary,
        );
      }
    }
  }
}

/**
 * Additional submit handler for the flag confirm form.
 *
 * Since only one content can be at promoted state per group, when promoting
 * content, group's other promoted content must be demoted.
 * Function executes unflagging of content, flagged by c4m_og_content_highlight
 * flag.
 */
function c4m_features_og_group_dashboard_demote_promoted_flag_submit(array &$form, array &$form_state) {
  $flagged_entities_ids = $form_state['flagged_og_content'];

  foreach ($flagged_entities_ids as $entity_id) {
    flag('unflag', 'c4m_og_content_highlight', $entity_id);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add PURL prefix of the group to the c4m_og_content_highlight flag.
 */
function c4m_features_og_group_dashboard_preprocess_flag(&$variables) {
  if ($variables['flag']->name != 'c4m_og_content_highlight') {
    return;
  }

  if (!$current_gid = c4m_og_current_group_id()) {
    return;
  }

  $url_options = array(
    'purl' => array(
      'enabled' => TRUE,
      'provider' => 'og_purl|node',
      'id' => $current_gid,
    ),
  );

  if (!empty($variables['link']['query'])) {
    $url_options['query'] = $variables['link']['query'];
  }

  $url = url($variables['link']['href'], $url_options);
  $variables['link_href'] = $url;
}

/**
 * Implements hook_menu_alter().
 */
function c4m_features_og_group_dashboard_menu_alter(&$items) {
  $items['flag/confirm/%/%flag/%']['access callback'] = 'c4m_features_og_group_dashboard_promote_flag_access';
}

/**
 * Menu access callback for flagging pages.
 *
 * Allow power users only to promote group content.
 *
 * @see flag_page_access()
 */
function c4m_features_og_group_dashboard_promote_flag_access($action, $flag, $entity_id) {
  if ($flag->name == 'c4m_og_content_highlight') {
    if (!og_context_is_init()) {
      // OG context was not determined yet, so register the path and return
      // early.
      // The next time this access callback will be called, it will not enter
      // here.
      og_context_access_callback_register_path($_GET['q']);
      return FALSE;
    }

    $context = og_context();
    $group = c4m_og_get_group_of_content($entity_id);

    // Verify also that the group of promoted content is the current context.
    return $context['gid'] == $group->nid && c4m_features_og_members_is_power_user();
  }

  return flag_page_access($action, $flag, $entity_id);
}

/**
 * Function to get flagged group content.
 *
 * @param mixed $og_id
 *   The Organic Group nid.
 * @param mixed $flag_id
 *   The Flag record id.
 * @param mixed $limit
 *   The number of items to return.
 *
 * @return array|null
 *   Array of node objects that are flagged.
 */
function c4m_features_og_group_dashboard_get_flagged_group_content($og_id = NULL, $flag_id = NULL, $limit = NULL) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->fields('f', array('uid'));
  $query->join('og_membership', 'og', "n.nid = og.etid AND og.entity_type = 'node'");
  $query->join('flagging', 'f', 'n.nid = f.entity_id');
  $query->condition('og.gid', $og_id, '=');
  $query->condition('f.fid', $flag_id, '=');
  if (isset($limit)) {
    $query->range(0, $limit);
  }

  $flagged_content = $query->execute();
  $flagged_content = $flagged_content->fetchAllAssoc('nid');

  return $flagged_content;
}

/**
 * Implements hook_block_info().
 */
function c4m_features_og_group_dashboard_block_info() {
  $blocks['c4m_cta_block'] = array(
    'info' => t('C4M CTA Block'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Altering the C4M CTA Block.
 */
function c4m_features_og_group_dashboard_block_view($delta = '') {
  $block = array();

  $links = module_invoke_all('c4m_group_dashboard_links');
  $cta = module_invoke_all('c4m_cta_block');

  if (!$links && !$cta) {
    return $block;
  }

  // This naming should be modified but there are tickets in progress dependent
  // on this.
  $block['content']['cta'] = $cta;
  $block['content']['links'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('c4m-group-dashboard-links'),
    ),
    'content' => $links,
  );

  return $block;
}

/**
 * Returns an array of possible flag suffixes, used for notification.
 *
 * @return array
 *   Notification flags suffixes.
 */
function c4m_features_og_group_dashboard_get_notification_flags_suffixes() {
  return array('group', 'node', 'comment', 'term');
}
