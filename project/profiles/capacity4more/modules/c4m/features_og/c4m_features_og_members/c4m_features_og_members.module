<?php

/**
 * @file
 * Code for the Group Members feature.
 */

include_once 'c4m_features_og_members.features.inc';

define('C4M_FEATURES_OG_MEMBERS_ADMINISTRATOR_ROLE_NAME', 'administrator member');

/**
 * Implements hook_c4m_og_feature_info().
 */
function c4m_features_og_members_c4m_og_feature_info() {
  return array(
    'c4m_features_og_members' => array(
      'name' => t('Member overview'),
      'description' => t('Member overview.'),
      'machine_name' => 'c4m_features_og_members',
      'weight' => 6,
      'default' => TRUE,
      'group_types' => array('group'),
      'content_types' => array(),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function c4m_features_og_members_menu() {
  $items['members/promote/%user'] = array(
    'title' => 'Promote to group administrator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_promote', 2),
    'access callback' => 'c4m_user_og_has_group_permission',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );
  $items['members/demote/%user'] = array(
    'title' => 'Demote to normal group member',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_demote', 2),
    'access callback' => 'c4m_user_og_has_group_permission',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );
  $items['members/remove/%user'] = array(
    'title' => 'Remove from group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_remove', 2),
    'access callback' => 'c4m_user_og_has_group_permission',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );
  $items['members/approve/%user'] = array(
    'title' => 'Approve membership request',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_approve', 2),
    'access callback' => 'c4m_user_og_has_group_permission',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );
  $items['members/reject/%user'] = array(
    'title' => 'Reject membership request',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_features_og_members_reject', 2),
    'access callback' => 'c4m_user_og_has_group_permission',
    'access arguments' => array('manage members'),
    'file' => 'c4m_features_og_members.admin.inc',
  );

  return $items;
}

/**
 * Define fields.
 *
 * These fields are not overridden through the interface.
 * If you want those, look at hook_ds_custom_fields_info().
 *
 * @param string $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return array
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function c4m_features_og_members_ds_fields_info($entity_type) {
  $fields = array();

  // Creation time.
  $date_formatters = c4m_helper_date_formatters();

  $path = drupal_get_path('module', 'c4m_features_og_members');
  // Administrator links field for entity type user (, within a group).
  $fields['user']['c4m_features_og_members_admin_actions'] = array(
    'title' => t('C4M OG administer user links'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_features_og_members.theme.inc',
    'function' => 'theme_c4m_features_og_members_admin_actions',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default (only cog)'),
        'membership_level' => t('With membership level text'),
      ),
    ),
  );

  // The type of membership within the group.
  $fields['user']['c4m_features_og_members_role'] = array(
    'title' => t('C4M OG role within group'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_features_og_members.theme.inc',
    'function' => 'theme_c4m_features_og_members_role',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['user']['c4m_features_og_members_since'] = array(
    'title' => t('C4M OG member since'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_features_og_members.theme.inc',
    'function' => 'theme_c4m_features_og_members_since',
    'properties' => array(
      'formatters' => $date_formatters,
    ),
  );

  // Activity.
  $fields['user']['c4m_features_og_members_activity_summary'] = array(
    'title' => t('C4M OG member activity summary'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_features_og_members.theme.inc',
    'function' => 'theme_c4m_features_og_members_activity_summary',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );
  $fields['user']['c4m_features_og_members_activity_posts'] = array(
    'title' => t('C4M OG member count posts'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_features_og_members.theme.inc',
    'function' => 'theme_c4m_features_og_members_activity_posts',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );
  $fields['user']['c4m_features_og_members_activity_comments'] = array(
    'title' => t('C4M OG member count comments'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_features_og_members.theme.inc',
    'function' => 'theme_c4m_features_og_members_activity_comments',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  return $fields;
}

/**
 * Implements hook_theme().
 */
function c4m_features_og_members_theme() {
  $path = drupal_get_path('module', 'c4m_features_og_members') . '/templates';

  $theme['c4m_administer_member_links'] = array(
    'template' => 'c4m_administer_member_links',
    'path' => $path,
    'variables' => array(
      'links' => array(),
      'membership_level' => NULL,
      'user_id' => 0,
    ),
  );
  $theme['c4m_administer_member_level'] = array(
    'template' => 'c4m_administer_member_level',
    'path' => $path,
    'variables' => array(
      'links' => array(),
      'membership_level' => NULL,
      'user_id' => 0,
    ),
  );
  $theme['c4m_features_og_members_table_header'] = array(
    'template' => 'c4m_features_og_members_table_header',
    'path' => $path,
    'variables' => array(
      'first' => NULL,
      'second' => NULL,
      'third' => NULL,
      'fourth' => NULL,
    ),
  );

  return $theme;
}

/**
 * Load and cache all actionable links to administer users in a group.
 *
 * @return array
 *   Configuration as collected trough the implemented
 *   hook_c4m_features_og_members_administer_links hooks.
 */
function c4m_features_og_members_get_administer_links() {
  $cache_key = 'c4m_features_og_members:administer_links';
  $info = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($info)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $info = $cache->data;
    }
    else {
      $hook = 'c4m_features_og_members_administer_links';
      $info = module_invoke_all($hook);
      cache_set($cache_key, $info);
    }
  }

  return $info;
}

/**
 * Get all the actionable links to administer a user within a given group.
 *
 * @param object $user
 *   The user object.
 * @param object $group
 *   The group node object.
 *
 * @return array
 *   The actions that can be performed on the user in the group.
 */
function c4m_features_og_members_get_administer_links_for_user_in_group(
  $user,
  $group
) {
  $links = array();

  // Retrieve all possible action links info.
  $info = c4m_features_og_members_get_administer_links($user, $group);
  usort($info, '_c4m_features_og_members_sort_weight');

  foreach ($info as $hook_info) {
    // We support callbacks in include files.
    if (isset($hook_info['file'])) {
      include_once DRUPAL_ROOT . '/' . $hook_info['file'];
    }

    $access = TRUE;
    // Check conditions.
    foreach ($hook_info['conditions'] as $condition) {
      if (!$condition($user, $group)) {
        $access = FALSE;
        break;
      }
    }

    if ($access) {
      $callback = str_replace('[user_uid]', $user->uid, $hook_info['callback']);
      $title = str_replace(
        '[group_type]', ucfirst($group->type), $hook_info['title']
      );
      $options = array(
        'attributes' => array(
          'class' => !empty($hook_info['class']) ? $hook_info['class'] : array(),
        ),
      );
      $links[] = '<li>' . l($title, $callback, $options) . '</li>';
    }
  }

  return $links;
}

/**
 * Implements hook_c4m_features_og_members_administer_links().
 */
function c4m_features_og_members_c4m_features_og_members_administer_links() {
  $file = drupal_get_path('module', 'c4m_features_og_members')
    . '/c4m_features_og_members.conditions.inc';

  return array(
    'promote' => array(
      'callback' => 'members/promote/[user_uid]',
      'title' => t('Promote to [group_type] Administrator'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_active_member',
        '_c4m_features_og_members_condition_user_not_admin',
        '_c4m_features_og_members_condition_user_not_owner',
      ),
      'weight' => -8,
      'class' => array(
        'bold-text',
      ),
      'file' => $file,
    ),
    'demote' => array(
      'callback' => 'members/demote/[user_uid]',
      'title' => t('Demote to normal [group_type] Member'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_active_member',
        '_c4m_features_og_members_condition_user_admin',
        '_c4m_features_og_members_condition_user_not_owner',
      ),
      'weight' => -7,
      'class' => array(
        'bold-text',
      ),
      'file' => $file,
    ),
    'remove' => array(
      'callback' => 'members/remove/[user_uid]',
      'title' => t('Remove from [group_type]'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_active_member',
        '_c4m_features_og_members_condition_user_not_owner',
      ),
      'weight' => 10,
      'file' => $file,
    ),
    'approve' => array(
      'callback' => 'members/approve/[user_uid]',
      'title' => t('Approve Membership request'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_pending_member',
      ),
      'weight' => -10,
      'class' => array(
        'bold-text',
      ),
      'file' => $file,
    ),
    'reject' => array(
      'callback' => 'members/reject/[user_uid]',
      'title' => t('Reject Membership request'),
      'conditions' => array(
        '_c4m_features_og_members_condition_user_pending_member',
      ),
      'weight' => -9,
      'file' => $file,
    ),
  );
}

/**
 * Sort callback for weighted multidimensional arrays.
 *
 * Sorts Ascending (- to +).
 *
 * @param array $a
 *   Array 1.
 * @param array $b
 *   Array 2.
 *
 * @return int
 *   If the first array should be put before the second array.
 */
function _c4m_features_og_members_sort_weight(array $a, array $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }

  return ($a['weight'] > $b['weight']) ? 1 : -1;
}

/**
 * Get the admin role within a group.
 *
 * @param object $group
 *   The group we need to get the admin role for.
 *
 * @return mixed
 *   The role information.
 */
function _c4m_features_og_members_get_admin_role($group) {
  $cache_key = 'c4m_features_og_members:admin_role';
  $info = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($info)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $info = $cache->data;
    }
    else {
      $roles = og_roles('node', $group->type, $group->nid);
      $info = array_search(C4M_FEATURES_OG_MEMBERS_ADMINISTRATOR_ROLE_NAME, $roles);
      cache_set($cache_key, $info);
    }
  }

  return $info;
}

/**
 * Check if a user is power user within a group.
 *
 * Meaning the user:
 * - Or has the site wide role 'administrator'.
 * - Or is author of the group.
 * - Or has the 'administrator member' role within the group.
 *
 * @param mixed $group
 *   The group we want to check the user for.
 * @param mixed $user
 *   The user object.
 *
 * @return bool
 *   Is the user a power user.
 */
function _c4m_features_og_members_is_power_user($group = NULL, $user = NULL) {
  if (!isset($user)) {
    global $user;
  }
  // The user has the sitewide role 'administrator'.
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }

  if (!isset($group)) {
    $group = c4m_og_current_group();
  }

  // Currently we're not in a group context, and at that point the user is not
  // an administrator.
  if (!$group) {
    return FALSE;
  }

  // The user is the group owner.
  // What is a group owner? see https://www.drupal.org/node/1114858.
  if ($group->uid === $user->uid) {
    return TRUE;
  }

  // No administrator member role in projects.
  // All project members are power users.
  if ($group->type === 'project') {
    return og_is_member('node', $group->nid, 'user', $user->uid);
  }

  // The user has the group role 'administrator member'.
  return in_array('administrator member',
    og_get_user_roles('node', $group->nid, $user->uid));
}

/**
 * Returns the type of user, globally, or within a group.
 *
 * Possible types:
 * - C4M_USER_TYPE_SA -> site administrator.
 * - C4M_USER_TYPE_GO -> group/project owner.
 * - C4M_USER_TYPE_GA -> group/project administrator.
 * - C4M_USER_TYPE_GM -> group member.
 * - C4M_USER_TYPE_NON_MEMBER -> authenticated, not a group member.
 * - C4M_USER_TYPE_VISITOR -> anonymous user.
 *
 * @param object $group
 *   The group for which we want to check the user.
 * @param object $user
 *   The user object.
 *
 * @return string|false
 *   Type of user, globally, or within the group.
 *   FALSE, if type could not be resolve.
 */
function _c4m_features_og_members_get_user_type($group = NULL, $user = NULL) {
  if (!isset($user)) {
    global $user;
  }

  // Anonymous user.
  if ($user->uid == 0) {
    return C4M_USER_TYPE_VISITOR;
  }

  // The user has the site wide role 'administrator'.
  if (in_array('administrator', $user->roles)) {
    return C4M_USER_TYPE_SA;
  }

  if (!isset($group)) {
    $group = c4m_og_current_group();
  }

  // Currently we're not in a group context, and at that point the user is not
  // an administrator.
  if (!$group) {
    return FALSE;
  }

  // The user is the group owner.
  // What is a group owner? see https://www.drupal.org/node/1114858.
  if ($group->uid === $user->uid) {
    return C4M_USER_TYPE_GO;
  }

  if ($group->type == 'group') {
    // The user has the group role 'administrator member'.
    if (in_array('administrator member', og_get_user_roles('node', $group->nid, $user->uid))) {
      return C4M_USER_TYPE_GA;
    }

    return og_is_member('node', $group->nid) ? C4M_USER_TYPE_GM : C4M_USER_TYPE_NON_MEMBER;
  }
  // Group type is 'project'.
  else {
    // We are not using the "group administrator" role in projects. We give
    // the Project Members (so regular members, without og role) the same
    // permissions in a project as a GA would have in a group.
    return og_is_member('node', $group->nid) ? C4M_USER_TYPE_GA : C4M_USER_TYPE_NON_MEMBER;
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function c4m_features_og_members_entity_property_info_alter(&$info) {
  $info['user']['properties']['c4m_og_membership_type'] = array(
    'type' => 'list<text>',
    'label' => t('OG membership type'),
    'sanitized' => TRUE,
    'getter callback' => '_c4m_features_og_members_membership_type_getter_callback',
  );
}

/**
 * Getter for multiple field.
 *
 * Keeps the highest group membership type of a user in search index.
 *
 * @param object $user
 *   The user object.
 *
 * @return array
 *   Array of group nid's.
 */
function _c4m_features_og_members_membership_type_getter_callback($user) {
  $values = array();

  // Retrieve user groups and retrieve the highest membership level per group.
  $wrapper = entity_metadata_wrapper('user', $user->uid);
  $og_memberships = array_merge(
    $wrapper->{'og_membership__' . OG_STATE_ACTIVE}->value(),
    $wrapper->{'og_membership__' . OG_STATE_PENDING}->value());

  foreach ($og_memberships as $og_membership) {
    if (empty($og_membership)) {
      continue;
    }

    $values[] = $og_membership->gid
      . '_' .
      c4m_user_og_get_role_in_group($user, node_load($og_membership->gid));
  }

  return $values;
}

/**
 * Implements hook_facet_items_alter().
 */
function c4m_features_og_members_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'c4m_og_membership_type':
      _c4m_features_og_members_facet_membership_type_alter($build, $settings);
      break;
  }
}

/**
 * Helper function to alter the facet for the OG membership type.
 *
 * TODO : Fix the order of the items: Pending should always be first and
 *        should have extra styling.
 *
 * @param array $build
 *   The build facets.
 * @param object $settings
 *   The facet settings.
 */
function _c4m_features_og_members_facet_membership_type_alter(array &$build, &$settings) {
  $group = c4m_og_current_group();

  if (empty($group)) {
    return;
  }

  foreach ($build as $key => $item) {
    $membership_type = explode('_', $key);
    $gid = $membership_type[0];
    // Remove groups which are not current.
    if ($gid !== $group->nid) {
      unset($build[$key]);
      continue;
    }
    $type = $membership_type[1];
    $build[$key]["#markup"] = c4m_user_og_get_human_role_name($type, $group);
  }
}

/**
 * Implements hook_block_view_alter().
 */
function c4m_features_og_members_block_view_alter(&$data, $block) {
  module_load_include('inc', 'c4m_features_og_members', 'includes/c4m_features_og_members.block');
  _c4m_features_og_members_block_view_alter($data, $block);
}

/**
 * Implements template_preprocess_views_view_table().
 *
 * Adds the missing header parts to the header of the "table".
 */
function c4m_features_og_members_preprocess_views_view_table(&$vars) {
  if ($vars['view']->name !== 'c4m_overview_og_members') {
    return;
  }

  if ($vars['view']->current_display !== 'page_1') {
    return;
  }

  $vars['header']['rendered_entity'] = theme(
    'c4m_features_og_members_table_header',
    array(
      'first' => t('Name'),
      'second' => t('Member since'),
      'third' => t('Activity'),
      'fourth' => NULL,
    )
  );
}
