<?php

/**
 * @file
 * Code for the Contact module.
 */

/**
 * The allowed format for the CKEditor widget on the contact form.
 */
define('C4M_CONTACT_ALLOWED_FORMAT', 'filtered_html');

/**
 * Implements hook_permission().
 */
function c4m_contact_permission() {
  $permissions['config contact emails'] = array(
    'title' => t('Configure contact e-mail addressess'),
    'description' => t('Allows the user to change the recipients of the contact form.'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function c4m_contact_menu() {
  $menu['admin/config/c4m/contact-email'] = array(
    'title' => 'Contact e-mail addressess',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_contact_email_address_form'),
    'access arguments' => array('config contact emails'),
    'file' => 'c4m_contact.pages.inc',
  );

  return $menu;
}

/**
 * Implements hook_c4m_captcha_form_info().
 *
 * Adds the captcha to the contact site form.
 */
function c4m_contact_c4m_captcha_form_info() {
  return array(
    'contact_site_form',
  );
}

/**
 * Implements hook_mail_alter().
 *
 * Alters the contact mail to replace the recipient with the custom list.
 */
function c4m_contact_mail_alter(&$message) {
  if ($message['id'] == 'contact_page_mail') {
    $message['to'] = variable_get('c4m_contact_email_addresses', variable_get('site_mail'));

    // Join the header prefix and the message itself into a single string and
    // separate them by 2 HTML line breaks.
    $message['body'] = implode('<br><br>', $message['body']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the site contact form.
 */
function c4m_contact_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  // Get site contact settings.
  $contact_settings = variable_get('c4m_site_contact', array());

  if (empty($contact_settings)) {
    return;
  }

  // Send yourself a copy should be allow to all users and visitors.
  $form['copy']['#access'] = TRUE;

  if (!user_is_anonymous()) {
    global $user;
    $user = user_load($user->uid);

    $user_name = c4m_user_name($user);

    $form['name']['#default_value'] = $user_name;
    $form['name']['#disabled'] = TRUE;

    $form['mail']['#default_value'] = $user->mail;
    $form['mail']['#disabled'] = TRUE;

    $form['message']['#type'] = 'text_format';
    $form['message']['#format'] = C4M_CONTACT_ALLOWED_FORMAT;
    $form['#after_build'][] = 'c4m_contact_node_form_after_build';
  }

  /**
   * Removes the filter options select box from the contact form.
   *
   * @param array $form
   *   Nested array of form elements that comprise the form.
   *
   * @return array
   *   Modified array of form elements that comprise the form.
   */
  function c4m_contact_node_form_after_build($form) {
    $form['message']['format']['#access'] = FALSE;

    return $form;
  }

  // Add intro text to form.
  $markup = '<div class="form-item">'
            . t('!intro', array('!intro' => $contact_settings['intro']))
            . '</div>';
  if (isset($contact_settings['intro'])) {
    $form['intro'] = array(
      '#markup' => $markup,
      '#weight' => -1,
    );
  }
  // Prepend a submit callback to handle the difference between visitor and user
  // forms (with a WIYIWYG editor). Sends a uniform single string value.
  array_unshift($form['#submit'], 'c4m_contact_contact_site_form_submit');
}

/**
 * Submit handler for the site contact form.
 *
 * Keeps the value only from the data array received from a WYSIWYG field.
 */
function c4m_contact_contact_site_form_submit($form, &$form_state) {
  if (isset($form_state['values']['message']['value'])) {
    $form_state['values']['message'] = $form_state['values']['message']['value'];
  }

  // Inserts HTML line breaks before all newlines.
  if (!_c4m_contact_string_is_html($form_state['values']['message'])) {
    $form_state['values']['message'] = nl2br($form_state['values']['message']);
  }
}

/**
 * Helper to detect if a string contains HTML entities.
 *
 * @param string $string
 *   The string to determine if contains HTML tags.
 *
 * @return bool
 *   Whether the string contains HTML tags.
 */
function _c4m_contact_string_is_html($string) {
  return preg_match("/<[^<]+>/", $string, $m) != 0;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the site contact admin form.
 */
function c4m_contact_form_contact_category_edit_form_alter(&$form, &$form_state, $form_id) {
  // Get site contact settings.
  $contact_settings = variable_get('c4m_site_contact', array());
  $intro = isset($contact_settings['intro']) ? $contact_settings['intro'] : '';

  // Add wysiwyg textarea on top of the form to set the intro text.
  $form['intro'] = array(
    '#type'           => 'text_format',
    '#title'          => t('Intro'),
    '#description'    => t('The intro text displayed on top of the contact form.'),
    '#default_value'  => $intro,
    '#format'         => 'filtered_html',
    '#rows'           => 10,
    '#weight'         => 0,
  );

  $form['#submit'][] = 'c4m_contact_category_edit_form_submit';
}

/**
 * Submit handler for the site contact admin form.
 */
function c4m_contact_category_edit_form_submit($form, &$form_state) {
  if (!isset($form_state['values']['intro'])) {
    return;
  }

  // Get site contact settings.
  $contact_settings = variable_get('c4m_site_contact', array());

  // Add the intro text in the contact settings variable.
  $intro = $form_state['values']['intro']['value'];
  $contact_settings['intro'] = $intro;
  variable_set('c4m_site_contact', $contact_settings);
}
