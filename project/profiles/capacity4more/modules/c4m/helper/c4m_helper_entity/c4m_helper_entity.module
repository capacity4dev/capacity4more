<?php
/**
 * @file
 * Helper functionality around $entity objects.
 */

/**
 * Helper function to get the label of an entity type.
 *
 * @param object $entity
 *    The entity object.
 * @param string $entity_type
 *    The entity type.
 *
 * @return mixed
 *    Returns array with the entity type label.
 */
function c4m_helper_entity_get_entity_type_label(
  $entity,
  $entity_type = 'node'
) {
  $variables = array(
    'entity' => $entity,
    'entity_type' => $entity_type,
    'label' => $entity_type,
  );

  if ($entity_type == 'node') {
    $variables['label'] = $entity->type;
  }

  $field_name = 'c4m_' . $entity->type . '_type';

  if (!empty($entity->$field_name)) {
    $object_wrapper = entity_metadata_wrapper('node', $entity);
    $variables['label'] = $object_wrapper->$field_name->value();
  }

  drupal_alter('entity_type_label', $variables);

  return $variables['label'];
}

/**
 * Helper function to sort objects on their title.
 *
 * @param object $a
 *    The object containing the title.
 * @param object $b
 *    The object containing the title.
 *
 * @return int
 *    Returns integer to determine $a is lt, gt or equal than $b.
 *
 * @usage usort($array_entitiy_objects, 'c4m_sort_object_by_title');
 */
function c4m_sort_object_by_title($a, $b) {
  return strcasecmp($a->title, $b->title);
}

/**
 * Helper function to get the count per entity type and bundle.
 *
 * @param array $variables
 *    Array containing information needed to perform the query.
 *    Info needed is:
 *      - entity_type
 *      - bundles
 *      - state
 *      - og_id
 *      - c4m_status.
 *
 * @return int
 *    Number of items.
 */
function c4m_helper_entity_get_number_of_entities(array $variables) {
  $amount = 0;

  $entity_type = $variables['entity_type'];
  $bundles = $variables['bundles'];
  $state = $variables['state'];
  $og_id = $variables['og_id'];
  $topic = $variables['topic'];
  $c4m_status = $variables['c4m_status'];

  if ($entity_type) {
    switch ($entity_type) {
      case 'user':
        $query = db_select('users', 'u');
        $query->fields('u');
        if ($state) {
          $query->condition('u.status', $state, '=');
        }
        break;

      case 'node':
        if (!empty($bundles)) {
          $query = db_select('node', 'n');
          $query->fields('n');
          $query->condition('n.type', $bundles, 'IN');
          if (!is_null($state)) {
            $query->condition('n.status', $state, '=');
          }
        }
        $query = $query->addTag('node_access');
        break;

      case 'comment':
        $query = db_select('comment', 'c');
        $query->fields('c');
        $query->join('node', 'n', 'c.nid = n.nid');
        if (!is_null($state)) {
          $query->condition('n.status', $state, '=');
        }
        $query = $query->addTag('node_access');
        break;
    }

    // Add group condition if given.
    if ($og_id) {
      switch ($entity_type) {
        case 'user':
          $query->join('og_membership', 'og', 'u.uid = og.etid');
          break;

        case 'node':
          $query->join('og_membership', 'og', 'n.nid = og.etid');
          break;

        case 'comment':
          $query->join('og_membership', 'og', 'n.nid = og.etid');
          // Exclude the comments on disabled group content features.
          $disabled_types = c4m_og_feature_disabled_content_types();
          if (!empty($disabled_types)) {
            $query->condition('n.type', $disabled_types, 'NOT IN');
          }
          break;

        default:
          return $amount;
      }
      $query->condition('og.gid', $og_id, '=');
    }

    // Add topic condition if given.
    if ($topic) {
      switch ($entity_type) {
        case 'user':
          $query->join(
            'field_data_c4m_vocab_topic_expertise',
            'td',
            'u.uid = td.entity_id'
          );
          $query->condition('td.c4m_vocab_topic_expertise_tid', $topic);
          $query->condition('td.entity_type', 'user');
          break;

        case 'node':
          $query->join(
            'field_data_c4m_vocab_topic',
            'td',
            'n.nid = td.entity_id'
          );
          $query->condition('td.c4m_vocab_topic_tid', $topic);
          $query->condition('td.entity_type', 'node');
          break;

        default:
          return $amount;
      }
    }

    // Add condition on c4m status.
    if (!empty($c4m_status)) {
      if ($entity_type == 'node') {
        $query->join('field_data_c4m_og_status', 'st', 'n.nid = st.entity_id');
        $query->condition('st.c4m_og_status_value', $c4m_status, 'IN');
      }
      elseif ($entity_type == 'user' && $og_id) {
        $query->condition('og.state', $c4m_status, 'IN');
      }
    }

    $query = $query->execute();
    $amount = $query->rowCount();
  }

  return $amount;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function c4m_helper_entity_entity_property_info_alter(&$info) {
  foreach (flag_get_flags() as $flag) {
    if (count($flag->types)) {
      // Bundle specific property.
      foreach ($flag->types as $type) {
        $info[$flag->entity_type]['bundles'][$type]['properties']['flag_' . $flag->name . '_count'] = c4m_helper_entity_entity_property_flag_count_entity_definition($type, $flag);
      }
    }
    else {
      // Generic property, applies for all bundles.
      $info[$flag->entity_type]['properties']['flag_' . $flag->name . '_count'] = c4m_helper_entity_entity_property_flag_count_entity_definition($flag->entity_type, $flag);
    }
  }
}

/**
 * Returns entity property definition for the flag count of a certain entity.
 *
 * @param string $type
 *   The type can either be the bundle or the entity type.
 * @param object $flag
 *   The flag object.
 *
 * @return array
 *   An array containing the property information.
 */
function c4m_helper_entity_entity_property_flag_count_entity_definition($type, $flag) {
  return array(
    'label' => t('The flag count of type @flag for an @type entity', array('@type' => $type, '@flag' => $flag->name)),
    'description' => t('Returns the flag count of the type @flag of an entity.', array('@flag' => $flag->name)),
    'type' => 'integer',
    'getter callback' => 'c4m_helper_entity_entity_get_properties',
    'computed' => TRUE,
    'flag_name' => $flag->name,
  );
}

/**
 * Callback for getting entity properties.
 *
 * @param object $entity
 *   The entity object.
 * @param array $options
 *   The options array.
 * @param string $name
 *   The name of the entity property.
 * @param string $entity_type
 *   The entity type of the entity.
 * @param array $property_info
 *   An array with other properites of the entity.
 *
 * @return integer | NULL
 *   Returns the amount of flags for the entity or NULL if not appropriate.
 */
function c4m_helper_entity_entity_get_properties($entity, array $options, $name, $entity_type, $property_info) {
  $flag_name = $property_info['flag_name'];
  $flag = flag_get_flag($flag_name);
  $count = flag_get_counts($entity_type, $flag->get_entity_id($entity));

  if (count($count) && isset($count[$flag_name]) && is_numeric($count[$flag_name])) {
    return $count[$flag_name];
  }

  return NULL;
}

/**
 * Retrieve label information array for a given entity object.
 *
 * @param object $entity
 *   Entity object to retrieve label info for.
 *
 * @return array
 *   Mixed label information for the given entity.
 */
function c4m_helper_entity_label_info($entity) {
  $cache_key = 'c4m_helper_entity:label_info';
  $data = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $hook = 'c4m_helper_entity_label_info';
      $data = module_invoke_all($hook);

      cache_set($cache_key, $data);
    }
  }

  $entity_type = $entity->type;

  // Allow content types to define subtypes (e.g. c4m_event_type).
  $field_name = 'c4m_' . $entity->type . '_type';

  if (!empty($entity->$field_name)) {
    $object_wrapper = entity_metadata_wrapper('node', $entity);
    $entity_type .= '-' . $object_wrapper->$field_name->value();
  }

  // Only return data for a given feature.
  if (isset($data[$entity_type])) {
    return $data[$entity_type];
  }

  // Return all data.
  return $data;
}

/**
 * Metrics info from implementations of hook_c4m_helper_entity_metrics_info().
 *
 * @return array
 *   Configuration as collected through the implementations of
 *   hook_c4m_helper_entity_metrics_info() hooks.
 */
function c4m_helper_entity_metrics_info() {
  $cache_key = 'c4m_helper_entity:metrics_info';
  $data = &drupal_static($cache_key);

  // Retrieve from cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $data = module_invoke_all('c4m_helper_entity_metrics_info');

      // Sort the contexts.
      foreach ($data as $key => $info) {
        // Exclude metrics info which don't have a type.
        if (!isset($info['type']) || empty($info['type'])) {
          continue;
        }

        // Exclude metrics info which don't have a callback.
        if (!isset($info['callback']) || empty($info['callback'])) {
          continue;
        }

        // Default context to "global".
        if (!isset($info['context']) || empty($info['context'])) {
          $info['context'] = 'global';
        }

        $metric_key = $info['context'] . '::' . $info['type'];

        uasort($info, 'drupal_sort_weight');
        $data[$metric_key] = $info;
      }

      // Save in cache.
      cache_set($cache_key, $data);
    }
  }

  return $data;
}

/**
 * Load a specific metrics info.
 *
 * @return array | null
 *   Configuration as collected through the implementations of
 *   hook_c4m_helper_entity_metrics_info() hooks.
 *
 * @see c4m_helper_entity_metrics_info()
 */
function c4m_helper_entity_get_metric_info($metric_key) {
  $metrics_info = c4m_helper_entity_metrics_info();

  if (isset($metrics_info[$metric_key])) {
    return $metrics_info[$metric_key];
  }

  return NULL;
}

/**
 * Get the metrics.
 *
 * @param string $metric_key
 *   The key of the metric value to call the function for.
 * @param int $og_id
 *   The Organic Group ID to filter the metrics for.
 *
 * @return array
 *   The collected metrics.
 */
function c4m_helper_entity_get_metrics($metric_key, $og_id = NULL) {
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data[$metric_key]) || (!empty($og_id) && !isset($data[$metric_key][$og_id]))) {
    if ($info = c4m_helper_entity_get_metric_info($metric_key)) {
      $context = $info['context'];
      $callback = $info['callback'];
      $arguments = ($context == 'group') ? array($og_id) : array();

      if (isset($info['arguments'])) {
        $arguments = array_merge($arguments, $info['arguments']);
      }

      if (function_exists($callback)) {
        if ($context == 'group') {
          $data[$metric_key][$og_id] = call_user_func_array($callback, $arguments);
        }
        else {
          $data[$metric_key] = call_user_func_array($callback, $arguments);
        }
      }
    }
  }

  return $data;
}

/**
 * Get a specific metric.
 *
 * @param string $metric_key
 *   The metric key.
 * @param int $og_id
 *   The Organic Group ID to filter the metrics for.
 *
 * @return string | int
 *   The value of the metric.
 */
function c4m_helper_entity_get_metric_value($metric_key, $og_id = NULL) {
  if (empty($metric_key)) {
    return NULL;
  }

  $metrics = c4m_helper_entity_get_metrics($metric_key, $og_id);

  if (isset($metrics[$metric_key])) {
    return $metrics[$metric_key];
  }

  return NULL;
}

/**
 * Get a specific metric in the context of a group.
 *
 * @param string $metric_key
 *   The metric key.
 * @param int $og_id
 *   The Organic Group ID to gather the metrics for.
 *
 * @return string | int
 *   The value of the metric.
 */
function c4m_helper_entity_get_group_metric_value($metric_key, $og_id) {
  if (!is_numeric($og_id)) {
    return c4m_helper_entity_get_metric_value($metric_key);
  }

  $metrics = c4m_helper_entity_get_metric_value($metric_key, $og_id);

  if (isset($metrics[$og_id])) {
    return $metrics[$og_id];
  }

  return NULL;
}
