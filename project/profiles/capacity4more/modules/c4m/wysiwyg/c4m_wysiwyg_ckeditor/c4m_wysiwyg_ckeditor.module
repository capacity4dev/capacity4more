<?php

/**
 * @file
 * Code for the Wysiwyg Ckeditor module.
 */

include_once 'c4m_wysiwyg_ckeditor.features.inc';

/**
 * Implements hook_ckeditor_plugin().
 */
function c4m_wysiwyg_ckeditor_ckeditor_plugin() {
  $module_path = drupal_get_path('module', 'c4m_wysiwyg_ckeditor');
  $plugins = array();

  // Widget plugin.
  $plugins['widget'] = array(
    'name' => 'widget',
    'desc' => t('CKEditor: Widget plugin'),
    'path' => $module_path . '/ckeditor-plugins/widget/',
    'default' => 't',
  );

  // Line utils plugin.
  $plugins['lineutils'] = array(
    'name' => 'lineutils',
    'desc' => t('CKEditor: Line utils plugin'),
    'path' => $module_path . '/ckeditor-plugins/lineutils/',
    'default' => 't',
  );

  // Oembed plugin.
  $plugins['oembed'] = array(
    'name' => 'oembed',
    'desc' => t('CKEditor: Oembed plugin'),
    'path' => $module_path . '/ckeditor-plugins/oembed/',
    'default' => 't',
    'buttons' => array(
      'oembed' => array(
        'label' => 'Oembed',
        'icon' => 'icons/oembed.png',
      ),
    ),
  );

  // Tableresize plugin.
  $plugins['tableresize'] = array(
    'name' => 'tableresize',
    'desc' => t('CKEditor: Tableresize plugin'),
    'path' => $module_path . '/ckeditor-plugins/tableresize/',
    'default' => 't',
  );

  return $plugins;
}

/**
 * Implements hook_form_alter().
 *
 * Hide the URL settings in the popup.
 */
function c4m_wysiwyg_ckeditor_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id !== 'file_entity_add_upload' && $form_id !== 'media_wysiwyg_format_form') {
    return;
  }

  // Don't present the redirects options on a file upload.
  if (isset($form['redirect'])) {
    unset($form['redirect']);
  }

  if (isset($form['#formats'])) {
    unset($form['#formats']['node_gallery_api_admin_thumbnail']);
    unset($form['#formats']['c4m_preview']);
  }
}

/**
 * Implements hook_ckeditor_security_filter().
 */
function c4m_wysiwyg_ckeditor_ckeditor_security_filter() {
  return array(
    'pathologic' => array(
      'title' => t('Pathologic'),
      'description' => t('Correct URLs with Pathologic'),
    ),
  );
}

/**
 * Implements hook_media_wysiwyg_format_form_prepare_alter().
 *
 * @see https://www.drupal.org/node/2460885
 */
function c4m_wysiwyg_ckeditor_media_wysiwyg_format_form_prepare_alter(
  &$form,
  &$form_state,
  $file
) {
  // Attach JavaScript to automatically embed files.
  $form['#attached']['js'][] = drupal_get_path(
      'module',
      'c4m_wysiwyg_ckeditor'
    ) . '/c4m_wysiwyg_ckeditor.js';
}

/**
 * Define all external domains that use cookies.
 *
 * @return array
 *   A list with all domains that contain cookies.
 */
function _c4m_wysiwyg_ckeditor_ckeditor_iframes_with_cookies() {
  return [
    'youtube',
    'archive',
    'dailymotion',
    'google',
    'slideshare',
    'vimeo',
    'ustream',
    'prezi',
    'issuu',
    'scribd',
    'tubechop',
    'twitter',
    'twitframe',
    'mapbox',
    'soundcloud',
    'audioboom',
    'mixcloud',
    'mindmeister',
  ];
}

/**
 * Implements hook_filter_info().
 */
function c4m_wysiwyg_ckeditor_filter_info() {
  $filters['c4m_wysiwyg_ckeditor_iframe_cck'] = array(
    'title' => t('Iframe Cookie Consent Filter'),
    'description' => t('Checks iframes and adds the EU Cookie Consent kit to it if applicable'),
    'process callback' => '_c4m_wysiwyg_ckeditor_iframe_cck_filter_process',
    'tips callback' => '_c4m_wysiwyg_ckeditor_iframe_cck_filter_tips',
  );

  return $filters;
}

/**
 * Returns tips for defined filter.
 *
 * @param string $filter
 *   Filter for which the tips are added.
 * @param string $format
 *   Format of the filter.
 * @param bool $long
 *   Decide the type of the tips.
 *
 * @return string
 *   Text that describes ckeditor filter.
 */
function _c4m_wysiwyg_ckeditor_iframe_cck_filter_tips(
  $filter,
  $format,
  $long = FALSE
) {
  return t('Checks the source input for iframes of a specific service and adds 
  the EU Cookie Consent kit to it if applicable.');
}

/**
 * Prepares markup for external iframes.
 */
function _c4m_wysiwyg_ckeditor_iframe_cck_filter_process(
  $text,
  $filter,
  $format,
  $langcode,
  $cache,
  $cache_id
) {
  // Check if there is an iframe in the text.
  if (!preg_match('/<\s*iframe /mis', $text)) {
    return $text;
  }
  // Load the text into a dom object.
  $dom = new DOMDocument();
  $dom->loadHTML($text);
  $services = _c4m_wysiwyg_ckeditor_ckeditor_iframes_with_cookies();
  $services_replaced = [];

  foreach ($dom->getElementsByTagName('iframe') as $iframe) {
    if (!$iframe->hasAttribute('src')) {
      break;
    }
    $src = $iframe->getAttribute('src');
    $host = parse_url($src, PHP_URL_HOST);
    // Get the domain name.
    preg_match('/([^.]+)\.[^.]+$/', $host, $matches);
    $service = $matches[1];
    // Check if host exists in our list of cookies.
    if (in_array($service, $services)) {
      // Alter media source so it will be rendered after the cookie policy is
      // accepted.
      $iframe->setAttribute(
        "src",
        "//ec.europa.eu/cookie-consent/?name=" . $service . "&oriurl=" . $src
      );

      array_key_exists($service, $services_replaced) ?
        $services_replaced[$service]++ : $services_replaced[$service] = 0;

      $wrapper_div = $dom->createElement('div');
      $wrapper_div->setAttribute('class', $service . '_frame');
      $wrapper_div->setAttribute(
        'id',
        "validate-consent-" . $service . "-" . $services_replaced[$service]
      );
      $iframe->parentNode->replaceChild($wrapper_div, $iframe);
      $wrapper_div->appendChild($iframe);
    }
  }

  // Update DOM only if there was at least one service replaced.
  if (count($services_replaced) > 0) {
    return filter_dom_serialize($dom);
  }
  return $text;
}
