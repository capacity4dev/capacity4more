<?php

/**
 * @file
 * Code for the Quick Post feature.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_restful_quick_post_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_menu().
 */
function c4m_restful_quick_post_menu() {
  $items = array();

  $items['quick-post/%/field-schema'] = array(
    'page callback' => 'c4m_restful_quick_post_get_form_fields',
    'page arguments' => array(1),
    'access callback' => array('c4m_restful_quick_post_get_form_fields_access'),
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function c4m_restful_quick_post_theme() {
  $theme['c4m_restful_quick_post_angular_form'] = array(
    'template' => 'quick-post-form',
    'path' => drupal_get_path('module', 'c4m_restful_quick_post') . '/templates',
    'variables' => array(
      'show_resources' => NULL,
    ),
  );

  return $theme;
}

/**
 * Access callback; access to create entity inside a group.
 *
 * Checks if the user is in a group and checks
 * permissions to create an entity in this group with OG permissions.
 *
 * @param string $resource_name
 *   The name of the resource.
 *
 * @return bool
 *   Access.
 */
function c4m_restful_quick_post_get_form_fields_access($resource_name) {
  if (!og_context_is_init()) {
    // OG context was not determined yet, so register the path and return early.
    // The next time this access callback will be called, it will not enter
    // here.
    og_context_access_callback_register_path($_GET['q']);
    return FALSE;
  }

  $resources = array(
    'discussions' => array(
      'bundle' => 'discussion',
    ),
  );

  // Check if in a group.
  $gid = c4m_og_current_group_id();
  if (empty($gid)) {
    return FALSE;
  }

  return og_user_access('node', $gid, 'create ' . $resources[$resource_name]['bundle'] . ' content');
}

/**
 * Page callback; Load the AngularJs fields info.
 *
 * Loads the information of the fields according to the
 * resource name sent from angular.
 *
 * @param string $resource_name
 *   The name of the resource.
 *
 * @return mixed
 *   The JSON with the fields information.
 */
function c4m_restful_quick_post_get_form_fields($resource_name) {
  // Get current group.
  $group_id = c4m_og_current_group_id();
  // Get fields.
  $field_schema = array();
  $public_fields = array();
  $categories = array();
  $handler = restful_get_restful_handler($resource_name);
  // Send the fields to the app as separate objects by resource
  // (for validation on submit).
  $field_schema['resources'][$resource_name] = $handler->options('', array('group' => $group_id));
  $public_fields += $handler->getPublicFields();

  // Clean the categories values from the field Schema (Duplicated values).
  // Order them and assign them to a separate variable.
  foreach ($field_schema['resources'][$resource_name] as $field_name => $values) {
    $fixed_values = array();
    $allowed_values = $field_name == 'categories' ? $values['form_element']['allowed_values']['categories'] : $values['form_element']['allowed_values'];
    if (!empty($allowed_values)) {
      foreach ($allowed_values as $id => $label) {
        $fixed_values[] = array(
          'id' => $id,
          'label' => $label,
        );
      }
    }
    if ($field_name == 'categories') {
      $categories = $fixed_values;
      unset($field_schema['resources'][$resource_name][$field_name]['form_element']['allowed_values']);
    }
    else {
      $field_schema['resources'][$resource_name][$field_name]['form_element']['allowed_values'] = $fixed_values;
    }
  }
  $field_schema['categories'] = $categories;

  // Gathering all the fields to pass to the angular-app.
  $entity_fields = array();
  $skipped_fields = array(
    'id',
    'self',
  );

  foreach ($public_fields as $public_field_name => $value) {
    // Skipped fields.
    if (in_array($public_field_name, $skipped_fields)) {
      continue;
    }
    // Set all fields values to NULL.
    $entity_fields[$public_field_name] = NULL;

    // Set the current Group.
    if ($public_field_name == 'group') {
      $entity_fields[$public_field_name] = $group_id;
    }
  }

  // Pass quick post form info via Drupal.settings.
  $settings['c4m'] = array(
    'field_schema' => $field_schema,
    'data' => array(
      'entity' => $entity_fields,
    ),
  );

  drupal_json_output($settings);
  drupal_exit();
}

/**
 * Page callback; Load the AngularJs form.
 *
 * Loads the AngularJs form without the resources fields
 * information, Also loads the activity stream of the current group.
 * Displays the entity-types that are activated in the group features.
 *
 * @param int $group_id
 *   The node ID of the current group.
 *
 * @return string
 *   A rendered form of the Quick Post.
 */
function c4m_restful_quick_post_form($group_id) {
  global $user;
  // Load the active features in the current group.
  $group_enabled_content_types = c4m_og_feature_enabled_content_types();

  $request = array(
    'group' => $group_id,
    'html' => TRUE,
    // Sort the activity stream by timestamp descending.
    'sort' => '-timestamp',
    'hide_articles' => 1,
    'group_context' => TRUE,
  );

  $activities = c4m_message_get_activities($request);

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  // PURL options.
  $purl_options = array(
    'purl' => array(
      'enabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  // Global settings for the AngularJs app.
  $settings['c4m'] = array(
    'basePath' => url('', $options),
    'purlPath' => url('', array('absolute' => TRUE, 'purl' => array('enabled' => TRUE))),
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
    'activities' => $activities,
    'data' => array(
      'request' => $request,
      'purl' => url('', $purl_options),
      'group' => $group_id,
      'entity' => array(
        'group' => $group_id,
      ),
      'relatedDocuments' => array(
        'c4m-related-document' => array(),
      ),
    ),
  );

  $resources = array(
    'discussions' => array(
      'bundle' => 'Discussion',
      'description' => t('Discussion'),
      'quick_post' => 1,
    ),
    'wiki-page' => array(
      'bundle' => 'wiki_page',
      'description' => t('Add Wiki page'),
      'quick_post' => 0,
    ),
    'photoalbum' => array(
      'bundle' => 'photoalbum',
      'description' => t('Add Photo album'),
      'quick_post' => 0,
    ),
  );

  // Do not diaplay 'Add Wiki page' if the user isn't permitted.
  if (!og_user_access('node', $group_id, 'create wiki_page content')) {
    unset($resources['wiki-page']);
  }

  // Don't load the quick post form or it's components for anonymous user
  // or user without permissions to post in current group.
  $first_resource = reset($resources);
  if (!user_is_logged_in() || !og_user_access('node', $group_id, 'create ' . strtolower($first_resource['bundle']) . ' content')) {
    // Add group id to the settings for the app.
    drupal_add_js($settings, 'setting');
    return FALSE;
  }

  $resource_names = array_keys($resources);

  $show_resources = $resources;

  // Remove content types that are disabled in group's features.
  foreach ($resource_names as $resource_name) {
    if (!in_array(strtolower($show_resources[$resource_name]['bundle']), $group_enabled_content_types)) {
      unset($show_resources[$resource_name]);
      continue;
    }
  }

  // Site admin may not create content at pending and deleted groups.
  // Special check required as node_access() allows everything to site admin.
  if (c4m_user_is_site_admin()) {
    $group = c4m_og_current_group();
    $group_state = c4m_og_get_group_status($group);

    $user_may_create_discussion = !in_array($group_state, array(
      'pending',
      'deleted',
    ));
  }
  else {
    $user_may_create_discussion = node_access('create', 'discussion');
  }

  // If all resources are turned off, or user is not allowed to create a
  // discussion, disable the QP form.
  if (empty($show_resources) || !$user_may_create_discussion) {
    $settings['c4m']['data']['entity']['group'] = $group_id;
    drupal_add_js($settings, 'setting');
    return FALSE;
  }

  // Pass quick post form info via Drupal.settings.
  $settings['c4m'] += array(
    'resources' => $show_resources,
  );
  drupal_add_js($settings, 'setting');

  // Theme function adds the Quick post form.
  return theme('c4m_restful_quick_post_angular_form', array('show_resources' => $show_resources));
}

/**
 * Implements hook_preprocess_html().
 *
 * Attach Angular application to the page.
 */
function c4m_restful_quick_post_preprocess_html(&$vars) {
  // Check if we need to load the c4m-app on the current page.
  if (!c4m_restful_quick_post_needs_app()) {
    return;
  }

  // Call the activity stream on the homepage.
  $handler = og_purl_og_context_handler();
  if (drupal_is_front_page() && empty($handler)) {
    c4m_message_load_homepage_activity_stream();
  }

  $vars['attributes_array']['ng-app'][] = 'c4mApp';
  $vars['attributes_array']['ng-controller'][] = 'MainCtrl';
  $vars['attributes_array']['ng-cloak'][] = 'true';

  // Load Angular.
  $bower_path = libraries_get_path('bower_components');

  // AngularJs.
  drupal_add_js($bower_path . '/angular/angular.min.js');

  // Angular-touch.
  drupal_add_js($bower_path . '/angular-touch/angular-touch.min.js');

  // Upload file library.
  drupal_add_js($bower_path . '/danialfarid-angular-file-upload/dist/angular-file-upload-shim.min.js');
  drupal_add_js($bower_path . '/danialfarid-angular-file-upload/dist/angular-file-upload.min.js');

  // Angular-animate.
  drupal_add_js($bower_path . '/angular-animate/angular-animate.min.js');

  // Angular-Carousel.
  drupal_add_css($bower_path . '/angular-carousel/dist/angular-carousel.min.css');
  drupal_add_js($bower_path . '/angular-carousel/dist/angular-carousel.min.js');

  // Owl Carousel.
  $owl_path = libraries_get_path('owl-carousel');
  drupal_add_css($owl_path . '/owl-carousel/owl.carousel.css');
  drupal_add_css($owl_path . '/owl-carousel/owl.theme.css');
  drupal_add_js($owl_path . '/owl-carousel/owl.carousel.min.js');

  // Select UI.
  drupal_add_css($bower_path . '/select2/select2.css');
  drupal_add_css($bower_path . '/select2/select2-bootstrap.css');
  drupal_add_js($bower_path . '/select2/select2.js');
  drupal_add_js($bower_path . '/angular-ui-select2/src/select2.js');

  // Bootstrap DatePicker.
  drupal_add_js($bower_path . '/angular-bootstrap/ui-bootstrap.min.js');
  drupal_add_js($bower_path . '/angular-bootstrap/ui-bootstrap-tpls.min.js');

  // Filesize library.
  drupal_add_js($bower_path . '/filesize/lib/filesize.min.js');

  // Load our custom app.
  $app_path = drupal_get_path('module', 'c4m_restful_quick_post') . '/components/c4m-app/dist';
  drupal_add_js($app_path . '/c4m-app.js');

  // URL options.
  $options = array(
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  $settings['c4m'] = array(
    'basePath' => url('', $options),
    'csrfToken' => drupal_get_token(\RestfulInterface::TOKEN_VALUE),
  );
  drupal_add_js($settings, 'setting');
}

/**
 * Helper to determine if a the current path requires the Angular c4m-app.
 *
 * The app should be loaded if:
 * - We are on a group dashboard (<front> with OG active OG context).
 * - On a node add form (node/add/<bundle-type>).
 * - On a node edit form (node/%/edit).
 *
 * @return bool
 *   True if current path requires the app to be loaded.
 */
function c4m_restful_quick_post_needs_app() {
  // If we are on the site homepage or a group dashboard, we need the app.
  if (drupal_is_front_page()) {
    return TRUE;
  }

  // Get the current path.
  $item = menu_get_item();
  $path = $item['path'];
  foreach (menu_tree('main-menu') as $menu_item) {
    if (!empty($menu_item['#title']) && $menu_item['#title'] == $item['title']) {
      return TRUE;
    }
  }

  $allowed_paths = array(
    'node/%/edit',
    'node/%',
    'comment/reply/%',
    'comment/%/edit',
    'user/register',
    'user/%/edit',
    'c4m/project-template-clone/%/%',
    'c4m/programme-template-clone/%/%',
    'admin/people/create',
  );
  // If we are on a group edit form, the app should be loaded.
  if (in_array($path, $allowed_paths)) {
    return TRUE;
  }
  // If we are on a node creation form, the app should be loaded.
  $node_types = array_keys(node_type_get_types());
  foreach ($node_types as $bundle) {
    if ($path === 'node/add/' . str_replace('_', '-', $bundle)) {
      return TRUE;
    }
  }
  if (preg_match('/overlay/i', current_path())) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * Allow non-administrators to set status of nodes.
 */
function c4m_restful_quick_post_entity_property_info_alter(&$info) {
  if (!empty($info['node']['properties']['status']['setter permission'])) {
    unset($info['node']['properties']['status']['setter permission']);
  }
}
