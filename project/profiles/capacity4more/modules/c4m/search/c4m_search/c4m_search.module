<?php

/**
 * @file
 * Code for the Search feature.
 */

include_once 'c4m_search.features.inc';
include_once 'c4m_search.facetapi_sorts.inc';

/**
 * Implements hook_default_search_api_server().
 *
 * Don't feature this as this will be probably overwritten depending on the
 * environment.
 */
function c4m_search_default_search_api_server() {
  $items = array();
  $items['c4m_solr'] = entity_import(
    'search_api_server',
    '{
    "name" : "Solr",
    "machine_name" : "c4m_solr",
    "description" : "",
    "class" : "search_api_solr_service",
    "options" : {
      "clean_ids" : true,
      "site_hash" : true,
      "scheme" : "http",
      "host" : "127.0.0.1",
      "port" : "8983",
      "path" : "\\/solr\\/capacity4more",
      "http_user" : "",
      "http_pass" : "",
      "excerpt" : 0,
      "retrieve_data" : 0,
      "highlight_data" : 0,
      "skip_schema_check" : 0,
      "solr_version" : "",
      "http_method" : "AUTO"
    },
    "enabled" : "1",
    "rdf_mapping" : []
  }'
  );
  return $items;
}

/**
 * Implements hook_search_api_server_load().
 *
 * Provide a configuration as the same structure as the
 * search api server entity in array form (keyed by the
 * machine name of the solr service).
 *
 * Based on the search_api_solr_overrides module.
 *
 * @see https://www.drupal.org/project/search_api_solr_overrides
 *
 * @see c4m_search_default_search_api_server()
 * For an example of the paremeters
 * that can be overridden.
 *
 * Example:
 * $conf['c4m_search_server_overrides'] = array(
 *   'c4m_solr' => array(
 *     'name' => t('Solr Server (Overridden)'),
 *     'options' => array(
 *       'host' => '127.0.0.1',
 *       'port' => 8983,
 *       'path' => '/solr/core1',
 *     ),
 *   ),
 * );
 */
function c4m_search_search_api_server_load($servers) {
  // Get the solr host overrides.
  $overrides = variable_get('c4m_search_server_overrides', FALSE);

  // Ensure the is information provided.
  if (empty($overrides)) {
    return;
  }

  // Loop over an make the required updates.
  foreach ($overrides as $id => $override) {
    // Check to see if the server config exists.
    if (empty($servers[$id])) {
      continue;
    }

    foreach ($servers[$id] as $key => $field) {
      // Ensure we need to override the key.
      if (empty($override[$key])) {
        continue;
      }

      // Check for if the field is an array.
      if (is_array($field)) {
        $servers[$id]->$key = array_merge(
          $servers[$id]->$key,
          $override[$key]
        );
      }
      // Else its a value.
      else {
        $servers[$id]->$key = $override[$key];
      }
    }
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * Override the default Search Api Facet block titles.
 */
function c4m_search_block_view_alter(&$data, $block) {
  // Only for blocks provided by the facetapi module.
  if ($block->module === 'facetapi') {
    module_load_include('inc', 'c4m_search', 'includes/c4m_search.block');
    _c4m_search_block_facetapi_view_alter($data, $block);
  }
  // Only for blocks provided by the facetapi module.
  if ($block->module === 'current_search') {
    module_load_include('inc', 'c4m_search', 'includes/c4m_search.block');
    _c4m_search_block_current_search_view_alter($data, $block);
  }
}

/**
 * Implements hook_facetapi_widgets().
 */
function c4m_search_facetapi_widgets() {
  return array(
    'c4m_search_links_grouped' => array(
      'handler' => array(
        'label' => t('Links Grouped'),
        'class' => 'C4mSearchWidgetLinksGrouped',
        'query types' => array('term', 'date'),
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function c4m_search_theme() {
  return array(
    'c4m_search_facetapi_link_group' => array(
      'variables' => array(
        'text' => NULL,
        'path' => NULL,
        'options' => array(),
        'count' => 0,
      ),
      'file' => 'c4m_search.theme.inc',
    ),
    'c4m_search_dropdown_sort_filters' => array(
      'variables' => array('list' => NULL, 'active' => NULL, 'order' => NULL),
      'template' => 'search-api-sorts-list',
      'path' => drupal_get_path('module', 'c4m_search') . '/templates',
    ),
  );
}

/**
 * Pragmatically execute a search.
 *
 * There must be at least one filter.
 * Each filter contains a condition with a field name, value and operator.
 *
 * For example the $filters array to retrieve all published nodes of type event:
 *
 * $filters = array(
 *   '0' => array(
 *     'conjunction' => 'AND',
 *     'condition' => array(
 *        'field' => 'status',
 *        'value' => 1,
 *        'operator' => '=',
 *     ),
 *   ),
 *  '1' => array(
 *    'conjunction' => 'AND',
 *    'condition' => array(
 *      'field' => 'type',
 *      'value' => 'event',
 *       'operator' => '=',
 *    ),
 *  ),
 * );
 *
 * You can also set options on the query. F.i. nr. of rows to return: 'limit'
 * F.i. to retrieve counts of documents only and not return items:
 * $query->setOption('limit', 0);
 *
 * @param array $filters
 *   The filters to be added to the query.
 * @param array $options
 *   Additional options to be added to the query.
 *
 * @return array
 *   Result set of the query.
 */
function c4m_search_custom_search(array $filters, array $options = array()) {
  if (empty($filters)) {
    return array();
  }
  $index = search_api_index_load('c4m_search_nodes');
  $query = new SearchApiQuery($index);
  $base_filter = $subfilter = NULL;

  foreach ($filters as $filter) {
    if (empty($base_filter)) {
      $base_filter = $query->createFilter($filter['conjunction']);
      $base_filter->condition(
        $filter['condition']['field'],
        $filter['condition']['value'],
        $filter['condition']['operator']
      );
    }
    else {
      $subfilter = $query->createFilter($filter['conjunction']);
      $subfilter->condition(
        $filter['condition']['field'],
        $filter['condition']['value'],
        $filter['condition']['operator']
      );
      $base_filter->filter($subfilter);
    }
  }

  $query->filter($base_filter);
  foreach ($options as $option) {
    $query->setOption($option['name'], $option['value']);
  }

  return $query->execute();
}

/**
 * Implements hook_facetapi_url_processors().
 */
function c4m_search_facetapi_url_processors() {
  return array(
    'c4m_processor' => array(
      'handler' => array(
        'label' => t('C4M URL processor'),
        'class' => 'FacetapiUrlProcessorC4m',
      ),
    ),
  );
}

/**
 * Implements hook_facetapi_searcher_info_alter().
 */
function c4m_search_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as $key => $value) {
    if ($value['url processor'] == 'standard') {
      $searcher_info[$key]['url processor'] = 'c4m_processor';
    }
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function c4m_search_search_api_solr_query_alter(
  array &$call_args,
  SearchApiQueryInterface $query
) {
  // Set q.op = 'OR' so boolean operators work.
  $patterns = array(
    '/(\s|^)(-|!)/',
    '/(\s)AND(\s)/',
    '/(\s)OR(\s)/',
    '/(\s)NOT(\s)/',
  );

  foreach ($patterns as $replacement) {
    if (preg_match($replacement, $call_args['query'])) {
      // One match is enough.
      $call_args['params']['q.op'] = 'OR';
    }
  }
}

/**
 * Implements hook_search_api_sorts_alter().
 *
 * Show sort by relevance only when a search term is entered.
 */
function c4m_search_search_api_sorts_alter(&$block, $view) {
  $params = drupal_get_query_parameters();

  if (empty($params['text'])) {
    foreach ($block['content']['#items'] as $key => $item) {
      if (isset($item['#options']['query']['sort'])
        && $item['#options']['query']['sort'] === 'search_api_relevance'
      ) {
        unset($block['content']['#items'][$key]);
      }
    }
  }
}

/**
 * Load all search pages info from implemented hook_c4m_search_page_info hooks.
 *
 * @param string $page
 *   Optional, only return data for a given search page.
 *
 * @return array
 *   Configuration as collected through the implemented
 *   hook_c4m_search_page_info hooks.
 */
function c4m_search_info($page = NULL) {
  $cache_key = 'c4m_search:page_info';
  $data = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $hook = 'c4m_search_page_info';
      $data = module_invoke_all($hook);
      uasort($data, 'drupal_sort_weight');
      cache_set($cache_key, $data);
    }
  }

  // Only return data for a given search page.
  if (isset($data[$page])) {
    return $data[$page];
  }

  // Return all data.
  return $data;
}

/**
 * Implements hook_forms().
 */
function c4m_search_forms($form_id, $args) {
  $forms['c4m_search_form'] = array(
    'callback' => 'c4m_search_form',
  );

  $forms['c4m_search_redirect_form'] = array(
    'callback' => 'c4m_search_redirect_form',
  );

  return $forms;
}

/**
 * Create search form.
 */
function c4m_search_form($form, &$form_state) {
  $form = array();
  $form['#attributes']['class'][] = 'search-form';
  $form['basic'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline', 'pull-right'),
    ),
  );

  $form['basic']['search_page'] = array(
    '#type' => 'hidden',
    '#value' => 'search_api_views_c4m_search_nodes',
  );

  // Search input.
  $form['basic']['keys'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#default_value' => '',
    '#size' => 15,
    '#maxlength' => 255,
    '#attributes' => array(
      'title' => t('Enter the terms you wish to search for.'),
      'placeholder' => t('search capacity4dev...'),
    ),
  );

  // Submit button.
  $form['basic']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#hide_text' => TRUE,
    '#icon' => '<i class="fa fa-search"></i>',
  );

  return $form;
}

/**
 * Search form submit handler.
 *
 * Redirects to the selected search page.
 */
function c4m_search_form_submit($form, &$form_state) {
  // Get destination search page.
  $search_page = c4m_search_info($form_state['values']['search_page']);
  $options = array(
    'query' => array(
      'text' => $form_state['values']['keys'],
    ),
    'purl' => array(
      'disabled' => ($search_page['type'] === 'global'),
    ),
    'absolute' => TRUE,
  );

  // Force redirect on 404 pages.
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  // Set redirect target.
  $form_state['redirect'] = url($search_page['path'], $options);
}

/**
 * Create search redirect form.
 */
function c4m_search_redirect_form($form, &$form_state, $redirect_url, $title = NULL, $placeholder = NULL) {
  $form = array();
  $form['#attributes']['class'][] = 'search-form';
  $form['basic'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );

  $form['basic']['search_page'] = array(
    '#type' => 'hidden',
    '#value' => $redirect_url,
  );

  // Search input.
  $form['basic']['keys'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#default_value' => '',
    '#size' => 15,
    '#maxlength' => 255,
    '#attributes' => array(
      'title' => $title ? $title : t('Enter the terms you wish to search for.'),
      'placeholder' => $placeholder ? $placeholder : t('search capacity4dev...'),
    ),
  );

  // Submit button.
  $form['basic']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#hide_text' => TRUE,
    '#icon' => '<i class="fa fa-search"></i>',
  );

  return $form;
}

/**
 * Search redirect form submit handler.
 *
 * Redirects to the selected search page.
 */
function c4m_search_redirect_form_submit($form, &$form_state) {
  // Get destination search page.
  $search_page = $form_state['values']['search_page'];
  $options = array(
    'query' => array(
      'text' => $form_state['values']['keys'],
    ),
    'purl' => array(
      'disabled' => TRUE,
    ),
    'absolute' => TRUE,
  );

  // Force redirect on 404 pages.
  if (isset($_GET['destination'])) {
    unset($_GET['destination']);
  }

  // Set redirect target.
  $form_state['redirect'] = url($search_page, $options);
}

/**
 * Implements hook_facet_items_alter().
 */
function c4m_search_facet_items_alter(&$build, &$settings) {
  if ($settings->facet == 'type') {
    foreach ($build as $key => $item) {
      if (og_is_group_content_type('node', $item['#indexed_value'])) {
        $build[$key]['#class'][] = 'group';
      }
      else {
        $build[$key]['#class'][] = 'global';
      }
    }
  }
  if ($settings->facet === 'type') {
    if (isset($build['discussion']['#active'])) {
      $discussion_items = _c4m_search_get_facet_items('c4m_discussion_type');
      $list = array(
        'info' => t('Information'),
        'idea' => t('Idea'),
        'question' => t('Question'),
        'debate' => t('Debate'),

      );
      foreach ($discussion_items as $key => $item) {
        if (isset($list[$item['#indexed_value']])) {
          $item['#markup'] = $list[$item['#indexed_value']];
        }
        $discussion_items[$key] = $item;
      }

      $build['discussion']['#item_children'] = $discussion_items;
      _c4m_search_remove_facet_param(
        $build['discussion'],
        'c4m_discussion_type'
      );
    }
    if (isset($build['document']['#active'])) {
      $build['document']['#item_children'] = _c4m_search_get_facet_items(
        'c4m_vocab_document_type'
      );
      _c4m_search_remove_facet_param(
        $build['document'],
        'c4m_vocab_document_type'
      );
    }
    if (isset($build['event']['#active'])) {
      $build['event']['#item_children'] = _c4m_search_get_facet_items(
        'c4m_event_type'
      );
      _c4m_search_remove_facet_param($build['event'], 'c4m_event_type');
    }
  }
}

/**
 * Removes a query param from a facet item link.
 */
function _c4m_search_remove_facet_param(&$facet_item, $param_name) {
  $params = &$facet_item['#query']['f'];
  if (!isset($params)) {
    return;
  }
  foreach ($params as $key => $value) {
    if (strpos($value, $param_name) === 0) {
      array_splice($params, $key, 1);
    }
  }
}

/**
 * Retrieves facet items for field.
 *
 * @param string $field_name
 *   Machine name of the field.
 *
 * @return array
 *   List of facet items.
 */
function _c4m_search_get_facet_items($field_name) {
  $adapter = facetapi_adapter_load('search_api@c4m_search_nodes');
  $facets = new FacetapiFacet(
    $adapter,
    facetapi_facet_load($field_name, 'search_api@c4m_search_nodes')
  );

  $processor = new FacetapiFacetProcessor($facets);
  $processor->process();

  $realm = facetapi_realm_load('block');
  $facets->build($realm, $processor);

  $build_list = $facets->getBuild();

  return $build_list;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Add required inputs to the form.
 * Alter the #info data so that the widgets are altered.
 *
 * @see template_preprocess_views_exposed_form()
 */
function c4m_search_form_views_exposed_form_alter(
  &$form,
  &$form_state,
  $form_id
) {
  if (isset($form['items_per_page'])) {
    $form['items_per_page']['#access'] = FALSE;
  }

  if (!isset($form['#info']['filter-search_api_views_fulltext'])) {
    return;
  }
  $form['#info']['filter-search_api_views_fulltext']['label'] = '';
  $form['text']['#type'] = 'hidden';

  $form['search_within_results'] = array(
    '#type' => 'checkbox',
    '#title' => 'Search within search results',
    '#weight' => -5,
  );
  $form['#info']['search_within_results'] = array(
    'value' => 'search_within_results',
  );
  $form['#info']['search'] = array(
    'value' => 'search',
    'label' => 'Search',
  );
  $form['search'] = array(
    '#type' => 'textfield',
    '#weight' => -10,
  );

  // Do not keep page in the search params.
  $search_params = drupal_get_query_parameters();
  unset($search_params['page']);
  $form['search_params'] = array(
    '#type' => 'hidden',
    '#value' => serialize($search_params),
  );

  $form['#submit'][] = 'c4m_search_submit_handler_search_within_results';
}

/**
 * Submit callback for exposed filters forms.
 */
function c4m_search_submit_handler_search_within_results($form, &$form_state) {
  $path = drupal_get_query_parameters();

  if (!empty($path['op'])) {
    // The form is resetted.
    return;
  }
  if (!isset($path['search_params'])) {
    return;
  }
  $params = unserialize($path['search_params']);

  // When pager is clicked search_within_results are present in query params
  // with value 0.
  if (isset($path['search_within_results']) && $path['search_within_results'] === '0') {
    if (isset($path['page'])) {
      $params['page'] = $path['page'];
    }
  }
  // If the pager was not clicked then the form was submitted.
  else {
    $new_value = $form_state['values']['search'];
    if ($form_state['values']['search_within_results'] === 1) {
      // If the user clicks "Search within search results" without having a
      // previous searched string, the text $params['text'] is not set.
      if (!empty($params['text'])) {
        $params['text'] .= $new_value !== '' ? ' ' . $new_value : '';
      }
      else {
        if ($new_value !== '') {
          $params['text'] = $new_value;
        }
        else {
          unset($params['text']);
        }
      }
    }
    else {
      // Simple form submission or a search not within results.
      // We're resetting the params array to wipe out the facets.
      $params = [];
      if ($new_value !== '') {
        $params['text'] = $new_value;
      }
    }
  }
  drupal_goto(current_path(), array('query' => $params));
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Using hook_preprocess_facetapi_link_active().
 *
 * @see _c4m_search_preprocess_facetapi_link()
 */
function c4m_search_preprocess_facetapi_link_active(&$vars) {
  _c4m_search_preprocess_facetapi_link($vars);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Using hook_preprocess_facetapi_link_inactive().
 *
 * @see _c4m_search_preprocess_facetapi_link()
 */
function c4m_search_preprocess_facetapi_link_inactive(&$vars) {
  _c4m_search_preprocess_facetapi_link($vars);
}

/**
 * Helper function to assign a new class to a Facet API link.
 *
 * @param array $vars
 *   Variables for the theming function.
 */
function _c4m_search_preprocess_facetapi_link(array &$vars) {
  if (isset($vars['text'])) {
    $vars['options']['attributes']['class'][] = drupal_html_class('facetapi-link--' . $vars['text']);
  }
}

/**
 * Implements hook_TYPE_alter().
 *
 * Using hook_c4m_offcanvas_trigger_label_left_alter().
 */
function c4m_search_c4m_offcanvas_trigger_label_left_alter(&$trigger_label) {
  if (arg(0) == 'search') {
    $trigger_label['label'] = t('Filter results');
    $trigger_label['icon'] = 'filter';
  }
}

/**
 * Implements hook_views_post_build().
 *
 * Add setting for jumping to title for search pages.
 */
function c4m_search_views_post_build(&$view) {
  $base_tables = array(
    'search_api_index_c4m_search_users',
    'search_api_index_c4m_search_nodes',
  );

  if (isset($view->base_table) && in_array($view->base_table, $base_tables)) {
    drupal_add_js(array('c4m' => array('jumpToTitle' => TRUE)), 'setting');
  }
}

/**
 * Highlights search keywords in a search text.
 *
 * @param string $text
 *   The search text.
 *
 * @return string
 *   Search text with highlighted keywords.
 */
function c4m_search_highlight_search_keywords($text) {
  $replacements = [
    // $text is already passed through checkplain().
    '/(&quot;)/' => '<span class="search-keyword">$1</span>',
    '/(\s|^)(-|!)/' => '$1<span class="search-keyword">$2</span>',
    '/(\s)AND(\s)/' => '$1<span class="search-keyword">AND</span>$2',
    '/(\s)OR(\s)/' => '$1<span class="search-keyword">OR</span>$2',
    '/(\s)NOT(\s)/' => '$1<span class="search-keyword">NOT</span>$2',
  ];
  foreach ($replacements as $key => $replacement) {
    $text = preg_replace($key, $replacement, $text);
  }
  return $text;
}

/**
 * Implements hook_current_search_items().
 */
function c4m_search_current_search_items() {
  return [
    'clear_all_filters' => [
      'handler' => [
        'label' => t('Clear all filters link'),
        'class' => 'C4MSearchCurrentSearchClearAllFiltersLink',
      ],
    ],
  ];
}

/**
 * Implements hook_current_search_links_active_items_alter().
 *
 * Highlight keywords for searched text.
 */
function c4m_search_current_search_links_active_items_alter(&$items, $context) {
  foreach ($items as &$item) {
    // Skip facets.
    if (isset($item['#facet_field'])) {
      continue;
    }
    $item['#text'] = c4m_search_highlight_search_keywords($item['#text']);
  }
}
