<?php

/**
 * @file
 * Code for the Search Filter feature.
 */

/**
 * Implements hook_block_info().
 */
function c4m_search_filter_block_info() {
  $blocks['search_filter'] = array(
    'info' => t('Search Filter: all'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search_filter_groups'] = array(
    'info' => t('Search Filter: groups'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search_filter_groups_overview'] = array(
    'info' => t('Search Filter: groups overview'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search_filter_interests'] = array(
    'info' => t('Search Filter: interests'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search_filter_projects_overview'] = array(
    'info' => t('Search Filter: projects overview'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_search_filter_block_view($delta = '') {
  module_load_include('inc', 'c4m_search_filter', 'includes/c4m_search_filter.block');
  $callback = '_c4m_search_filter_block_' . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }
  return $callback();
}

/**
 * Implements hook_form_alter().
 */
function c4m_search_filter_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'c4m_search_filter_search_filter_form') {
    // Unset hidden fields so they don't appear in the url.
    unset($form['form_id'], $form['#token'], $form['form_build_id'], $form['#build_id']);
  }
}

/**
 * Implements hook_search_api_query_alter().
 */
function c4m_search_filter_search_api_query_alter(SearchApiQueryInterface $query) {
  global $user;

  $params = drupal_get_query_parameters();

  // Determine the bundle view works with.
  if (strpos(current_path(), 'groups', 0) === 0) {
    $bundle = 'group';
  }
  elseif (strpos(current_path(), 'projects', 0) === 0) {
    $bundle = 'project';
  }
  else {
    $bundle = 'other';
  }

  // Determines if filters were applied on view.
  $no_filter = empty($params['filter']) || $params['filter'] == 'showAll';

  // View does not present OG groups ('group' / 'project'), and no filters set.
  if ($no_filter && ($bundle == 'other')) {
    return;
  }

  // View presents OG groups ('group' / 'project'), and no filters were set.
  if ($no_filter && ($bundle != 'other')) {
    // Filter, to present only the groups logged-in user can access.
    _c4m_search_filter_view_access_filter_query_alter($query);

    return;
  }

  switch ($params['filter']) {
    case 'groups':
      // Get groups.
      $groups = _c4m_search_filter_get_member_accessible_groups('group');

      // Create filter.
      $filter = $query->createFilter('OR');

      // Filter on groups.
      foreach ($groups as $group) {
        if (strpos(current_path(), 'groups', 0) === 0) {
          $filter->condition('nid', $group);
        }
        else {
          $filter->condition('og_group_ref', $group);
        }
      }

      // Apply filter.
      $query->filter($filter);
      break;

    case 'projects':
      // Get projects.
      $groups = _c4m_search_filter_get_member_accessible_groups('project');

      // Create filter.
      $filter = $query->createFilter('OR');

      // Filter on projects.
      foreach ($groups as $group) {
        if (strpos(current_path(), 'projects', 0) === 0) {
          $filter->condition('nid', $group);
        }
        else {
          $filter->condition('og_group_ref', $group);
        }
      }

      // Apply filter.
      $query->filter($filter);
      break;

    case 'interests':
      // When presenting OG groups (of type 'group' / 'project').
      if ($bundle != 'other') {
        // Filter, to present only the groups logged-in user can access.
        _c4m_search_filter_view_access_filter_query_alter($query);
      }

      // Get user object.
      $user_wrapper = entity_metadata_wrapper('user', $user->uid);

      // Get interests & regions.
      $interests = $user_wrapper->c4m_vocab_topic->raw();
      $regions = $user_wrapper->c4m_vocab_geo->raw();
      if (empty($interests) && empty($regions)) {
        return;
      }

      // Create filter.
      $filter = $query->createFilter('OR');

      // Filter on interests.
      foreach ($interests as $interest) {
        $filter->condition('c4m_vocab_topic', $interest);
      }

      // Filter on geographic regions.
      foreach ($regions as $region) {
        $filter->condition('c4m_vocab_geo', $region);
      }

      // Apply filter.
      $query->filter($filter);

      break;
  }
}

/**
 * Add filter to query, to present only the groups logged-in user can access.
 *
 * Since og_access module grants access to any node that got its
 * OG_ACCESS_FIELD set to 1, which is not per project access requirements,
 * we need to cancel this effect.
 * To do so, this filter is generated and added to query, with all grants,
 * besides the ones that are generated by og_access module.
 *
 * @param object $query
 *   The query that is used to select groups that will be presented.
 *   Passed by reference, as query is altered.
 */
function _c4m_search_filter_view_access_filter_query_alter(&$query) {
  // Filter by node access grants.
  $filter = $query->createFilter('OR');
  // Generate all grants for current user, besides the ones being generated
  // by og_access model.
  $grants = _c4m_search_filter_view_access_filter_grants();
  // Create query conditions, in similar way _search_api_query_add_node_access()
  // generates it's query conditions.
  foreach ($grants as $realm => $gids) {
    foreach ($gids as $gid) {
      $filter->condition('search_api_access_node', "node_access_$realm:$gid");
    }
  }
  $filter->condition('search_api_access_node', 'node_access__all');
  // Add filter.
  $query->filter($filter);
}

/**
 * Returns a list of grants, besides the ones generated by og_access module.
 *
 * Operational is similar to node_access_grants() activated by
 * _search_api_query_add_node_access(), besides activation of 'node_grants'
 * implementation by og_access module.
 *
 * @param string $op
 *   Operation for which grants are generated. Defaults to 'view'.
 *
 * @see node_access_grants().
 *
 * @returns array
 *   List of grants for logged in user.
 */
function _c4m_search_filter_view_access_filter_grants($op = 'view') {
  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }

  $args = array($account, $op);
  // Find all modules that implement hook_node_grants().
  $implementing_modules = module_implements('node_grants');
  // Remove og_access module from the list of implementing modules.
  if (($key = array_search('og_access', $implementing_modules)) !== FALSE) {
    unset($implementing_modules[$key]);
  }

  // Activate the hook functions of all modules from the list.
  $grants = array();
  foreach ($implementing_modules as $module) {
    $function = $module . '_node_grants';
    if (function_exists($function)) {
      $result = call_user_func_array($function, $args);
      if (isset($result) && is_array($result)) {
        $grants = array_merge_recursive($grants, $result);
      }
      elseif (isset($result)) {
        $grants[] = $result;
      }
    }
  }

  // Allow modules to alter the assigned grants.
  drupal_alter('node_grants', $grants, $account, $op);

  return array_merge(array('all' => array(0)), $grants);
}

/**
 * Returns the list of groups logged-in user belongs to, and can view.
 *
 * @param string $bundle
 *   Group bundle. By default, set to NULL.
 *
 * @returns array
 *   List of groups logged-in user belongs to, and can view.
 */
function _c4m_search_filter_get_member_accessible_groups($bundle = NULL) {
  $groups = c4m_user_og_get_groups(NULL, $bundle, NODE_PUBLISHED, FALSE);

  // Removes groups where the logged in user has no access.
  $groups = array_filter($groups, 'c4m_search_filter_node_access_view_filter');

  $filtered_groups = array();

  foreach ($groups as $group) {
    $filtered_groups[$group->nid] = $group->nid;
  }

  return $filtered_groups;
}

/**
 * Callback for array_filter that checks if the user has access to the node.
 *
 * @param object $node
 *   Node object.
 *
 * @returns boolean
 *   Indicates if the user has access or not.
 */
function c4m_search_filter_node_access_view_filter($node) {
  return node_access('view', $node);
}
