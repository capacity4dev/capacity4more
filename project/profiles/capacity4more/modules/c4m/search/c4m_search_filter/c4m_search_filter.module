<?php

/**
 * @file
 * Code for the Search Filter feature.
 */

/**
 * Implements hook_block_info().
 */
function c4m_search_filter_block_info() {
  $blocks['search_filter'] = array(
    'info' => t('Search Filter: all'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search_filter_groups'] = array(
    'info' => t('Search Filter: groups'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search_filter_groups_overview'] = array(
    'info' => t('Search Filter: groups overview'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search_filter_interests'] = array(
    'info' => t('Search Filter: interests'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['search_filter_projects_overview'] = array(
    'info' => t('Search Filter: projects overview'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_search_filter_block_view($delta = '') {
  module_load_include('inc', 'c4m_search_filter', 'includes/c4m_search_filter.block');
  $callback = '_c4m_search_filter_block_' . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }
  return $callback();
}

/**
 * Implements hook_form_alter().
 */
function c4m_search_filter_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'c4m_search_filter_search_filter_form') {
    // Unset hidden fields so they don't appear in the url.
    unset($form['form_id'], $form['#token'], $form['form_build_id'], $form['#build_id']);
  }
}

/**
 * Implements hook_search_api_query_alter().
 */
function c4m_search_filter_search_api_query_alter(SearchApiQueryInterface $query) {
  global $user;

  $params = drupal_get_query_parameters();

  if (0 === strpos(current_path(), 'groups', 0)) {
    $bundle = 'group';
  }
  elseif (0 === strpos(current_path(), 'projects', 0)) {
    $bundle = 'project';
  }
  else {
    $bundle = 'other';
  }

  $no_filter = empty($params['filter']) || $params['filter'] == 'showAll';

  if ($no_filter && ($bundle == 'other')) {
    return;
  }

  // No filter applied, and working on groups/projects view.
  if ($no_filter && ($bundle != 'other')) {

    $groups = _c4m_search_filter_get_all_accessible_groups($bundle);
    $filter = $query->createFilter('OR');

    // Filter on groups.
    foreach ($groups as $group) {
      $filter->condition('nid', $group);
    }

    // Apply filter.
    $query->filter($filter);

    return;
  }

  switch ($params['filter']) {
    case 'groups':
      // Get groups.
      $groups = _c4m_search_filter_get_member_accessible_groups('group');

      // Create filter.
      $filter = $query->createFilter('OR');

      // Filter on groups.
      foreach ($groups as $group) {
        if (0 === strpos(current_path(), 'groups', 0)) {
          $filter->condition('nid', $group);
        }
        else {
          $filter->condition('og_group_ref', $group);
        }
      }

      // Apply filter.
      $query->filter($filter);
      break;

    case 'projects':
      // Get projects.
      $groups = $groups = _c4m_search_filter_get_member_accessible_groups('project');

      // Create filter.
      $filter = $query->createFilter('OR');

      // Filter on projects.
      foreach ($groups as $group) {
        if (0 === strpos(current_path(), 'projects', 0)) {
          $filter->condition('nid', $group);
        }
        else {
          $filter->condition('og_group_ref', $group);
        }
      }

      // Apply filter.
      $query->filter($filter);
      break;

    case 'interests':
      // Get user object.
      $user_wrapper = entity_metadata_wrapper('user', $user->uid);

      // Get interests & regions.
      $interests = $user_wrapper->c4m_vocab_topic->raw();
      $regions = $user_wrapper->c4m_vocab_geo->raw();
      if (empty($interests) && empty($regions)) {
        return;
      }

      // Create filter.
      $filter = $query->createFilter('OR');

      // Filter on interests.
      foreach ($interests as $interest) {
        $filter->condition('c4m_vocab_topic', $interest);
      }

      // Filter on geographic regions.
      foreach ($regions as $region) {
        $filter->condition('c4m_vocab_geo', $region);
      }

      // Apply filter.
      $query->filter($filter);

      break;
  }
}

function _c4m_search_filter_get_member_accessible_groups($bundle = NULL) {
  $groups = c4m_user_og_get_groups(NULL, $bundle, NODE_PUBLISHED, FALSE);

  // Removes groups where the logged in user has no access.
  $groups = array_filter($groups, 'c4m_search_filter_node_access_view_filter');

  $filtered_groups = array();

  foreach($groups as $group) {
    $filtered_groups[$group->nid] = $group->nid;
  }

  return $filtered_groups;
}

function _c4m_search_filter_get_all_accessible_groups($bundle = NULL) {
  $groups = og_get_all_group();
  $conditions = is_null($bundle) ? array() : array('type' => $bundle);
  $groups = node_load_multiple($groups, $conditions);
  $groups = array_filter($groups, 'c4m_search_filter_node_access_view_filter');

  $filtered_groups = array();
  foreach($groups as $group) {
    $filtered_groups[$group->nid] = $group->nid;
  }

  return $filtered_groups;
}


/**
 * Callback for array_filter that checks if the user has access to the node.
 *
 * @param object $node
 *   Node object.
 *
 * @returns boolean
 *   Indicates if the user has access or not.
 */
function c4m_search_filter_node_access_view_filter($node) {
  return node_access('view', $node);
}

function c4m_search_filter_no_node_access_view_filter($node) {
  return !node_access('view', $node);
}
