<?php

/**
 * @file
 * Functionality to provide missing info about a user.
 *
 * And his (activity within) groups.
 */

/**
 * Check if a user has a specific permission within the group.
 *
 * @param string $permission
 *   The permission name.
 * @param object $group
 *   (optional) If no group is given, the current group will be used.
 *
 * @return bool
 *   Has access to the given permission.
 */
function c4m_user_og_has_group_permission($permission, $group = NULL) {
  if (!og_context_is_init()) {
    // OG context was not determined yet, so register the path and return
    // early. The next time this access callback will be called, it will not
    // enter here.
    og_context_access_callback_register_path($_GET['q']);

    return NULL;
  }

  if (is_null($group) || is_object($group)) {
    $group = c4m_og_current_group();
  }

  if (!$group) {
    return FALSE;
  }

  // Re-use built-in og user access checks.
  return og_ui_user_access_group($permission, 'node', $group->nid);
}

/**
 * Get the role a user has within the given group.
 *
 * Only the highest role will be returned.
 * Possible roles (highest order to lowest):
 * - owner : the user is the owner (creator) of the group.
 * - administrator : the user can manage the group.
 * - member : the user is a member of the group.
 * - blocked : the user is blocked or his membership request was rejected.
 * - pending : the membership was requested and waiting for approval.
 *
 * @param object $user
 *   The user for who we are collecting his role.
 * @param object $group
 *   The group where we are trying to determine the users role for.
 *
 * @return string
 *    The user role.
 */
function c4m_user_og_get_role_in_group($user, $group) {
  // Group has no owner, return early to prevent showing an "Owner" label for
  // all anonymous visitors (since their uid is 0, they falsely match the group
  // owner id).
  if (empty($group->uid)) {
    return NULL;
  }

  // Is user the owner of the group node?
  if ((int) $user->uid === (int) $group->uid) {
    return 'owner';
  }

  // Has the user a membership for the given group?
  $membership = og_get_membership('node', $group->nid, 'user', $user->uid);
  if (!$membership) {
    return NULL;
  }

  // Check if not pending or blocked.
  switch ($membership->state) {
    case OG_STATE_PENDING:
      return 'pending';

    case OG_STATE_BLOCKED:
      return 'blocked';
  }

  // Check if the user has the administrator role.
  $roles = og_roles('node', $group->type, $group->nid);
  $admin_role = array_search(
    C4M_FEATURES_OG_MEMBERS_ADMINISTRATOR_ROLE_NAME,
    $roles
  );
  if ($admin_role) {
    $user_roles = og_get_user_roles('node', $group->nid, $user->uid);
    if (array_search(
      C4M_FEATURES_OG_MEMBERS_ADMINISTRATOR_ROLE_NAME,
      $user_roles
    )) {
      return 'administrator';
    }
  }

  // Ok, normal member.
  return 'member';
}

/**
 * Get the human name of the role a user has within a group.
 *
 * Is a wrapper around c4m_user_og_get_role_in_group(). It translates the
 * machine name of the role into a human label.
 *
 * @param object $user
 *   The user for who we are collecting his role.
 * @param object $group
 *   The group where we are trying to determine the users role for.
 *
 * @return string
 *    The human readable name of the user role.
 */
function c4m_user_og_get_role_in_group_human($user, $group) {
  $role = c4m_user_og_get_role_in_group($user, $group);
  $role_human = c4m_user_og_get_human_role_name($role, $group);
  return $role_human;
}

/**
 * Translate a machine user role name into a human name.
 *
 * @param string $role
 *   The machine name of the role.
 * @param object $group
 *   The (optional) group node for who we are translating the role name.
 *
 * @return string
 *   The human name of the role.
 */
function c4m_user_og_get_human_role_name($role, $group = NULL) {
  if (!$group) {
    $group = c4m_og_current_group();
  }
  if (!$group) {
    return FALSE;
  }

  $role_human = $role;
  $group_type = ucfirst(node_type_get_name($group));

  switch ($role) {
    case 'owner':
      $role_human = t(
        '@group_type Owner',
        array('@group_type' => $group_type)
      );
      break;

    case 'administrator':
    case 'administrator member':
      $role_human = t(
        '@group_type Administrator',
        array('@group_type' => $group_type)
      );
      break;

    case 'member':
      $role_human = t(
        '@group_type Member',
        array('@group_type' => $group_type)
      );
      break;

    case 'blocked':
      $role_human = t('Blocked/Rejected Membership');
      break;

    case 'pending':
      $role_human = t('Requested Membership');
      break;
  }

  return $role_human;
}

/**
 * Get the number of posts (nodes) for the given user within the given group.
 *
 * @param int $uid
 *   The User ID.
 * @param int $gid
 *   The Group ID (node id).
 *
 * @return int
 *    Number of posts from user within group.
 */
function c4m_user_og_count_nodes_in_group($uid, $gid) {
  $query = db_select('node', 'n');
  $query->join('og_membership', 'ogm', 'n.nid = ogm.etid');
  $query->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.uid', (int) $uid)
    ->condition('ogm.gid', (int) $gid)
    ->condition('ogm.entity_type', 'node');

  return (int) $query->countQuery()->execute()->fetchField();
}

/**
 * Get the number of comments for the given user within the given group.
 *
 * @param int $uid
 *   The User ID.
 * @param int $gid
 *   The Group ID (node id).
 *
 * @return int
 *    Number of comments from user within group.
 */
function c4m_user_og_count_comments_in_group($uid, $gid) {
  $query = db_select('comment', 'c');
  $query->join('node', 'n', 'c.nid = n.nid');
  $query->join('og_membership', 'ogm', 'n.nid = ogm.etid');
  $query->fields('c', array('cid'))
    ->condition('c.status', 1)
    ->condition('n.status', 1)
    ->condition('c.uid', (int) $uid)
    ->condition('ogm.gid', (int) $gid)
    ->condition('ogm.entity_type', 'node');

  return (int) $query->countQuery()->execute()->fetchField();
}

/**
 * Check if a user has groups.
 *
 * @param mixed $account
 *   Optional account object, defaults to the active user.
 * @param string $bundle
 *   Optional bundle type, can be 'group' (default) or 'project'.
 * @param int $status
 *   Optional status of the groups to filter on, default published.
 *
 * @return bool
 *   Boolean indication if the user has groups.
 */
function c4m_user_og_has_groups(
  $account = NULL,
  $bundle = 'group',
  $status = NODE_PUBLISHED
) {
  $groups = og_get_groups_by_user($account);
  if (empty($groups)) {
    return FALSE;
  }

  // Count groups of bundle type.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->entityCondition('entity_id', $groups['node'], 'IN')
    ->propertyCondition('status', $status)
    ->count();
  $count = $query->execute();

  return $count > 0;
}

/**
 * Get groups a user belongs to.
 *
 * @param mixed $account
 *   Optional account object, defaults to the active user.
 * @param string $bundle
 *   Optional bundle type, can be 'group' (default) or 'project'.
 * @param int $status
 *   Optional status of the groups to filter on, default published.
 * @param bool $sort
 *   Optional sort boolean (sort by group status).
 *
 * @return array|void
 *   An array with the groups or an empty array.
 */
function c4m_user_og_get_groups(
  $account = NULL,
  $bundle = 'group',
  $status = NODE_PUBLISHED,
  $sort = TRUE
) {
  $groups = og_get_groups_by_user($account);

  if (empty($groups)) {
    return array();
  }

  // Load groups of bundle type.
  $group_nodes = node_load_multiple($groups['node'], array('type' => $bundle));

  if (empty($group_nodes)) {
    return array();
  }

  // Sort groups by status.
  if ($sort && !empty($group_nodes)) {
    usort($group_nodes, 'c4m_sort_object_by_title');
    usort($group_nodes, '_c4m_og_sort_by_status');
  }

  return $group_nodes;
}

/**
 * Returns the amount of (group) contributors.
 *
 * @param int $og_id
 *   The Organic Group ID to eventually limit the query for.
 *
 * @return int
 *   The amount of contributors.
 */
function c4m_user_og_get_number_of_contributors($og_id = NULL) {
  $query = db_select('users', 'u');
  $query->join('node', 'n', 'n.uid = u.uid');
  $query->fields('u', array('uid'));
  $query->groupBy('u.uid');
  $query->condition('u.status', 1);
  $query->condition('n.status', 1);

  if (is_numeric($og_id)) {
    $query->join('og_membership', 'ogm', 'ogm.etid = n.nid');
    $query->condition('ogm.gid', (int) $og_id);
    $query->condition('ogm.entity_type', 'node');
  }

  return (int) $query->countQuery()->execute()->fetchField();
}

/**
 * Returns the amount of pending members in a group.
 *
 * @param int $og_id
 *   The Organic Group ID to limit the query for.
 *
 * @return int
 *   The amount of pending members of a group.
 */
function c4m_user_og_get_number_of_pending_members($og_id = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'og_membership');
  $query->propertyCondition('type', 'og_membership_type_default');
  $query->propertyCondition('entity_type', 'user');
  $query->propertyCondition('group_type', 'node');
  $query->propertyCondition('state', OG_STATE_PENDING);

  if (is_numeric($og_id)) {
    $query->propertyCondition('gid', $og_id);
  }

  return (int) $query->count()->execute();
}

/**
 * Returns the amount of active members in a group.
 *
 * @param int $og_id
 *   The Organic Group ID to limit the query for.
 *
 * @return int
 *   The amount of active members of a group.
 */
function c4m_user_og_get_number_of_active_members($og_id = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'og_membership');
  $query->propertyCondition('type', 'og_membership_type_default');
  $query->propertyCondition('entity_type', 'user');
  $query->propertyCondition('group_type', 'node');
  $query->propertyCondition('state', OG_STATE_ACTIVE);

  if (is_numeric($og_id)) {
    $query->propertyCondition('gid', $og_id);
  }

  return (int) $query->count()->execute();
}

/**
 * Returns the amount of contributors vs active members in a group.
 *
 * @param int $og_id
 *   The Organic Group ID to limit the query for.
 *
 * @return int
 *   The amount of contributors vs active members of a group.
 */
function c4m_user_og_get_number_of_contributors_vs_members($og_id) {
  $contributors = c4m_user_og_get_number_of_contributors($og_id);
  $active_members = c4m_user_og_get_number_of_active_members($og_id);

  if (is_numeric($contributors) && (is_numeric(
        $active_members
      ) && $active_members > 0)
  ) {
    $calculation = $contributors / $active_members;
    return empty($calculation) ? 0 : $calculation;
  }

  return 0;
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_user_og_c4m_content_statistics_info() {
  return array(
    'group' => array(
      'c4m_og_user' => array(
        'type' => 'user',
        'entity_type' => 'user',
        'bundles' => array(),
        'singular' => 'Member',
        'plural' => 'Members',
        'state' => 1,
        'c4m_status' => array(1),
        'scope' => 'group',
        'aggregate' => array(),
        'weight' => 7,
        'feature_name' => 'c4m_features_og_members',
        'attributes' => array(
          'class' => array('og-users'),
        ),
        'link' => array(
          'path' => 'members',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_user_og_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_og_contributors' => array(
      'type' => 'contributors',
      'context' => 'group',
      'callback' => 'c4m_user_og_get_number_of_contributors',
      'weight' => 9,
    ),
    'c4m_og_contributors_vs_pending_members' => array(
      'type' => 'contributors_vs_pending_members',
      'context' => 'group',
      'callback' => 'c4m_user_og_get_number_of_contributors_vs_pending_members',
      'weight' => 13,
    ),
    'c4m_og_pending_members' => array(
      'type' => 'pending_members',
      'context' => 'group',
      'callback' => 'c4m_user_og_get_number_of_pending_members',
      'weight' => 11,
    ),
    'c4m_og_users' => array(
      'type' => 'users',
      'context' => 'group',
      'callback' => 'c4m_og_group_user_metric',
      'weight' => 7,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function c4m_user_og_theme() {
  $theme['c4m_group_visitor_cta'] = array(
    'template' => 'c4m_group_visitor_cta',
    'path' => drupal_get_path('module', 'c4m_user_og') . '/templates',
    'variables' => array(
      'url' => NULL,
      'button_label' => NULL,
      'button_icon' => NULL,
      'login_url' => NULL,
    ),
  );

  $theme['c4m_group_text_cta'] = array(
    'template' => 'c4m_group_text_cta',
    'path' => drupal_get_path('module', 'c4m_user_og') . '/templates',
    'variables' => array(
      'text' => NULL,
      'icon' => NULL,
      'wrapper_class' => 'c4m-group-text-cta text-copy--small',
      'text_class' => NULL,
    ),
  );

  $theme['c4m_group_flag_cta'] = array(
    'template' => 'c4m_group_flag_cta',
    'path' => drupal_get_path('module', 'c4m_user_og') . '/templates',
    'variables' => array(
      'text' => NULL,
      'wrapper_class' => 'c4m-group-text-cta text-copy--small',
      'text_class' => NULL,
    ),
  );

  $theme['c4m_group_manage_cta'] = array(
    'template' => 'c4m_group_manage_cta',
    'path' => drupal_get_path('module', 'c4m_user_og') . '/templates',
    'variables' => array(
      'links' => NULL,
      'title' => NULL,
    ),
  );

  $theme['c4m_unified_workflow_register'] = array(
    'template' => 'c4m_unified_workflow_register',
    'path' => drupal_get_path('module', 'c4m_user_og') . '/templates',
    'variables' => array(
      'group_title' => NULL,
      'login_link' => NULL,
    ),
  );

  $theme['c4m_unified_workflow_login'] = array(
    'template' => 'c4m_unified_workflow_login',
    'path' => drupal_get_path('module', 'c4m_user_og') . '/templates',
    'variables' => array(
      'group_title' => NULL,
    ),
  );

  $theme['c4m_group_invite_cta'] = array(
    'template' => 'c4m_group_invite_cta',
    'path' => drupal_get_path('module', 'c4m_user_og') . '/templates',
    'variables' => array(
      'url' => NULL,
      'button_label' => NULL,
      'button_icon' => NULL,
    ),
  );

  return $theme;
}

/**
 * Implements hook_c4m_cta_block().
 */
function c4m_user_og_c4m_cta_block() {
  global $user;

  // Only add items if there is a group.
  if (!$group = c4m_og_current_group()) {
    return;
  }

  // A blocked (banned) user should not be able to see the CTA block.
  $user_role = c4m_user_og_get_role_in_group($user, $group);
  if ($user_role == 'blocked') {
    return;
  }

  $items = array();

  if ($item = c4m_user_og_group_management_cta($group)) {
    $items['management'] = $item;
  }

  if ($item = c4m_user_og_group_actions_cta($group)) {
    $items['actions'] = $item;
  }

  if ($group->type == 'group') {
    if ($item = c4m_user_og_c4m_join_cta($group)) {
      $items['join'] = $item;
    }
    if ($item = c4m_user_og_follow_group_cta($group)) {
      $items['follow'] = $item;
    }
    // Add a link to the CTA block
    // if the user is permitted to invite new members.
    if (!user_is_anonymous() && c4m_user_og_invite_access($group)) {
      $items['invite'] = c4m_user_og_c4m_invite_cta($group);
    }
  }

  return $items;
}

/**
 * Sets the CTA block for visitors.
 */
function c4m_user_og_c4m_visitor_cta($group) {
  $types = array(
    'open' => array(
      'button_label' => t('Join this group'),
      'button_icon' => 'fa-user-plus',
    ),
    'moderated' => array(
      'button_label' => t('Request membership for this group'),
      'button_icon' => 'fa-unlock-alt',
    ),
  );

  $login_link = l(t('log in'), 'user/login', array('query' => array('destination' => request_path())));
  $login_url = t('Please !login-link first if you have a C4D account', array('!login-link' => $login_link));

  if ($membership_request_value = c4m_og_get_group_membership_request($group)) {
    return array(
      '#theme' => 'c4m_group_visitor_cta',
      '#button_label' => $types[$membership_request_value]['button_label'],
      '#button_icon' => $types[$membership_request_value]['button_icon'],
      '#url' => url('group/join/' . $group->nid, array('absolute' => TRUE)),
      '#login_url' => $login_url,
      '#weight' => 10,
    );
  }
}

/**
 * Sets the different actions an user can do in the group.
 *
 * Includes: manage group, pending membership requests and draft content.
 */
function c4m_user_og_group_actions_cta($group) {
  $items = array();
  $access = c4m_og_get_access_type($group);
  global $user;

  if (!og_get_membership('node', $group->nid, 'user', $user->uid)) {
    return;
  }

  if ($access['type'] == 'public') {
    // CTAs for the group owner and administrators: Manage group and number or
    // new membership requests.
    if (_c4m_features_og_members_is_power_user($group, $user)) {
      $items['manage'] = array(
        '#theme' => 'c4m_group_text_cta',
        '#icon' => 'fa-cog',
        '#text' => l(t('Manage this group'), 'manage'),
      );

      if ($pending_requests = c4m_og_get_all_group_memberships_by_state($group->nid, OG_STATE_PENDING)) {
        $pending_id = $group->nid . '_pending';

        $link_text = format_plural(
          count($pending_requests),
          'There is <a href="@link">1 new membership</a> request',
          'There are <a href="@link">@requests new membership</a> requests',
          array(
            '@link' => url(
              'members',
              array('query' => array('f[0]' => 'c4m_og_membership_type:' . $pending_id))
            ),
            '@requests' => count($pending_requests),
          )
        );

        $items['memberships'] = array(
          '#theme' => 'c4m_group_text_cta',
          '#icon' => 'fa-user',
          '#text' => $link_text,
        );
      }
    }

    // CTAs for members of the group: Amount of unpublished content.
    $variables = array(
      'bundles' => array(
        'wiki_page',
        'photoalbum',
        'discussion',
        'event',
        'document',
      ),
      'state' => NODE_NOT_PUBLISHED,
      'entity_type' => 'node',
      'og_id' => $group->nid,
    );

    if ($unpublished_content = c4m_helper_entity_get_number_of_entities($variables)) {
      $items['new-content'] = array(
        '#theme' => 'c4m_group_text_cta',
        '#icon' => 'fa-exclamation-triangle',
        '#text' => t(
          'You have %count draft content items',
          array('%count' => $unpublished_content)
        ),
      );
    }
  }

  // Help & guidance.
  $items['help_guidance'] = array(
    '#theme' => 'c4m_group_text_cta',
    '#icon' => 'fa-question',
    '#text' => l(
      t('Help & guidance'),
      'help-guidance/help-guidance',
      array('purl' => array('disabled' => TRUE))
    ),
  );

  $items['#weight'] = 5;

  return $items;
}

/**
 * Sets the different CTA management links for a group.
 *
 * Currently contains the "Manage group" and "Edit membership" links.
 */
function c4m_user_og_group_management_cta($group) {
  $items = array();

  if (_c4m_features_og_members_is_power_user($group)) {
    $items['#title'] = t("You're the manager of this !group_type", array('!group_type' => $group->type));
  }
  elseif (og_is_member('node', $group->nid)) {
    $items['#title'] = t('You\'re a member of this !group_type', array('!group_type' => $group->type));
  }

  if ($item = c4m_user_og_c4m_leave_group_cta($group)) {
    $items['#links'][] = $item;
  }

  if (isset($items['#links'])) {
    $items['#theme'] = 'c4m_group_manage_cta';
    $items['#weight'] = 0;
  }

  return $items;
}

/**
 * Sets the join group link CTA.
 *
 * Sets the join group link CTA for logged in users that are not members
 * of the group yet.
 */
function c4m_user_og_c4m_join_cta($group) {
  if (og_is_member('node', $group->nid, 'user', NULL, array(OG_STATE_PENDING))) {
    $message = t("This is a moderated group. Your request is waiting for approval. Continue to explore group's content.");
    drupal_set_message($message);

    return array(
      '#theme' => 'c4m_group_text_cta',
      '#text' => t('Membership waiting approval'),
      '#icon' => 'fa-hourglass-end',
      '#wrapper_class' => 'c4m-wide-gothic-btn',
      '#text_class' => 'btn text-small',
    );
  }

  if (og_is_member('node', $group->nid)) {
    return;
  }

  return c4m_user_og_c4m_visitor_cta($group);
}

/**
 * Sets the Invite a member link CTA.
 *
 * Sets the Invite a member link CTA for any group member to invite other
 * existing users or new people to join the group.
 */
function c4m_user_og_c4m_invite_cta($group) {
  return array(
    '#theme' => 'c4m_group_invite_cta',
    '#button_label' => t('Invite a member'),
    '#button_icon' => 'fa-user-plus',
    '#url' => url(
      'group/node/' . $group->nid . '/admin/people/invite-users',
      array('absolute' => TRUE)
    ),
    '#weight' => 0,
  );
}

/**
 * Sets the CTA request membership link.
 */
function c4m_user_og_c4m_membership_cta($group) {
  // Default state for og_is_member is active.
  if (og_is_member('node', $group->nid)) {
    drupal_set_message(t('Welcome to group %group', array('%group' => $group->title)));
    return;
  }

  if (og_is_member('node', $group->nid, 'user', NULL, array(OG_STATE_PENDING))) {
    $message = t("This is a moderated group. Your request is waiting for approval. Continue to explore group's content.");
    drupal_set_message($message);

    return array(
      '#theme' => 'c4m_group_text_cta',
      '#text' => t('Membership waiting approval'),
      '#icon' => 'fa-hourglass-end',
      '#wrapper_class' => 'c4m-wide-gothic-btn',
      '#text_class' => 'btn text-small',
    );
  }

  return array(
    '#theme' => 'c4m_group_visitor_cta',
    '#button_label' => t('Request membership for this group'),
    '#button_icon' => 'fa-unlock-alt',
    '#url' => url(
      'group/node/' . $group->nid . '/subscribe',
      array('absolute' => TRUE)
    ),
  );
}

/**
 * Sets the CTA to leave a group.
 */
function c4m_user_og_c4m_leave_group_cta($group) {
  if (!og_is_member('node', $group->nid)) {
    return;
  }

  $link = 'group/node/' . $group->nid . '/unsubscribe';
  return array(
    '#theme' => 'c4m_group_text_cta',
    '#icon' => 'fa-user-plus',
    '#text' => l(t('Edit membership'), $link, array('absolute' => TRUE)),
  );
}

/**
 * Sets the CTA to follow or unfollow group notifications.
 *
 * For projects we should display this flag for all users, although for Groups
 * only members should be able to use it.
 *
 * @param object $group
 *   The group to follow (type might be 'group' or 'project').
 *
 * @return array|bool
 *   The settings for this flag, or FALSE if user should not see this.
 */
function c4m_user_og_follow_group_cta($group) {
  if ($group->type == 'group'  && !og_is_member('node', $group->nid)) {
    return FALSE;
  }

  $item = array(
    '#theme' => 'c4m_group_flag_cta',
    '#icon' => 'fa-bell-o',
    '#text' => flag_create_link('subscribe_c4m_follow_group', $group->nid),
    '#weight' => 50,
  );

  return $item;
}

/**
 * Implements hook_menu_alter().
 *
 * Alters the default unsubscription callback from OG to avoid group owners to
 * leave the group before transfering the control of it.
 */
function c4m_user_og_menu_alter(&$menu) {
  $menu['group/%/%/unsubscribe']['page callback'] = 'c4m_user_og_unsubscription_custom_callback';
}

/**
 * Custom page callback to prevent group owners to leave a group.
 */
function c4m_user_og_unsubscription_custom_callback($group_type, $gid) {
  $is_node = $group_type == 'node';
  $user_is_owner = c4m_og_user_is_owner('node', $gid);

  // If the group is not a node or the logged in user is not the owner of the
  // group we return the default OG menu callback.
  if (!$is_node || !$user_is_owner) {
    return og_ui_unsubscribe($group_type, $gid);
  }

  $message = t(
    "You can't leave the group if you are the owner. <a href=\"@link\">Transfer the ownership first.</a>",
    array('@link' => url('group/node/' . $gid . '/admin/owner'))
  );
  drupal_set_message($message, 'warning');

  $group = node_load($gid);
  $url = entity_uri($group_type, $group);
  drupal_goto($url['path']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_og_form_og_ui_confirm_unsubscribe_alter(
  &$form,
  &$form_state
) {
  $form['#submit'][] = 'c4m_user_og_custom_unsubscribe_submit';
}

/**
 * Custom submit callback for og_ui_confirm_unsubscribe.
 *
 * Unflags the user as following the group.
 */
function c4m_user_og_custom_unsubscribe_submit($form, &$form_state) {
  global $user;

  $group = $form_state['values']['group'];
  $flag = flag_get_flag('subscribe_c4m_follow_group');

  $flag->flag('unflag', $group->nid, $user, TRUE);
}

/**
 * Implements hook_menu().
 */
function c4m_user_og_menu() {
  $items['group/join/%node'] = array(
    'title' => 'Join group',
    'type' => MENU_CALLBACK,
    'page callback' => 'c4m_user_og_unified_workflow',
    'page arguments' => array(2),
    'access callback' => 'c4m_user_og_unified_workflow_access',
    'access arguments' => array(2),
    'file' => 'c4m_user_og.page.inc',
  );

  return $items;
}

/**
 * Access callback.
 *
 * Checks if user is banned from the requested group.
 *
 * @param object $group
 *   The group object.
 *
 * @return bool
 *   Access.
 */
function c4m_user_og_unified_workflow_access($group) {
  if (!og_context('node', $group)) {
    return FALSE;
  }

  if (c4m_og_user_is_banned($group->nid)) {
    return FALSE;
  }

  return node_access('view', $group);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_og_form_user_register_form_alter(
  &$form,
  &$form_state,
  $form_id
) {
  if (!isset($_SESSION['c4m_unified_workflow_gid_join']) || !$gid = $_SESSION['c4m_unified_workflow_gid_join']) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $gid);
  $variables = array(
    'group_title' => $wrapper->label(),
    'login_link' => l(t('Log in.'), 'user/login'),
  );
  drupal_set_title(
    theme('c4m_unified_workflow_register', $variables),
    PASS_THROUGH
  );

  $form['#submit'][] = 'c4m_user_og_unified_workflow_register_submit';
  $form['actions']['submit']['#value'] = t('Register to join');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_og_form_user_login_alter(&$form, &$form_state, $form_id) {
  if (!isset($_SESSION['c4m_unified_workflow_gid_join']) || !$gid = $_SESSION['c4m_unified_workflow_gid_join']) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $gid);
  drupal_set_title(
    theme(
      'c4m_unified_workflow_login',
      array('group_title' => $wrapper->label())
    ),
    PASS_THROUGH
  );

  $form['#submit'][] = 'c4m_user_og_unified_workflow_login_submit';
  $form['actions']['submit']['#value'] = t('Login to join');
}

/**
 * A submit handler for the unified workflow (registration).
 *
 * Setting a message to the user and redirect back to the group.
 */
function c4m_user_og_unified_workflow_register_submit($form, &$form_state) {
  if (!isset($_SESSION['c4m_unified_workflow_gid_join']) || !$gid = $_SESSION['c4m_unified_workflow_gid_join']) {
    return;
  }

  $group = node_load($gid);
  // Removing the original message of the user_register_form.
  drupal_get_messages('status');
  $message = t(
    'Hey @name, thank you for submitting your details. Please activate your account by clicking the link sent to your e-mail to join the @group_title group.',
    array(
      '@name' => c4m_user_name($form_state['user']),
      '@group_title' => $group->title,
    )
  );

  drupal_set_message($message);
  $form_state['redirect'] = drupal_get_path_alias('node/' . $gid);

  // Store the group ID + user ID in the database after registration completes.
  c4m_user_og_store_unified_workflow($form_state['user']->uid, $gid);

  // drupal_goto has a fallback to the 'destination' so we must remove it.
  unset($_GET['destination']);

  // User is registered, and the variable is now stored in the database, the
  // session variable should be destroyed.
  unset($_SESSION['c4m_unified_workflow_gid_join']);
}

/**
 * A submit handler for the unified workflow (login).
 *
 * Setting a message to the user and redirect back to the group.
 */
function c4m_user_og_unified_workflow_login_submit($form, &$form_state) {
  if (!isset($_SESSION['c4m_unified_workflow_gid_join']) || !$gid = $_SESSION['c4m_unified_workflow_gid_join']) {
    return;
  }

  $group = node_load($gid);

  // Associate the user to the group after login.
  c4m_user_og_group_unified_workflow($group);

  $form_state['redirect'] = drupal_get_path_alias('node/' . $gid);

  // drupal_goto has a fallback to the 'destination' so we must remove it.
  unset($_GET['destination']);

  // User is logged in, the session variable should be destroyed.
  unset($_SESSION['c4m_unified_workflow_gid_join']);
}

/**
 * Associate a user to a group for unified workflow.
 *
 * Also sets a message depending on the group context.
 *
 * @param object $group
 *   The object of the group.
 * @param bool $account
 *   The object of the user.
 *
 * @see og_group()
 */
function c4m_user_og_group_unified_workflow($group, $account = FALSE) {
  $membership_request_value = c4m_og_get_group_membership_request($group);
  $values = array(
    'state' => $membership_request_value == 'open' ? OG_STATE_ACTIVE : OG_STATE_PENDING,
    'entity' => $account,
  );

  if (!og_group('node', $group, $values)) {
    drupal_set_message(
      t('A problem occurred trying to join the group.'),
      'error'
    );
    return;
  }
  else {
    if ($membership_request_value == 'open') {
      drupal_set_message(t('Welcome to group %group', array('%group' => $group->title)));
    }
  }
}

/**
 * Implements hook_mail_alter().
 */
function c4m_user_og_mail_alter(&$message) {
  if ($message['id'] != 'user_registrationpassword_register') {
    return;
  }

  $user = user_load_by_mail($message['to']);
  if (!isset($_SESSION['c4m_unified_workflow_gid_join']) || !$gid = $_SESSION['c4m_unified_workflow_gid_join']) {
    if (!$results = c4m_user_og_fetch_unified_workflow_entries($user->uid)) {
      return;
    }
    $gid = reset($results)->gid;
  }

  $group = node_load($gid);
  $path = drupal_get_path('module', 'c4m_user_og');

  $text = file_get_contents(
    $path . '/messages/user_registrationpassword_register_to_group_body.html'
  );
  $variables = array(
    'group' => $group,
    'user' => $user,
  );

  $site_name = variable_get('site_name');
  $message['subject'] = "Activate your " . $site_name . " account\n";
  $message['from'] = format_string(
    '"The @site team"<@mail>',
    array(
      '@site' => $site_name,
      '@mail' => 'capacity4dev@ec.europa.eu',
    )
  );

  $message['body'] = array(
    token_replace(
      $text,
      $variables,
      array(
        'language' => user_preferred_language($user),
        'callback' => 'c4m_user_og_mail_tokens',
        'sanitize' => FALSE,
        'clear' => TRUE,
      )
    ),
  );
}

/**
 * Store a group ID + user ID in the database.
 *
 * @param string $uid
 *   The user ID.
 * @param string $gid
 *   The group ID.
 */
function c4m_user_og_store_unified_workflow($uid, $gid) {
  try {
    db_insert('c4m_unified_workflow')
      ->fields(
        array(
          'uid' => $uid,
          'gid' => $gid,
        )
      )
      ->execute();
  }
  catch (PDOException $e) {
    // Duplicated entry.
    watchdog('c4m_unified_workflow', $e->errorInfo[2], array(), WATCHDOG_ERROR);
  }
}

/**
 * Fetch the entries for a specific user.
 *
 * @param string $uid
 *   The user ID.
 *
 * @return array
 *   Array with the entries.
 */
function c4m_user_og_fetch_unified_workflow_entries($uid) {
  return db_select('c4m_unified_workflow', 'uw')
    ->fields('uw')
    ->condition('uid', $uid)
    ->execute()
    ->fetchAll();
}

/**
 * Fetch the entries for a specific user.
 *
 * @param string $uid
 *   The user ID.
 *
 * @return bool
 *   TRUE if deleted the entries, FALSE otherwise.
 */
function c4m_user_og_delete_unified_workflow_entries($uid) {
  return db_delete('c4m_unified_workflow')
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * @see c4m_content_group_mail_tokens()
 * @see user_registrationpassword_mail_tokens()
 */
function c4m_user_og_mail_tokens(array &$replacements, array $data, $options) {
  c4m_content_group_replace_mail_tokens($replacements, $data, $options);
  user_registrationpassword_mail_tokens($replacements, $data, $options);

  // Adding destination to the link in order to redirect to the group page
  // after the activation.
  $replacements['[user:registrationpassword-url]'] .= '?destination=' . drupal_get_path_alias(
      'node/' . $data['group']->nid
    );
}

/**
 * Implements hook_user_update().
 */
function c4m_user_og_user_update(&$edit, $account, $category) {
  if ($account->original->status || !$account->status) {
    return;
  }

  // Associate the user to the group.
  foreach (c4m_user_og_fetch_unified_workflow_entries(
             $account->uid
           ) as $entry) {
    $group = node_load($entry->gid);
    c4m_user_og_group_unified_workflow($group, $account);
  }

  // Destroy the entry of this account.
  c4m_user_og_delete_unified_workflow_entries($account->uid);
}

/**
 * Check current user permission to invite new members to the group.
 *
 * SA, GO and GA can always invite to the group. GM can only invite to Open
 * groups (either public or restricted) but not to moderated or private groups.
 *
 * @param object $group
 *   (optional) The group object, if not given then the current group will take
 *    place.
 *
 * @return bool
 *   TRUE if the current user has access to invite people to a group.
 */
function c4m_user_og_invite_access($group = NULL) {
  global $user;

  // If a group was not provided, try to get the current group.
  if (!$group) {
    if (!$group = c4m_og_current_group()) {
      return FALSE;
    }
  }

  // SAs, GOs and GAs can invite new members.
  if (_c4m_features_og_members_is_power_user($group)) {
    return TRUE;
  }

  // Get request type (open/moderated).
  $membership_request_value = c4m_og_get_group_membership_request($group);
  // Get access type (public/private).
  $access_type = c4m_og_get_access_type($group);

  // For private or moderated groups, return false. Else check for member.
  if ($access_type['type'] == 'private' || $membership_request_value == 'moderated') {
    return FALSE;
  }

  return og_is_member('node', $group->nid, 'user', $user);
}
