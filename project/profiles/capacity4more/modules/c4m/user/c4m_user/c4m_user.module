<?php

/**
 * @file
 * Code for the C4M user feature.
 */

include_once 'c4m_user.features.inc';

/**
 * Define fields.
 *
 * These fields are not overridden through the interface.
 * If you want those, look at hook_ds_custom_fields_info().
 *
 * @param string $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return array
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function c4m_user_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_user');
  $image_styles = array();
  foreach (image_styles() as $image_style_id => $image_style) {
    $image_styles[$image_style_id] = $image_style['label'];
    $image_styles['linked_' . $image_style_id] = $image_style['label'] . ' ' .
      t('linked to profile');
  }

  // Fields for entity type user.
  $fields['user']['c4m_user_member_since'] = array(
    'title' => t('C4M member since'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_member_since',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['user']['c4m_user_activity_summary'] = array(
    'title' => t('C4M member activity summary'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_activity_summary',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['user']['c4m_user_activity_posts'] = array(
    'title' => t('C4M member count posts'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_activity_posts',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['user']['c4m_user_activity_comments'] = array(
    'title' => t('C4M member count comments'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_activity_comments',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['user']['c4m_user_picture'] = array(
    'title' => t('C4M user picture'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_picture',
    'properties' => array('formatters' => $image_styles),
  );

  $fields['user']['c4m_user_first_and_last_name'] = array(
    'title' => t('C4M User first and last name'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_first_and_last_name',
    'properties' => array(
      'formatters' => array(
        'user' => 'User first and last name',
        'linked_user' => 'User first and last name linked to profile',
      ),
    ),
  );

  $fields['user']['c4m_user_country'] = array(
    'title' => t('C4M User country'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_country',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['user']['c4m_user_organisation_full'] = array(
    'title' => t('User organisation with organisation type'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_organisation_full',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  $fields['user']['c4m_user_contact_link'] = array(
    'title' => t('C4M User contact link'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('*|*'),
    'file' => $path . '/includes/c4m_user.theme.inc',
    'function' => 'theme_c4m_user_contact_link',
  );

  // User related fields for entity type node.
  $fields['node']['c4m_user_picture'] = $fields['user']['c4m_user_picture'];
  $fields['node']['c4m_user_first_and_last_name']
    = $fields['user']['c4m_user_first_and_last_name'];

  // User related fields for entity type comment.
  $fields['comment']['c4m_user_picture'] = $fields['user']['c4m_user_picture'];
  $fields['comment']['c4m_user_first_and_last_name']
    = $fields['user']['c4m_user_first_and_last_name'];

  return $fields;
}

/**
 * Helper function to render C4M user image based on a user entity.
 *
 * @param object $user
 *    The user object.
 * @param string $style
 *    The image style name.
 *
 * @return string
 *    Rendered link with image inside.
 */
function c4m_user_image($user, $style = NULL) {
  $output = '';
  $wrapper = entity_metadata_wrapper('user', $user);
  $file = $wrapper->c4m_media->value();
  if (!empty($file)) {
    $file['style_name'] = empty($style) ? 'media_thumbnail' : $style;
    $file['path'] = $file['uri'];
    $file['attributes'] = array('class' => 'user-image');
    $img = theme_image_style($file);
    $output = l($img, 'user/' . $user->uid, array('html' => 'TRUE'));
  }

  return $output;
}

/**
 * Return the themed initials (max 2) of a user's full name.
 *
 * @param object $account
 *    The user object.
 * @param mixed $linked
 *    Whether or not to wrap the output in a link.
 *
 * @return string
 *    Rendered html.
 */
function c4m_user_initials_themed($account, $linked = TRUE) {
  $initials = c4m_user_initials($account);
  static $colors;

  if (empty($colors)) {
    $colors = _c4m_user_initials_colors();
  }

  if ($linked) {
    $output = l($initials, 'user/' . $account->uid);
  }
  else {
    $output = '<span class="inner-initials">' . $initials . '</span>';
  }

  // Map initials to an array index (0 - 10).
  // Hash it so they ALWAYS map on the same color.
  $crc_hash = crc32($initials);
  $crc_rest = $crc_hash % 11;

  $tag = array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array(
        'class' => array(
          'no-avatar',
          'initials',
          'bg-' . $colors[$crc_rest],
        ),
      ),
      '#value' => $output,
    ),
  );

  return theme_html_tag($tag);
}

/**
 * Return the initials (max 2) of a user's full name.
 *
 * @param object $account
 *    The user object.
 *
 * @return string
 *    The initials (max 2) of user's full name.
 */
function c4m_user_initials($account) {
  $name = c4m_user_name($account);
  $words = preg_split("/[\s,_-]+/", $name);
  $initials = '';

  foreach ($words as $w) {
    $initials .= $w[0];
  }

  return substr($initials, 0, 2);
}

/**
 * Helper function to render user first and last name in one string.
 *
 * Using the user entity to get the needed info.
 *
 * @param object $user
 *    The user object.
 *
 * @return string
 *    The first and last name.
 */
function c4m_user_name($user) {
  $wrapper = entity_metadata_wrapper('user', $user);

  if ($user->uid == 0) {
    return t('Anonymous');
  }

  $fullname = trim($wrapper->c4m_first_name->value()) . ' '
    . trim($wrapper->c4m_last_name->value());

  if (!trim($fullname)) {
    $fullname = $user->name;
  }

  return trim($fullname);
}

/**
 * Get some background classes (random colors).
 *
 * @return array
 *    Array with colors.
 */
function _c4m_user_initials_colors() {
  return array(
    'dark-navy',
    'pastel-pink',
    'beige',
    'brown',
    'brown-light',
    'blue',
    'salmon',
    'pastel-orange',
    'green',
    'green-light',
    'pink-dark',
  );
}

/**
 * Implements hook_action_info().
 */
function c4m_user_action_info() {
  module_load_include('inc', 'c4m_user', 'actions/c4m_user_contact.action');
  return c4m_user_contact_action_info();
}

/**
 * Implements hook_mail().
 *
 * Set's the message subject and body as configured.
 */
function c4m_user_mail($key, &$message, $params) {
  $message['subject'] .= str_replace(array("\r", "\n"), '', $params['subject']);
  $message['body'][] = $params['body'];
}

/**
 * Implements hook_theme().
 */
function c4m_user_theme() {
  $theme['c4m_user_views_bulk_operations_confirmation'] = array(
    'variables' => array(
      'rows' => NULL,
      'vbo' => NULL,
      'operation' => NULL,
      'select_all_pages' => FALSE,
    ),
  );

  return $theme;
}

/**
 * Implements hook_views_api().
 */
function c4m_user_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'c4m_user'),
    'template path' => drupal_get_path(
        'module',
        'c4m_user'
    ) . DIRECTORY_SEPARATOR . 'templates',
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function c4m_user_theme_registry_alter(&$theme_registry) {
  // Replace the theming of the Views Bulk Operation confirmation form.
  $theme_registry['views_bulk_operations_confirmation']['function']
    = 'theme_c4m_user_views_bulk_operations_confirmation';
}

/**
 * Theme function to show the confirmation page before executing the operation.
 */
function theme_c4m_user_views_bulk_operations_confirmation($variables) {
  $select_all_pages = $variables['select_all_pages'];
  $vbo = $variables['vbo'];
  $entity_type = $vbo->get_entity_type();
  $rows = $variables['rows'];
  $items = array();
  // Load the entities from the current page, and show their titles.
  $entities = _views_bulk_operations_entity_load(
    $entity_type,
    array_values($rows),
    $vbo->revision
  );
  foreach ($entities as $entity) {
    $items[] = 'user' == $entity_type ? c4m_user_name($entity) :
      check_plain(entity_label($entity_type, $entity));
  }
  // All rows on all pages have been selected,
  // so show a count of additional items.
  if ($select_all_pages) {
    $more_count = $vbo->view->total_rows - count($vbo->view->result);
    $items[] = t('...and %count more.', array('%count' => $more_count));
  }
  $item_text = 'user' == $entity_type ? t('user') : t('item');

  $count = format_plural(
    count($entities),
    $item_text,
    '@count ' . $item_text . 's'
  );

  $title = '';
  switch ($variables['operation']->id()) {
    case 'action::c4m_user_contact_action':
      // Count already escaped by format_plural().
      $title = t('You selected @count to contact:', array('@count' => $count));
      break;
  }

  $output = theme('item_list', array('items' => $items, 'title' => $title));
  return $output;
}

/**
 * Get the number of posts (nodes) for the given user.
 *
 * @param int $uid
 *   The User ID.
 *
 * @return int
 *    Number of posts.
 */
function c4m_user_count_nodes($uid) {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->condition('n.status', 1)
    ->condition('n.uid', (int) $uid);

  return (int) $query->countQuery()->execute()->fetchField();
}

/**
 * Get the number of comments for the given user.
 *
 * @param int $uid
 *   The User ID.
 *
 * @return int
 *    Number of comments.
 */
function c4m_user_count_comments($uid) {
  $query = db_select('comment', 'c');
  $query->join('node', 'n', 'c.nid = n.nid');
  $query->fields('c', array('cid'))
    ->condition('c.status', 1)
    ->condition('n.status', 1)
    ->condition('c.uid', (int) $uid);

  return (int) $query->countQuery()->execute()->fetchField();
}

/**
 * Mark a user for re-indexing.
 *
 * @param int $uid
 *   The User ID of the user that needs to be re-indexed.
 */
function c4m_user_track_change($uid) {
  search_api_track_item_change('user', array($uid));
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_user_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_user' => array(
        'type' => 'user',
        'entity_type' => 'user',
        'bundles' => NULL,
        'singular' => 'Member',
        'plural' => 'Members',
        'state' => 1,
        'aggregate' => array(),
        'weight' => 5,
        'attributes' => array(
          'class' => array('users'),
        ),
        'link' => array(
          'path' => 'people',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_user' => array(
        'type' => 'user',
        'entity_type' => 'user',
        'bundles' => NULL,
        'singular' => 'Expert',
        'plural' => 'Experts',
        'state' => 1,
        'aggregate' => array(),
        'weight' => 10,
        'attributes' => array(
          'class' => array('topic-users'),
        ),
        'link' => array(
          'path' => 'people',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic_expertise:@TOPIC_ID',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_user_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_user_organisations' => array(
      'type' => 'organisations',
      'context'  => 'user',
      'callback' => 'c4m_user_get_organisations',
    ),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function c4m_user_entity_property_info_alter(&$info) {
  $info['user']['properties']['c4m_user_contributions'] = array(
    'type' => 'integer',
    'label' => t(
      'Total number of contributions of the user (posts + comments)'
    ),
    'sanitized' => TRUE,
    'getter callback' => '_c4m_user_contributions_getter_callback',
  );
}

/**
 * Getter callback for `c4m_user_contributions` user property.
 *
 * @param object $item
 *   Drupal user entity object.
 *
 * @return int
 *   Total number of contributions of the user.
 */
function _c4m_user_contributions_getter_callback($item) {
  $comments = _c4m_user_get_comment_count($item);
  $nodes = _c4m_user_get_node_count($item);

  return $comments + $nodes;
}

/**
 * Helper function to retrieve the number of comments a user made.
 *
 * @param object $user
 *   Drupal user entity object.
 *
 * @return int
 *   Number of comments by this user.
 */
function _c4m_user_get_comment_count($user) {
  $query = db_select('comment', 'c');
  $query->condition('uid', $user->uid, '=');
  $query->addExpression('COUNT(cid)', 'comments_count');
  $result = $query->execute();

  if ($record = $result->fetchAssoc()) {
    return $record['comments_count'];
  }

  return 0;
}

/**
 * Helper function to retrieve the number of nodes a user created.
 *
 * @param object $user
 *   Drupal user entity object.
 *
 * @return int
 *   Number of posts by this user.
 */
function _c4m_user_get_node_count($user) {
  $query = db_select('node', 'n');
  $query->condition('uid', $user->uid);
  $query->condition('status', 1);
  $query->addExpression('COUNT(nid)', 'posts_count');
  $result = $query->execute();

  if ($record = $result->fetchAssoc()) {
    return $record['posts_count'];
  }

  return 0;
}

/**
 * Implements hook_menu().
 */
function c4m_user_menu() {
  $items['admin/config/c4m/ldap'] = array(
    'title' => 'Manage LDAP',
    'description' => 'Manage LDAP service and integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_user_admin_ldap_configuration'),
    'access arguments' => array('administer site configuration'),
    'file' => 'c4m_user.admin.inc',
  );

  $items['admin/config/c4m/ldap/configuration'] = array(
    'title' => 'Configuration',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/c4m/ldap/test'] = array(
    'title' => 'Test',
    'description' => 'Test LDAP service and integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_user_admin_ldap_test'),
    'access arguments' => array('administer site configuration'),
    'file' => 'c4m_user.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/c4m/organisation-validator'] = array(
    'title' => 'Test organisation mails',
    'description' => "Test email addresses vs organisations.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_user_admin_email_domain_organisation_test'),
    'access arguments' => array('administer site configuration'),
    'file' => 'c4m_user.admin.inc',
  );

  // Callbacks to provide tailored access denied behaviour.
  $items['access-denied'] = array(
    'title' => 'Please log in to continue',
    'page callback' => 'c4m_user_access_denied',
    'access callback' => 'user_is_anonymous',
  );
  $items['access-denied/login'] = array(
    'title' => 'Log in',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['access-denied/register'] = array(
    'title' => 'Create new account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_register_form'),
    'access callback' => 'user_register_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['access-denied/password'] = array(
    'title' => 'Request new password',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_pass'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'user'),
    'file' => 'user.pages.inc',
  );

  return $items;
}

/**
 * Callback providing tailored access denied behaviour.
 */
function c4m_user_access_denied() {
  if (user_is_anonymous()) {
    // Display login form for anonymous users.
    $form = drupal_get_form('user_login');
    return $form;
  }
  else {
    // Access denied message for authenticated users.
    drupal_access_denied();
    drupal_exit();
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Make the user/%user/contact page just a callback.
 */
function c4m_user_menu_alter(&$items) {
  $items['user/login'] = array(
    'title' => 'Please log in to continue',
  );
  $items['user/%user/contact'] = array(
    'type' => MENU_CALLBACK,
  );
}

/**
 * Implements hook_block_info().
 */
function c4m_user_block_info() {
  $blocks = array();

  $blocks['c4m_block_contact_members'] = array(
    'info' => t('User: contact members'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_user_block_view($delta) {
  $module = 'c4m_user';

  module_load_include('inc', $module, $module . '.block');
  $callback = "_{$module}_block_" . $delta;
  if (function_exists($callback)) {
    return $callback();
  }

  return array();
}

/**
 * Updates the user information based on LDAP and Organisation information.
 *
 * Callers might provide the email domain so that we don't have to query the db
 * to get the email domain either by domain or whitelist.
 *
 * @param object $account
 *   User account.
 * @param string|object $domain
 *   (optional) Email domain object. If NULL LDAP info should be removed.
 * @param string|object $whitelist_domain
 *   (optional) Email domain object. If NULL LDAP info should be removed.
 */
function c4m_user_update_information($account, $domain = '', $whitelist_domain = '') {
  $edit = array();

  $domain_user = new C4mDomainUser($account->mail);
  // Whitelist addresses should be found in domains list but may not be present
  // in LDAP.
  if (isset($domain) && ($domain || $domain = $domain_user->getEmailDomainByName())) {
    $ldap = new C4mLDAPUser();
    if ($ldap->isUp()) {
      $info = $ldap->getInfo($account->mail);
      if ($info && !empty($info['valid'])) {
        if ($info['country']) {
          $edit['c4m_country'][LANGUAGE_NONE]['0']['value'] = $info['country'];
        }
        if ($info['dg']) {
          $edit['c4m_organisation'][LANGUAGE_NONE]['0']['value'] = $info['dg'];
        }
        if (empty($edit['c4m_organisation'][LANGUAGE_NONE]['0']['value']) && $domain->organisation_name) {
          $edit['c4m_organisation'][LANGUAGE_NONE]['0']['value'] = $domain->organisation_name;
        }
        $edit['c4m_is_ldap_user'][LANGUAGE_NONE]['0']['value'] = 1;
        $edit['c4m_is_invalid_email'][LANGUAGE_NONE]['0']['value'] = 0;
      }
      elseif (isset($whitelist_domain) && ($whitelist_domain || $whitelist_domain = $domain_user->getEmailDomainByWhitelist())) {
        if ($whitelist_domain->organisation_name) {
          $edit['c4m_organisation'][LANGUAGE_NONE]['0']['value'] = $whitelist_domain->organisation_name;
        }
        $edit['c4m_is_ldap_user'][LANGUAGE_NONE]['0']['value'] = 2;
        $edit['c4m_is_invalid_email'][LANGUAGE_NONE]['0']['value'] = 0;
      }
    }
  }

  // If the user is not validated in LDAP and had previous LDAP validation add
  // the flag.
  if (empty($edit['c4m_is_ldap_user'][LANGUAGE_NONE]['0']['value']) && !empty($account->c4m_is_ldap_user[LANGUAGE_NONE]['0']['value'])) {
    $edit['c4m_is_ldap_user'][LANGUAGE_NONE]['0']['value'] = 0;
    $edit['c4m_is_invalid_email'][LANGUAGE_NONE]['0']['value'] = 1;
    $edit['c4m_organisation'][LANGUAGE_NONE] = array();
    $edit['c4m_country'][LANGUAGE_NONE] = array();
  }

  $organisation_user = new C4mOrganisationUser($account->mail);
  if ($organisations = $organisation_user->getOrganisationsInfo()) {
    $organisation = array_shift($organisations);
    $organisation = entity_metadata_wrapper('node', $organisation);
    if ($organisation->c4m_organisation_type->value()) {
      $edit['c4m_organisation_type'][LANGUAGE_NONE]['0']['value'] = $organisation->c4m_organisation_type->value();
    }
    if (empty($edit['c4m_organisation'][LANGUAGE_NONE]['0']['value'])) {
      $edit['c4m_organisation'][LANGUAGE_NONE]['0']['value'] = $organisation->title->value();
    }
    $edit['c4m_is_organisation_user'][LANGUAGE_NONE]['0']['value'] = 1;
  }
  elseif (!empty($account->c4m_is_organisation_user[LANGUAGE_NONE]['0']['value'])) {
    $edit['c4m_is_organisation_user'][LANGUAGE_NONE]['0']['value'] = 0;
    // Organisation was not set in previous steps.
    if (empty($edit['c4m_organisation'])) {
      $edit['c4m_organisation'][LANGUAGE_NONE] = array();
    }
    $edit['c4m_organisation_type'][LANGUAGE_NONE] = array();
  }

  if ($edit) {
    user_save($account, $edit);
  }
}

/**
 * Implements hook_user_presave().
 *
 * Force a user to be blocked if it's deleted or spammer.
 */
function c4m_user_user_presave(&$edit, $account, $category) {
  global $user;

  $spammer = FALSE;
  if (isset($edit['c4m_is_spammer'][LANGUAGE_NONE][0]['value'])) {
    $spammer = $edit['c4m_is_spammer'][LANGUAGE_NONE][0]['value'];
  }
  elseif (isset($account->c4m_is_spammer[LANGUAGE_NONE][0]['value'])) {
    $spammer = $account->c4m_is_spammer[LANGUAGE_NONE][0]['value'];
  }

  $deleted = FALSE;
  if (isset($edit['c4m_is_deleted'][LANGUAGE_NONE][0]['value'])) {
    $deleted = $edit['c4m_is_deleted'][LANGUAGE_NONE][0]['value'];
  }
  elseif (isset($account->c4m_is_deleted[LANGUAGE_NONE][0]['value'])) {
    $deleted = $account->c4m_is_deleted[LANGUAGE_NONE][0]['value'];
  }

  if (!empty($deleted) || !empty($spammer)) {
    // Show alert if an admin editing an user and his status is active.
    if ($user->uid != $account->uid && !empty($edit['status'])) {
      drupal_set_message(
        t('Deleted users or spammers cannot have active accounts.'),
        'error'
      );
    }
    $edit['status'] = 0;
  }
}

/**
 * Implements hook_c4m_captcha_form_info().
 */
function c4m_user_c4m_captcha_form_info() {
  return array(
    'user_pass',
  );
}

/**
 * Implements hook_user_login().
 */
function c4m_user_user_login(&$edit, $account) {
  c4m_user_update_information($account);

  if (!empty($account->c4m_is_invalid_email[LANGUAGE_NONE][0]['value'])) {
    // $edit is the actual $form_state.
    $edit['redirect'] = 'user/' . $account->uid . '/edit';
    // We always have destination set for the login form and this overrides in
    // drupal_goto the path set above so we have to unset the destination.
    unset($_GET['destination']);
  }
}

/**
 * Implements hook_cron().
 */
function c4m_user_cron() {
  module_load_include('inc', 'c4m_user', 'c4m_user.cron');
  _c4m_user_cron();
}

/**
 * Implements hook_cron_queue_info().
 */
function c4m_user_cron_queue_info() {
  $queues = array();
  $queues['c4m_user'] = array(
    'worker callback' => 'c4m_user_queue_process_user',
    'time' => 30,
  );

  return $queues;
}

/**
 * Callback for c4m_user Drupal Queue.
 */
function c4m_user_queue_process_user($item) {
  $account = user_load($item);
  c4m_user_update_information($account);
}

/**
 * Implements hook_entity_type_presave().
 */
function c4m_user_c4m_domain_presave($entity) {
  // Construct the list of emails to be updated in $email_list.
  if (isset($entity->original)) {
    // When editing, the list contains the addresses new or deleted to / from
    // the whitelist.
    $new_emails = array_diff($entity->whitelist, $entity->original->whitelist);
    $deleted_emails = array_diff($entity->original->whitelist, $entity->whitelist);
  }
  else {
    $new_emails = $entity->whitelist;
    $deleted_emails = array();
  }

  if ($new_emails) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'user')
      ->propertyCondition('mail', $new_emails, 'IN')
      ->execute();
    if (!isset($result['user'])) {
      return;
    }
    $accounts = array_keys($result['user']);
    foreach ($accounts as $account_id) {
      c4m_user_update_information(user_load($account_id), '', $entity);
    }
  }

  if ($deleted_emails) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'user')
      ->propertyCondition('mail', $deleted_emails, 'IN')
      ->execute();
    if (!isset($result['user'])) {
      return;
    }
    $accounts = array_keys($result['user']);
    foreach ($accounts as $account_id) {
      c4m_user_update_information(user_load($account_id), '', NULL);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Using hook_form_user_login_alter().
 */
function c4m_user_form_user_login_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'c4m_user_login_validate_spammer_check';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Using hook_form_user_login_block_alter().
 */
function c4m_user_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'c4m_user_login_validate_spammer_check';
}

/**
 * User login validation function to check for a spammer user.
 *
 * In case a spammer user tries to login, a message will be shown the user
 * must contact an administrator.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 */
function c4m_user_login_validate_spammer_check($form, &$form_state) {
  if (!isset($form_state['uid']) || !is_numeric($form_state['uid'])) {
    return;
  }

  $uid = $form_state['uid'];

  if (c4m_user_is_spammer($uid)) {
    // Clear errors.
    form_clear_error();
    // Clear error messages.
    drupal_get_messages('error');
    // Set form error.
    form_set_error('name', t('This account has been blocked, for more information please <a href="@link">contact</a> an administrator.', array('@link' => url('contact'))));
  }
}

/**
 * Checks if a given user is set as spammer or not.
 *
 * @param object | integer $user
 *   The user object or user ID.
 *
 * @return bool
 *   Returns whether a user is marked as spammer or not.
 */
function c4m_user_is_spammer($user) {
  if (is_numeric($user)) {
    $user = user_load($user);
  }

  if (is_object($user) && isset($user->uid)) {
    $user_wrapper = entity_metadata_wrapper('user', $user);

    if ($user_wrapper->c4m_is_spammer->value()) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Get all inactive users that have never logged in.
 *
 * Excluding the anonymous and admin users.
 *
 * @return array
 *   All inactive users objects.
 */
function c4m_user_get_inactive_users() {
  $query = db_select('users', 'u');
  $query->fields('u', array('uid', 'status', 'login', 'created'))
    // Inactive user.
    ->condition('u.status', 0)
    // Never logged in.
    ->condition('u.login', 0)
    // Not anonymous user.
    ->condition('u.uid', 0, '<>')
    // Not admin user.
    ->condition('u.uid', 1, '<>');

  $results = $query->execute()->fetchAllKeyed(0, 0);

  if (!$results) {
    return array();
  }

  return user_load_multiple($results);
}

/**
 * Returns the organisations of an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return string
 *   Organisations.
 */
function c4m_user_get_organisations($uid) {
  $account = user_load($uid);

  $show_organisations = FALSE;

  $domain_user = new C4mDomainUser($account->mail);
  // Show domains only if the user is validated in LDAP, or is present in a
  // whitelist or the domain is not a registered email domain.
  if ($domain = $domain_user->getEmailDomainByName()) {
    $ldap = new C4mLDAPUser();
    if ($ldap->isUp()) {
      $info = $ldap->getInfo($account->mail);
      if ($info && !empty($info['valid'])) {
        $show_organisations = TRUE;
      }
      elseif ($whitelist_domain = $domain_user->getEmailDomainByWhitelist()) {
        $show_organisations = TRUE;
      }
    }
  }
  else {
    $show_organisations = TRUE;
  }

  $output = '';
  if ($show_organisations) {
    $organisation_user = new C4mOrganisationUser($account->mail);
    if ($list = $organisation_user->getOrganisationsInfo()) {
      $organisations = array();
      foreach ($list as $organisation) {
        $organisations[] = $organisation->title;
      }
      $output = implode(', ', $organisations);
    }
  }

  return $output;
}

/**
 * Returns the amount of nodes that belong to a user of the specified bundles.
 *
 * @param int $uid
 *   The user ID to gather the metrics for.
 * @param array $bundles
 *   The bundles to query for.
 *
 * @return int
 *   The amount of nodes.
 */
function c4m_user_get_node_metric($uid, $bundles) {
  $arguments = array(
    'entity_type' => 'node',
    'bundles' => $bundles,
    'state' => NODE_PUBLISHED,
    'uid' => $uid,
  );

  return c4m_helper_entity_get_number_of_entities($arguments);
}

/**
 * Implements hook_TYPE_alter().
 *
 * Using hook_c4m_offcanvas_trigger_label_left_alter().
 */
function c4m_user_c4m_offcanvas_trigger_label_left_alter(&$trigger_label) {
  if (arg(0) == 'people' && empty(arg(1))) {
    $trigger_label['label'] = t('Filter results');
    $trigger_label['icon'] = 'filter';
  }
}

/**
 * Implements hook_ckeditor_settings_alter().
 *
 * Remove media button for anonymous users.
 */
function c4m_user_ckeditor_settings_alter(&$settings, $conf) {
  if (user_is_anonymous() && isset($settings['loadPlugins']['media'])) {
    unset($settings['loadPlugins']['media']);
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Flags OG content that require notification, when commenting on existing
 * content, and when new new content is added.
 */
function c4m_user_entity_insert($entity, $type) {
  if (!og_context()) {
    // Flagging is done for OG context only.
    return;
  }

  if ($type == 'node') {
    // Add 'follow node' flag.
    _c4m_user_flag_content($entity->nid, $entity->type, 'subscribe_c4m_follow_node');
  }
}

/**
 * Implements hook_entity_update().
 *
 * Flags OG content that require notification, on existing content update.
 */
function c4m_user_entity_update($entity, $type) {
  if (!og_context()) {
    // Flagging is done for OG context only.
    return;
  }

  if ($type == 'node') {
    // Add 'follow node' flag.
    _c4m_user_flag_content($entity->nid, $entity->type, 'subscribe_c4m_follow_node');
  }
}

/**
 * Helper function.
 *
 * Flags node with provided flag, for user.
 *
 * @param int $nid
 *   Node id.
 * @param string $content_type
 *   Node type.
 * @param string $flag_name
 *   Flag name for flagging.
 */
function _c4m_user_flag_content($nid, $content_type, $flag_name) {
  if (!_c4m_user_content_node_requires_notification($content_type)) {
    // No need to flag content that does not required notification.
    return;
  }

  flag('flag', $flag_name, $nid);
}

/**
 * Helper function.
 *
 * Flags node with provided flag, for user.
 *
 * @param string $content_type
 *   Node type.
 *
 * @return bool
 *   Whether provided node type required notification.
 */
function _c4m_user_content_node_requires_notification($content_type) {
  $types_to_notify = array('wiki_page', 'discussion', 'document', 'event');
  if (!in_array($content_type, $types_to_notify)) {
    // Content does not required notification.
    return FALSE;
  }

  return TRUE;
}
