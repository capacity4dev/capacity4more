<?php

/**
 * @file
 * Code for the C4M notifications subscriptions.
 */

/**
 * Implements hook_node_insert().
 *
 * Flags inserted node, if content requires notification.
 */
function c4m_user_subscribe_node_insert($node) {
  if ($node->status != NODE_PUBLISHED) {
    // Do not mark anything that is saved as draft.
    return;
  }

  if (!in_array($node->type, c4m_og_get_comment_notification_types())) {
    // Inserted content does not require notification.
    return;
  }

  flag('flag', 'subscribe_c4m_follow_comment', $node->nid);

  if (!in_array($node->type, c4m_og_get_group_content_notification_types())) {
    // Inserted content does not require notification.
    return;
  }

  flag('flag', 'subscribe_c4m_follow_node', $node->nid);
}

/**
 * Implements hook_node_update().
 *
 * Flags updated node, if content requires notification.
 */
function c4m_user_subscribe_node_update($node) {
  if ($node->status != NODE_PUBLISHED) {
    // Do not mark anything that is saved as draft.
    return;
  }

  if (!in_array($node->type, c4m_og_get_comment_notification_types())) {
    // Inserted content does not require notification.
    return;
  }

  // If user has not unsubscribed from that type of notifications.
  if (!_c4m_user_subscribe_entity_notifications_disabled($node->nid, 'comment')) {
    flag('flag', 'subscribe_c4m_follow_comment', $node->nid);
  }

  if (!in_array($node->type, c4m_og_get_group_content_notification_types())) {
    // Inserted content does not require notification.
    return;
  }

  flag('flag', 'subscribe_c4m_follow_node', $node->nid);
}

/**
 * Implements hook_comment_insert().
 *
 * Flags OG content that requires notification, when commenting on existing
 * content.
 */
function c4m_user_subscribe_comment_insert($comment) {
  $node = node_load($comment->nid);

  if ($node->status != NODE_PUBLISHED) {
    // Do not mark anything for node that is saved as draft.
    return;
  }

  if (!in_array($node->type, c4m_og_get_comment_notification_types())) {
    // Inserted comment is on content that does not require notification.
    return;
  }

  // Add 'follow comment' flag.
  flag('flag', 'subscribe_c4m_follow_comment', $node->nid);
}

/**
 * Helper function.
 *
 * Checks if user has disabled notifications for entity flagged by input flag.
 *
 * @param int $entity_id
 *   Entity ID.
 * @param string $flag_suffix
 *   Suffix of flag that is being checked.
 *   Possible values: "group, node, comment, term".
 *
 * @return bool
 *   Whether user has disabled notifications flagged by flag, for entity.
 */
function _c4m_user_subscribe_entity_notifications_disabled($entity_id, $flag_suffix) {
  global $user;

  if (!in_array($flag_suffix, c4m_features_og_group_dashboard_get_notification_flags_suffixes())) {
    // Unknown flag suffix.
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper('user', $user);
  $field = "c4m_optout_{$flag_suffix}";
  foreach ($wrapper->$field->value(array('identifier' => TRUE)) as $existing_id) {
    if ($existing_id == $entity_id) {
      // User unsubscribed from entity.
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implements hook_og_membership_type_insert().
 *
 * Flags the group subscription flag, so the user is subscribed to the group if
 * the user membership is active.
 */
function c4m_user_subscribe_og_membership_insert(OgMembership $membership) {
  if ($membership->state == OG_STATE_ACTIVE) {
    c4m_user_subscribe_to_group($membership);
  }
}

/**
 * Implements hook_og_membership_type_update().
 *
 * @see c4m_user_subscribe_og_membership_insert()
 */
function c4m_user_subscribe_og_membership_update(OgMembership $membership) {
  c4m_user_subscribe_og_membership_insert($membership);
}

/**
 * Implements hook_og_membership_type_delete().
 *
 * Unflags the group subscription flag, so the user is no longer subscribed to
 * the group.
 */
function c4m_user_subscribe_og_membership_delete(OgMembership $membership) {
  c4m_user_subscribe_to_group($membership, 'unflag');
}

/**
 * Updates the subscription flag to a group from the membership.
 *
 * @param object $membership
 *   OgMembership object containing the information of the group and the state.
 * @param string $event
 *   Actions to update the subscription flag.
 *   Possible values: "flag", "unflag".
 */
function c4m_user_subscribe_to_group($membership, $event = 'flag') {
  $flag = flag_get_flag('subscribe_c4m_follow_group');
  $flag->flag($event, $membership->gid, NULL, TRUE);
}
