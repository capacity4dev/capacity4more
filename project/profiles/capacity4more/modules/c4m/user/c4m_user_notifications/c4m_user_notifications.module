<?php

/**
 * @file
 * Code for the C4M notifications triggers.
 */

/**
 * Include handlers.
 */
module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.helper');
module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.logger');

/**
 * Implements hook_og_membership_insert().
 */
function c4m_user_notifications_og_membership_insert($og_membership) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.dispatch');

  _c4m_user_notifications_og_membership_insert($og_membership);
}

/**
 * Implements hook_og_membership_update().
 */
function c4m_user_notifications_og_membership_update($og_membership) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.dispatch');

  _c4m_user_notifications_dispatch_og_membership_update($og_membership);
}

/**
 * Implements hook_og_role_grant().
 */
function c4m_user_notifications_og_role_grant($entity_type, $gid, $uid, $rid) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.dispatch');

  _c4m_user_notifications_og_role_grant($gid, $uid, $rid);
}

/**
 * Implements hook_og_role_revoke().
 */
function c4m_user_notifications_og_role_revoke($entity_type, $gid, $uid, $rid) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.dispatch');

  _c4m_user_notifications_og_role_revoke($gid, $uid, $rid);
}

/**
 * Implements hook_node_insert().
 */
function c4m_user_notifications_node_insert($node) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.dispatch');

  _c4m_user_notifications_node_insert($node);
}

/**
 * Implements hook_node_update().
 */
function c4m_user_notifications_node_update($node) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.dispatch');

  _c4m_user_notifications_node_update($node);
}

/**
 * Implements hook_comment_insert().
 */
function c4m_user_notifications_comment_insert($comment) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.dispatch');

  _c4m_user_notifications_comment_insert($comment);
}

/**
 * Implements hook_flag_flag().
 */
function c4m_user_notifications_flag_flag($flag, $entity_id, $account, $flagging) {
  if ($flag->entity_type != 'node') {
    return;
  }

  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.dispatch');

  _c4m_user_notifications_flag_flag($flag, $entity_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_notifications_form_og_ui_add_users_alter(array &$form, array &$form_state) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.form_alters');

  _c4m_user_notifications_form_og_ui_add_users_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_notifications_form_c4m_og_reject_membership_request_alter(array &$form, array &$form_state) {
  module_load_include('inc', 'c4m_user_notifications', 'includes/c4m_user_notifications.form_alters');

  _c4m_user_notifications_form_c4m_og_reject_membership_request_alter($form, $form_state);
}

/**
 * Implements hook_message_subscribe_get_subscribers().
 */
function c4m_user_notifications_message_subscribe_get_subscribers($message, $subscribe_options, $context) {
  return _c4m_user_notifications_message_subscribe_get_subscribers($message, $context);
}

/**
 * Implements hook_cron_queue_info_alter().
 */
function c4m_user_notifications_cron_queue_info_alter(&$queues) {
  $queues['message_subscribe']['time'] = 90;
}

/**
 * Implements hook_cron_queue_info().
 */
function c4m_user_notifications_cron_queue_info() {
  $queues = [];
  $queues['c4m_user_notifications'] = [
    'worker callback' => 'c4m_user_notifications_queue_dispatch_message',
    'time' => 45,
  ];

  return $queues;
}

/**
 * Gets parameters, retrieves recipients and creates the subscribe message.
 *
 * @param array $data
 *   Data array containing all the message parameters.
 *
 * @throws \Exception
 */
function c4m_user_notifications_queue_dispatch_message(array $data) {
  // Initialize variables we are about to overwrite via the extract.
  $entity_type = '';
  $entity = NULL;
  $message = NULL;
  $notify_options = [];
  $subscribe_options = [];
  $context = [];

  extract($data, EXTR_OVERWRITE);

  // Time intensive functionality, this is the reason we do this via a queue.
  $subscribe_options['uids'] = message_subscribe_get_subscribers($entity_type, $entity, $message, $subscribe_options, $context);

  message_subscribe_send_message($entity_type, $entity, $message, $notify_options, $subscribe_options, $context);
}
