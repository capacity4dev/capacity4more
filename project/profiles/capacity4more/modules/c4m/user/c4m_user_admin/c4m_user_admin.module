<?php

/**
 * @file
 * Code for the user admin module.
 */

include_once 'c4m_user_admin.features.inc';

/**
 * Implements hook_action_info().
 */
function c4m_user_admin_action_info() {
  module_load_include('inc', 'c4m_user_admin', 'actions/c4m_user_admin.action');
  return _c4m_user_admin_action_info();
}

/**
 * Implements hook_views_data().
 */
function c4m_user_admin_views_data() {
  $data['users']['activate_user'] = array(
    'field' => array(
      'title' => t('Activate user link'),
      'help' => t('Provide a simple link to activate the user.'),
      'handler' => 'views_handler_field_user_link_activate',
    ),
  );

  $data['users']['resend_activation_email'] = array(
    'field' => array(
      'title' => t('Resend activation email link'),
      'help' => t('Provide a simple link to resend activation email.'),
      'handler' => 'views_handler_field_user_link_resend_activation_email',
    ),
  );

  $data['users']['user_metrics'] = array(
    'title' => t('User metrics'),
    'help' => t('Metrics about a user.'),
    'field' => array(
      'handler' => 'views_handler_field_user_metrics',
      'group' => 'Content',
    ),
  );

  return $data;
}

/**
 * Implements hook_menu().
 */
function c4m_user_admin_menu() {
  $items['user/%user/activate'] = array(
    'title' => 'Activate user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_user_admin_user_activate_form', 1),
    'access arguments' => array('administer users'),
    'file' => 'c4m_user_admin.pages.inc',
  );

  $items['user/%user/resend-activation-email'] = array(
    'title' => 'Resend activation email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_user_admin_resend_activation_email_form', 1),
    'access arguments' => array('administer users'),
    'file' => 'c4m_user_admin.pages.inc',
  );

  $items['admin/people/export'] = array(
    'title' => 'User report',
    'page callback' => '_c4m_user_admin_page_user_report',
    'access arguments' => array('administer users'),
    'file' => 'c4m_user_admin.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_user_cancel_methods_alter().
 */
function c4m_user_admin_user_cancel_methods_alter(&$methods) {
  // Remove the option to disable account and unpublish existing content.
  unset($methods['user_cancel_block_unpublish']);

  // Add the option to disable account assign existing
  // content to anonymous user.
  $new_methods = array();
  $new_methods['c4m_user_admin_block_anonymous'] = array(
    'title' => t(
      'Disable the account and make its content belong to the Anonymous user.'
    ),
    'description' => t(
      'Your account will be blocked and you will no longer be able to log in.
      All of your content will be assigned to the Anonymous user.'
    ),
    'access' => user_access('administer users'),
  );

  $methods = $new_methods + $methods;
}

/**
 * Implements hook_user_cancel().
 *
 * @see node_user_cancel()
 * @see comment_user_cancel()
 */
function c4m_user_admin_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'c4m_user_admin_block_anonymous':
      // Anonymize nodes (current revisions).
      module_load_include('inc', 'node', 'node.admin');
      $nodes = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('uid', $account->uid)
        ->execute()
        ->fetchCol();
      node_mass_update($nodes, array('uid' => 0, '_skip_message' => TRUE));
      // Anonymize old revisions.
      db_update('node_revision')
        ->fields(array('uid' => 0))
        ->condition('uid', $account->uid)
        ->execute();
      // Clean history.
      db_delete('history')
        ->condition('uid', $account->uid)
        ->execute();

      // Anonymize comments.
      $comments = comment_load_multiple(array(), array('uid' => $account->uid));
      foreach ($comments as $comment) {
        $comment->uid = 0;
        $comment->_skip_message = TRUE;
        unset($comment->name);
        comment_save($comment);
      }

      // Anonymize messages.
      anonymize_messages_for_user($account);

      // Set the flag "Is deleted" for this user.
      $changes = array(
        'c4m_is_deleted' => array(
          'und' => array(
            0 => array(
              'value' => 1,
            ),
          ),
        ),
      );
      user_save($account, $changes);
      break;

    case 'user_cancel_reassign':
      // Anonymize messages.
      anonymize_messages_for_user($account);
      break;

    case 'user_cancel_block':
      // Set the flag "Is deleted" for this user.
      $changes = array(
        'c4m_is_deleted' => array(
          'und' => array(
            0 => array(
              'value' => 1,
            ),
          ),
        ),
      );
      user_save($account, $changes);
      break;
  }
}

/**
 * Helper function to anonymize messages.
 *
 * @param object $account
 *   User account for which to anonymize messages.
 */
function anonymize_messages_for_user($account) {
  db_update('message')
    ->fields(array('uid' => 0))
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_admin_paths().
 */
function c4m_user_admin_admin_paths() {
  $paths = array(
    'user/*/activate' => TRUE,
    'user/*/resend-activation-email' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_admin_form_user_cancel_confirm_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form['_account']['#value']->uid == $user->uid) {
    return;
  }

  // Move description text to the bottom.
  $form['description']['#weight'] = 10;

  // Hide user confirmation control.
  $form['user_cancel_confirm']['#access'] = FALSE;

  // Only show the notify checkbox when deleting an account (not for disabling).
  $form['user_cancel_notify']['#states'] = array(
    'visible' => array(
      array(
        ':input[name=user_cancel_method]' => array('value' => 'user_cancel_reassign'),
      ),
      array(
        ':input[name=user_cancel_method]' => array('value' => 'user_cancel_delete'),
      ),
    ),
  );

  // Add checkbox to indicate spammer.
  $form['c4m_is_spammer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mark user as spammer'),
    '#weight' => 1,
    '#states' => array(
      'visible' => array(
        array(
          ':input[name=user_cancel_method]' => array('value' => 'c4m_user_admin_block_anonymous'),
        ),
        array(
          ':input[name=user_cancel_method]' => array('value' => 'user_cancel_block'),
        ),
      ),
    ),
  );

  // Custom submit handler.
  $form['#submit'][] = 'c4m_user_admin_form_user_cancel_confirm_form_submit';
}

/**
 * Submit handler for user_cancel_confirm_form().
 */
function c4m_user_admin_form_user_cancel_confirm_form_submit($form, &$form_state) {
  if (empty($form_state['values']['c4m_is_spammer'])) {
    return;
  }

  $account = $form_state['values']['_account'];
  $edit['c4m_is_spammer'][LANGUAGE_NONE][0]['value'] = 1;
  user_save($account, $edit);
}
