<?php
/**
 * @file
 * Code for the User Profile feature.
 */

include_once 'c4m_user_profile.features.inc';

/**
 * Implements hook_field_extra_fields_alter().
 */
function c4m_user_profile_field_extra_fields_alter(&$info) {
  // Make sure that the Account fields are always at the top of the user
  // profile.
  if (isset($info['user']['user']['form']['account']['weight'])) {
    $info['user']['user']['form']['account']['weight'] = -100;
  }
}

/******************************************************************************
 * BLOCK
 ******************************************************************************/

/**
 * Implements hook_block_info().
 */
function c4m_user_profile_block_info() {
  $blocks['user_menu'] = array(
    'info' => t('Display user menu in the top bar'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );

  $blocks['user_notifications'] = array(
    'info' => t('Display the user notifications etc...'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_user_profile_block_view($delta = '') {
  $module_name = 'c4m_user_profile';
  module_load_include('inc', $module_name, "{$module_name}.block");
  $callback = "_{$module_name}_block_" . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Implements hook_token_info().
 */
function c4m_user_profile_token_info() {
  $info['tokens']['user']['full-name'] = array(
    'name'        => t('User Full Name'),
    'description' => t('Returns the User Full Name)'),
  );
  $info['tokens']['user']['url-with-name'] = array(
    'name' => t("User profile URL with fallback for anonymous users"),
    'description' => t("The URL of the account profile page, with fallback if anonymous."),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function c4m_user_profile_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $url_options = array('absolute' => TRUE);

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'full-name':
          $replacements[$original] = c4m_user_name($account);
          break;

        case 'url-with-name':
          $name = c4m_user_name($account);
          $replacements[$original] = !empty($account->uid) ? l(
            $name, "user/$account->uid", $url_options
          ) : $name;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_facet_items_alter().
 */
function c4m_user_profile_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'c4m_country':
      _c4m_user_profile_facet_country_alter($build, $settings);
      break;
  }
}

/**
 * Helper function to alter the facet for the country.
 *
 * Display full country name instead of country code.
 *
 * @param array $build
 *    The facets.
 * @param object $settings
 *    Facet settings.
 */
function _c4m_user_profile_facet_country_alter(array &$build, $settings) {
  $field = field_info_field($settings->facet);
  $allowed_values = list_allowed_values($field);
  foreach ($build as $key => $item) {
    $options = array(
      '@country' => ucwords(
        drupal_strtolower($allowed_values[drupal_strtoupper($key)])
      ),
    );
    $build[$key]["#markup"] = t('@country', $options);
  }
}

/**
 * Implements hook_theme().
 */
function c4m_user_profile_theme() {
  $theme['c4m_user_profile_picture_fullname'] = array(
    'variables' => array(
      'user' => array(),
      'link' => array(),
    ),
    'file' => 'c4m_user_profile.theme.inc',
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/includes',
  );

  $theme['c4m_user_profile_menu'] = array(
    'variables' => array(
      'menu_items'  => array(),
      'attributes'  => array(),
    ),
    'file' => 'c4m_user_profile.theme.inc',
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/includes',
  );

  return $theme;
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove tabs for registration page.
 */
function c4m_user_profile_preprocess_page(&$variables) {
  if (request_path() == 'user/register') {
    unset($variables['tabs']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_profile_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  drupal_set_title(t('Registration'));

  // Add checkbox for contact options.
  // @see contact_form_user_profile_form_alter().
  $form['contact_info']['contact'] = array(
    '#type' => 'checkbox',
    '#title' => t('I allow C4Dev users to contact me directly by E-mail through the platform'),
    '#default_value' => variable_get('contact_default_status', 1),
    '#weight' => 20,
  );
  $form['contact_info']['#weight'] = 20;

  // Move the email input first.
  $form['mail'] = $form['account']['mail'];
  $form['mail']['#weight'] = -100;
  unset($form['account']['mail']);

  $form['mail']['#ajax'] = array(
    'callback' => 'c4m_user_profile_element_validate_mail_ajax',
    'event' => 'blur',
    'method' => 'replace',
    'wrapper' => 'user-form-mail-validation-message',
  );
  $form['mail']['#suffix'] = '<div id="user-form-mail-validation-message" class="hidden"></div>';

  // Add Cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Cancel'), '<front>', array('attributes' => array('class' => array('btn', 'btn-default')))),
  );

  // Adjust legal information.
  $form['legal'] = $form['legal']['legal_accept'];
  $form['legal']['#type'] = 'markup';
  $form['legal']['#markup'] = '<p>' . $form['legal']['#title'] . '</p>';

  // Adjust validators. Remove default one and replace it with a custom one.
  // Add validator for the email field.
  $form['mail']['#element_validate'][] = 'c4m_user_profile_element_validate_mail';
  if (($key = array_search('user_account_form_validate', $form['#validate'])) !== FALSE) {
    unset($form['#validate'][$key]);
  }
  array_unshift($form['#validate'], 'c4m_user_profile_account_form_validate');

  $form['subscribe_to_mailinglist'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send me the monthly C4DEV newsletter (see !samples)', array(
      '!samples' => l(t('samples'), 'newsletters'),
    )),
    '#weight' => 50,
  );
  $form['#submit'][] = 'c4m_user_profile_form_user_register_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_profile_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Add checkbox for contact options.
  // @see contact_form_user_profile_form_alter().
  $form['contact_info']['contact'] = array(
    '#type' => 'checkbox',
    '#title' => t('I allow C4Dev users to contact me directly by E-mail through the platform'),
    '#default_value' => variable_get('contact_default_status', 1),
    '#weight' => 20,
  );
  $form['contact_info']['#weight'] = 20;

  // Move the email input first.
  $form['mail'] = $form['account']['mail'];
  $form['mail']['#weight'] = -100;
  unset($form['account']['mail']);

  $form['mail']['#ajax'] = array(
    'callback' => 'c4m_user_profile_element_validate_mail_ajax',
    'event' => 'blur',
    'method' => 'replace',
    'wrapper' => 'user-form-mail-validation-message',
  );
  $form['mail']['#suffix'] = '<div id="user-form-mail-validation-message" class="hidden"></div>';

  // Adjust validators. Remove default one and replace it with a custom one.
  // Add validator for the email field.
  $form['mail']['#element_validate'][] = 'c4m_user_profile_element_validate_mail';
  if (($key = array_search('user_account_form_validate', $form['#validate'])) !== FALSE) {
    unset($form['#validate'][$key]);
  }
  $form['mail']['#element_validate'][] = 'c4m_user_profile_element_validate_mail';
}

/**
 * AJAX callback for mail field validation.
 */
function c4m_user_profile_element_validate_mail_ajax($form, $form_state) {
  // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
  // warnings often caused by cutting and pasting.
  $mail = trim($form_state['values']['mail']);

  $errors = module_invoke_all('c4m_user_profile_validate_email', $mail, $form_state, $form);
  uasort($errors, 'element_sort');

  if ($errors) {
    $messages = array();
    foreach ($errors as $error) {
      $messages[] = $error['message'];
    }
    return '<div id="user-form-mail-validation-message" class="text-danger">' . implode("<br>", $messages) . '</div>';
  }
  else {
    return '<div id="user-form-mail-validation-message" class="hidden"></div>';
  }
}

/**
 * Implements hook_c4m_captcha_form_info().
 */
function c4m_user_profile_c4m_captcha_form_info() {
  return array('user_register_form');
}

/**
 * Submit callback for user_register_form form.
 */
function c4m_user_profile_form_user_register_form_submit($form, &$form_state) {
  global $language;

  // Accept legal terms and conditions.
  $conditions = legal_get_conditions($language->language);
  legal_save_accept($conditions['version'], $conditions['revision'], $conditions['language'], $form['#user']->uid);

  // Alter the default welcome message from user_registrationpassword module.
  // See user_registrationpassword_form_user_register_submit() to see how it
  // does it too.
  $message = t('A welcome message with further instructions has been sent to your e-mail address.');

  // Unset all messages that contain the $message.
  foreach ($_SESSION['messages']['status'] as $status => $statusmessage) {
    if ($message == $statusmessage) {
      unset($_SESSION['messages']['status'][$status]);
    }
  }
  $_SESSION['messages']['status'] = array_values($_SESSION['messages']['status']);

  $name = $form_state['values']['c4m_first_name'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['c4m_last_name'][LANGUAGE_NONE][0]['value'];

  // Set success message.
  drupal_set_message(t('Hey @name, thank you for submitting your details. Please activate your account by clicking the link sent to your e-mail.', array('@name' => $name)));

  // Process subscription to mailing list.
  if (empty($form_state['values']['subscribe_to_mailinglist'])) {
    return;
  }
  $email = $form_state['values']['mail'];
  if (!c4m_user_profile_subscribe_to_mailing_list($email, $name)) {
    drupal_set_message(t("We couldn't subscribe you to the mailing list. Please try again later."));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_profile_form_campaignmonitor_admin_settings_general_alter(&$form, &$form_state, $form_id) {
  $form['campaignmonitor_account']['#weight'] = -2;
  $form['campaignmonitor_list'] = array(
    '#type' => 'fieldset',
    '#title' => 'List settings',
    '#collapsible' => TRUE,
    '#collapsed' => !$form['campaignmonitor_account']['#collapsed'] || !empty(variable_get('campaignmonitor_list_title')),
    '#weight' => -1,
  );
  $form['campaignmonitor_list']['campaignmonitor_list_title'] = array(
    '#type' => 'textfield',
    '#title' => 'List Title',
    '#default_value' => variable_get('campaignmonitor_list_title'),
  );
  $form['#submit'][] = 'c4m_user_profile_form_campaignmonitor_admin_settings_general_submit';
}

/**
 * Submit callback for campaignmonitor_admin_settings_general form.
 */
function c4m_user_profile_form_campaignmonitor_admin_settings_general_submit($form, &$form_state) {
  if (isset($form_state['values'])) {
    variable_set('campaignmonitor_list_title', $form_state['values']['campaignmonitor_list_title']);
  }
}

/**
 * Subscribe email address to mailing list.
 *
 * @param string $email_address
 *   Email address.
 * @param string $name
 *   User's name.
 *
 * @return bool
 *   TRUE if the subscribe process succeeded.
 */
function c4m_user_profile_subscribe_to_mailing_list($email_address, $name) {
  if (!$list_title = variable_get('campaignmonitor_list_title')) {
    return FALSE;
  }

  // Get connected to the API and get lists.
  $cm = CampaignMonitor::getConnector();
  $lists_info = $cm->getLists();
  $list_id = 0;
  foreach ($lists_info as $list_id => $list) {
    if ($list['name'] == $list_title) {
      break;
    }
  }

  if (!$list_id || $cm->isSubscribed($list_id, $email_address)) {
    return FALSE;
  }

  return $cm->subscribe($list_id, $email_address, $name);
}

/**
 * Implements hook_module_implements_alter().
 *
 * Our implementation needs to fire after legal module.
 */
function c4m_user_profile_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['c4m_user_profile'])) {
    $c4m_user_profile = $implementations['c4m_user_profile'];
    unset($implementations['c4m_user_profile']);
    $implementations['c4m_user_profile'] = $c4m_user_profile;
  }
}

/**
 * Validator callback c4m_user_profile_account_form_validate().
 *
 * Replaces user_account_form_validate() and removes the code related to email
 * validation.
 */
function c4m_user_profile_account_form_validate($form, &$form_state) {
  if ($form['#user_category'] != 'account' && $form['#user_category'] != 'register') {
    return;
  }

  $account = $form['#user'];
  // Validate new or changing username.
  if (isset($form_state['values']['name'])) {
    if ($error = user_validate_name($form_state['values']['name'])) {
      form_set_error('name', $error);
    }
    elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('name', db_like($form_state['values']['name']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      form_set_error('name', t('The name %name is already taken.', array('%name' => $form_state['values']['name'])));
    }
  }

  // Make sure the signature isn't longer than the size of the database field.
  // Signatures are disabled by default, so make sure it exists first.
  if (isset($form_state['values']['signature'])) {
    // Move text format for user signature into 'signature_format'.
    $form_state['values']['signature_format'] = $form_state['values']['signature']['format'];
    // Move text value for user signature into 'signature'.
    $form_state['values']['signature'] = $form_state['values']['signature']['value'];

    $user_schema = drupal_get_schema('users');
    if (drupal_strlen($form_state['values']['signature']) > $user_schema['fields']['signature']['length']) {
      form_set_error('signature', t('The signature is too long: it must be %max characters or less.', array('%max' => $user_schema['fields']['signature']['length'])));
    }
  }
}

/**
 * Validator callback for mail field.
 */
function c4m_user_profile_element_validate_mail($element, &$form_state, $form) {
  // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
  // warnings often caused by cutting and pasting.
  $mail = trim($form_state['values']['mail']);
  form_set_value($form['mail'], $mail, $form_state);

  $errors = module_invoke_all('c4m_user_profile_validate_email', $mail, $form_state, $form);
  uasort($errors, 'element_sort');

  if ($errors) {
    $messages = array();
    foreach ($errors as $error) {
      $messages[] = $error['message'];
    }
    form_error($element, implode("<br>", $messages));
  }
}

/**
 * Implements hook_c4m_user_profile_validate_email().
 */
function c4m_user_profile_c4m_user_profile_validate_email($mail, $form_state, $form) {
  if (!valid_email_address($mail)) {
    return array(
      array(
        'message' => t('The e-mail address %mail is not valid.', array('%mail' => $mail)),
        '#weight' => 0,
      ),
    );
  }

  if (!($other_user = user_load_by_mail($mail)) || isset($form_state['user']->uid) && $other_user->uid == $form_state['user']->uid) {
    return array();
  }

  $other_user = entity_metadata_wrapper('user', $other_user);
  $errors = array();
  if ($other_user->status->value()) {
    $errors[] = array(
      'message' => t('This account is already in use. If this is you, please !login</a>.', array(
        '!login' => l(t('log in'), 'user/login'),
      )),
      '#weight' => 0,
    );
  }
  else {
    if (!$other_user->last_login->value() && !$other_user->last_access->value()) {
      $errors[] = array(
        'message' => t('This email address is already in use. Please activate your account, or re-send activation mail.'),
        '#weight' => 0,
      );
    }
    if ($other_user->c4m_is_spammer->value()) {
      $errors[] = array(
        'message' => t('This account has been blocked. !contact site administrator for more information.', array(
          '!contact' => l(t('Contact'), 'contact'),
        )),
        '#weight' => 1,
      );
    }
    if ($other_user->c4m_is_deleted->value()) {
      $errors[] = array(
        'message' => t('There is a problem with your account, please !contact the site administrators.', array(
          '!contact' => l(t('contact'), 'contact'),
        )),
        '#weight' => 2,
      );
    }
  }
  return $errors;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Replace the user_login_name_validate() from the user_login form.
 */
function c4m_user_profile_form_user_login_alter(&$form, &$form_state, $form_id) {
  if (($key = array_search('user_login_name_validate', $form['#validate'])) !== FALSE) {
    unset($form['#validate'][$key]);
  }
  array_unshift($form['#validate'], 'c4m_user_profile_user_login_validate');
}

/**
 * Validate callback for user_login form.
 *
 * @see user_login_name_validate()
 */
function c4m_user_profile_user_login_validate($form, &$form_state) {
  if (empty($form_state['values']['name'])) {
    return;
  }
  $account = user_load_by_name($form_state['values']['name']);

  // Username not found.
  if (!$account) {
    return;
  }

  // User is active.
  if (!empty($account->status)) {
    return;
  }

  $account = entity_metadata_wrapper('user', $account);
  if (!$account->c4m_is_deleted->value() && !$account->c4m_is_spammer->value() && !$account->last_login->value()) {
    form_set_error('name', t('You used valid credentials but your account is not activated yet. Use the !password_recovery form to resend the activation email.', array('!password_recovery' => l(t('password recovery'), 'user/password'))));
  }
  else {
    form_set_error('name', t('The username %name has not been activated or is blocked.', array('%name' => $form_state['values']['name'])));
  }
}
