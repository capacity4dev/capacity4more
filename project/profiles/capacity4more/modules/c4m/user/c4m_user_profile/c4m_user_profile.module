<?php

/**
 * @file
 * Code for the User Profile feature.
 */

include_once 'c4m_user_profile.features.inc';

define('C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_MESSAGE', 1);
define('C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR', 2);

/**
 * Implements hook_field_extra_fields_alter().
 */
function c4m_user_profile_field_extra_fields_alter(&$info) {
  // Make sure that the Account fields are always at the top of the user
  // profile.
  if (isset($info['user']['user']['form']['account']['weight'])) {
    $info['user']['user']['form']['account']['weight'] = -100;
  }
}

/******************************************************************************
 * BLOCK
 ******************************************************************************/

/**
 * Implements hook_block_info().
 */
function c4m_user_profile_block_info() {
  $blocks['user_menu'] = array(
    'info' => t('Display user menu in the top bar'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );

  $blocks['user_notifications'] = array(
    'info' => t('Display the user notifications etc...'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['user_is_invalid_email'] = array(
    'info' => t('Display the invalid email alert'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['user_confirm_email'] = array(
    'info' => t('Engage user to confirm his email'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['user_my_profile_groups'] = array(
    'info' => t('My groups'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_user_profile_block_view($delta = '') {
  $module_name = 'c4m_user_profile';
  module_load_include('inc', $module_name, "{$module_name}.block");
  $callback = "_{$module_name}_block_" . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Implements hook_token_info().
 */
function c4m_user_profile_token_info() {
  $info['tokens']['user']['full-name'] = array(
    'name' => t('User Full Name'),
    'description' => t('Returns the User Full Name)'),
  );
  $info['tokens']['user']['url-with-name'] = array(
    'name' => t("User profile URL with fallback for anonymous users"),
    'description' => t(
      "The URL of the account profile page, with fallback if anonymous."
    ),
  );

  return $info;
}

/**
 * Implements hook_tokens().
 */
function c4m_user_profile_tokens(
  $type,
  $tokens,
  array $data = array(),
  array $options = array()
) {
  $replacements = array();
  $url_options = array('absolute' => TRUE);

  if ($type == 'user' && !empty($data['user'])) {
    $account = $data['user'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'full-name':
          $replacements[$original] = c4m_user_name($account);
          break;

        case 'url-with-name':
          $name = c4m_user_name($account);

          $wrapper = entity_metadata_wrapper('user', $account);
          if (!$account->status && $wrapper->c4m_is_deleted_anonymous->value()) {
            $name = t('Anonymous');
          }

          $replacements[$original] = !empty($account->uid) && $account->status ? l(
            $name,
            "user/$account->uid",
            $url_options
          ) : $name;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_facet_items_alter().
 */
function c4m_user_profile_facet_items_alter(&$build, &$settings) {
  switch ($settings->facet) {
    case 'c4m_country':
      _c4m_user_profile_facet_country_alter($build, $settings);
      break;
  }
}

/**
 * Helper function to alter the facet for the country.
 *
 * Display full country name instead of country code.
 *
 * @param array $build
 *    The facets.
 * @param object $settings
 *    Facet settings.
 */
function _c4m_user_profile_facet_country_alter(array &$build, $settings) {
  $field = field_info_field($settings->facet);
  $allowed_values = list_allowed_values($field);
  foreach ($build as $key => $item) {
    $build[$key]["#markup"] = ucwords(
      drupal_strtolower($allowed_values[drupal_strtoupper($key)])
    );
  }
}

/**
 * Implements hook_theme().
 */
function c4m_user_profile_theme() {
  $theme['c4m_user_profile_picture_fullname'] = array(
    'variables' => array(
      'user' => array(),
      'link' => array(),
    ),
    'file' => 'c4m_user_profile.theme.inc',
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/includes',
  );

  $theme['c4m_user_profile_menu'] = array(
    'variables' => array(
      'menu_items' => array(),
      'attributes' => array(),
    ),
    'file' => 'c4m_user_profile.theme.inc',
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/includes',
  );

  $theme['c4m_user_profile_groups_top_bar'] = array(
    'variables' => array(
      'groups' => array(),
      'link' => array(),
    ),
    'file' => 'c4m_user_profile.theme.inc',
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/includes',
  );

  $theme['c4m_user_profile_projects_top_bar'] = array(
    'variables' => array(
      'projects' => array(),
      'link' => array(),
    ),
    'file' => 'c4m_user_profile.theme.inc',
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/includes',
  );

  $theme['c4m_user_profile_my_profile_groups'] = array(
    'variables' => array(
      'groups' => NULL,
    ),
    'path' => drupal_get_path('module', 'c4m_user_profile') . '/templates',
    'template' => 'my-profile-groups',
  );

  return $theme;
}

/**
 * Implements hook_preprocess_page().
 *
 * Remove tabs for registration page.
 */
function c4m_user_profile_preprocess_page(&$variables) {
  if (request_path() == 'user/register') {
    unset($variables['tabs']);
  }
}

/**
 * Implements hook_menu().
 */
function c4m_user_profile_menu() {
  $items = array();

  $items['user/change-mail-resend'] = array(
    'title' => 'Change e-mail',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_user_profile_resend_email_change_confirmation_email_form'),
    'access callback' => TRUE,
    'file' => 'c4m_user_profile.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/unsubscribe/%/%/%'] = array(
    'title' => 'Unsubscribe user',
    'page callback' => 'c4m_user_profile_unsubscribe_user',
    'page arguments' => array(1, 3, 4, 5),
    'access callback' => 'c4m_user_profile_unsubscribe_user_access',
    'access arguments' => array(1, 3, 4, 5),
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/leave'] = array(
    'title' => 'Leave platform',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_user_profile_remove_account_form', 1),
    'access callback' => 'user_is_logged_in',
    'access arguments' => array(),
    'file' => 'c4m_user_profile.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_user_login().
 *
 * It uses the same checks as email_confirm module.
 */
function c4m_user_profile_user_login(&$edit, $user) {
  if (!isset($user->data['email_confirm'])) {
    return;
  }
  if (!isset($user->data['email_confirm']['pending_email']) || $user->data['email_confirm']['expiration_time'] <= REQUEST_TIME) {
    return;
  }
  drupal_set_message(
    t(
      'You currently have a pending change of your e-mail address to %email. !link to resend the email.',
      array(
        '%email' => $user->data['email_confirm']['pending_email'],
        '!link' => l(t('Click here'), 'user/change-mail-resend'),
      )
    ),
    'warning'
  );
}

/**
 * Implements hook_email_confirm().
 *
 * Triggers the update info after the email change is confirmed.
 */
function c4m_user_profile_email_confirm($type, $uid) {
  if ($type != 'email confirmation') {
    return;
  }
  $account = user_load($uid);
  // Reset the invalid email flag.
  $edit['c4m_is_invalid_email'][LANGUAGE_NONE]['0']['value'] = 0;
  user_save($account, $edit);

  c4m_user_update_information($account);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_profile_form_user_register_form_alter(
  &$form,
  &$form_state,
  $form_id
) {
  drupal_set_title(t('Registration'));

  c4m_user_profile_alter_user_form($form, $form_state, TRUE);

  // Add Cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'markup',
    '#markup' => l(
      t('Cancel'),
      '<front>',
      array('attributes' => array('class' => array('btn', 'btn-default')))
    ),
  );

  // Adjust legal information.
  $form['legal'] = $form['legal']['legal_accept'];
  $form['legal']['#type'] = 'markup';
  $form['legal']['#markup'] = '<p>' . $form['legal']['#title'] . '</p>';

  $form['subscribe_to_mailinglist'] = array(
    '#type' => 'checkbox',
    '#title' => t(
      'Send me the monthly capacity4dev newsletter (see !samples)',
      array(
        '!samples' => l(
          t('samples'),
          'newsletters',
          array('attributes' => array('target' => '_blank'))
        ),
      )
    ),
    '#weight' => 50,
    '#description' => t(
      'Capacity4dev.eu uses a third-party service for newsletter delivery and administration. All your data is safe and subject to European Data protection and privacy legislation. Read the !privacy_statement_link of the newsletter platform for more information.',
      array(
        '!privacy_statement_link' => l(
          t('Privacy Statement'),
          'http://capacity4dev.dev/privacy',
          array(
            'attributes' => array(
              'absolute' => TRUE,
              'target' => '_blank',
            ),
          )
        ),
      )
    ),
  );
  $form['#submit'][] = 'c4m_user_profile_form_user_register_form_submit';

  // If user is administrator.
  if (user_access('administer users')) {
    // Hide status fields - SA-created user is always active.
    $form['account']['status']['#access'] = FALSE;
    // Alter 'notify user' checkbox title.
    $form['account']['notify']['#title'] = t('Send password reset link');
  }
}

/**
 * Alters user register / edit profile form.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state.
 */
function c4m_user_profile_alter_user_form(
  &$form,
  &$form_state,
  $is_registration
) {
  $form['#prefix'] = '<div id="user-register-form-wrapper">';
  $form['#suffix'] = '</div>';

  $form['c4m_is_ldap_user']['#type'] = 'hidden';
  $form['c4m_is_organisation_user'][LANGUAGE_NONE]['#type'] = 'hidden';
  $form['c4m_is_invalid_email'][LANGUAGE_NONE]['#type'] = 'hidden';

  // The default contact value is different on registration (general setting).
  // On the user edit form, the default value is stored as per user and this
  // value is already present in the form values (original contact field).
  $contact_default_value = ($is_registration) ?
    variable_get('contact_default_status', 1) :
    $form['contact']['contact']['#default_value'];

  // Add checkbox for contact options.
  // @see contact_form_user_profile_form_alter().
  $form['contact'] = array(
    '#type' => 'checkbox',
    '#title' => t(
      'Members are allowed to contact you through your personal contact form'
    ),
    '#default_value' => $contact_default_value,
    '#weight' => 14,
    '#group' => 'group_public_profile',
  );

  // Move the email input first.
  $form['mail'] = $form['account']['mail'];
  $form['mail']['#weight'] = -100;
  unset($form['account']['mail']);

  $form['mail']['#ajax'] = array(
    'callback' => 'c4m_user_profile_element_validate_mail_ajax',
    'event' => 'blur',
    'method' => 'replace',
    'wrapper' => 'user-register-form-wrapper',
  );

  // Add wrappers for AJAX replacement.
  $form['mail']['#prefix'] = '<div id="edit-mail-wrapper">';
  $form['mail']['#suffix'] = '</div>';
  $form['c4m_country']['#prefix'] = '<div id="edit-c4m-country-wrapper">';
  $form['c4m_country']['#suffix'] = '</div>';
  $form['c4m_organisation']['#prefix'] = '<div id="edit-c4m-organisation-wrapper">';
  $form['c4m_organisation']['#suffix'] = '</div>';
  $form['c4m_organisation_type']['#prefix'] = '<div id="edit-c4m-organisation-type-wrapper">';
  $form['c4m_organisation_type']['#suffix'] = '</div>';

  if (isset($form_state['values']['mail'])) {
    // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
    // warnings often caused by cutting and pasting.
    $mail = trim($form_state['values']['mail']);
    $validation_messages = array();

    $data['mail'] = $mail;
    $data['minimum_error_level'] = C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_MESSAGE;
    $data['form'] = &$form;
    $data['form_state'] = &$form_state;
    $data['alter_form'] = $is_registration;
    $data['validation_messages'] = &$validation_messages;

    drupal_alter('c4m_user_profile_validate_email', $data);
    uasort($validation_messages, 'element_sort');

    if ($validation_messages) {
      $messages = array();
      foreach ($validation_messages as $validation_message) {
        $type = $validation_message['type'] === C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_MESSAGE ? 'info' : 'danger';
        $messages[] = '<div class="text-' . $type . '">' . $validation_message['message'] . '</div>';
      }
      $suffix = '<div id="user-form-mail-validation-message">' . implode(
          "",
          $messages
        ) . '</div>';
    }
    else {
      $suffix = '<div id="user-form-mail-validation-message" class="hidden"></div>';
    }

    $form['mail']['#suffix'] = $suffix . $form['mail']['#suffix'];
  }

  // Make fieldsets incollapsible.
  $form['contact']['#collapsible'] = FALSE;
  $form['timezone']['#collapsible'] = FALSE;
  $form['mimemail']['#collapsible'] = FALSE;

  // Adjust validators.
  // Remove default one and replace it with a custom one.
  if (($key = array_search(
      'user_account_form_validate',
      $form['#validate']
    )) !== FALSE
  ) {
    unset($form['#validate'][$key]);
  }
  array_unshift($form['#validate'], 'c4m_user_profile_account_form_validate');
  // Add validator for the email field.
  $form['mail']['#element_validate'][] = 'c4m_user_profile_element_validate_mail';

  // Add custom submit handler.
  $form['#submit'][] = 'c4m_user_profile_form_user_profile_form_submit';
}

/**
 * Simple callback to redirect to user profile.
 */
function c4m_user_profile_simple_cancel(&$form, &$form_state) {
  $form_state['redirect'] = 'user';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_profile_form_user_profile_form_alter(
  &$form,
  &$form_state,
  $form_id
) {
  global $user;

  // Custom title for edit form.
  drupal_set_title(t('Edit profile'));
  $account = $form['#user'];
  $account_wrapper = entity_metadata_wrapper('user', $account);

  // Disable fields if the user is a LDAP user and the field has a default
  // value.
  if ($account_wrapper->c4m_is_ldap_user->value()) {
    if (!empty($form['c4m_organisation'][LANGUAGE_NONE][0]['value']['#default_value'])) {
      $form['c4m_organisation'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = 'disabled';
    }
  }
  // Disable the country only if the user is validated in LDAP service.
  if ($account_wrapper->c4m_is_ldap_user->value() == 1) {
    if (!empty($form['c4m_country'][LANGUAGE_NONE]['#default_value'])) {
      $form['c4m_country'][LANGUAGE_NONE]['#attributes']['disabled'] = 'disabled';
    }
  }

  // Disable fields if the user is an organisation user and the field has a
  // default value.
  if ($account_wrapper->c4m_is_organisation_user->value()) {
    if (!empty($form['c4m_organisation'][LANGUAGE_NONE][0]['value']['#default_value'])) {
      $form['c4m_organisation'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = 'disabled';
    }
    if (!empty($form['c4m_organisation_type'][LANGUAGE_NONE]['#default_value'])) {
      $form['c4m_organisation_type'][LANGUAGE_NONE]['#attributes']['disabled'] = 'disabled';
    }
  }

  c4m_user_profile_alter_user_form($form, $form_state, FALSE);

  $form['mail']['#description'] = 'Please note you will have to provide your password and confirm your new address to change your e-mail address.';

  // Hide the spammer / deleted checkboxes.
  $form['c4m_is_deleted']['#access'] = FALSE;
  $form['c4m_is_deleted_by_uid']['#access'] = FALSE;
  $form['c4m_is_deleted_anonymous']['#access'] = FALSE;
  $form['c4m_is_spammer']['#access'] = FALSE;
  // Hide status field.
  $form['account']['status']['#access'] = FALSE;
  // Remove Terms and conditions fieldset.
  $form['legal']['#access'] = FALSE;

  // Hide OG related fields for non-admin users.
  if (!in_array('administrator', $user->roles)) {
    $form['og_user_node']['#access'] = FALSE;
  }

  // Introduce simple Cancel button (goes to user profile)
  $form['actions']['cancel']['#access'] = FALSE;
  $form['actions']['simple_cancel'] = array(
    '#type' => 'button',
    '#submit' => array('c4m_user_profile_simple_cancel'),
    "#executes_submit_callback" => TRUE,
    '#value' => t('Cancel'),
  );

  $form['actions']['delete'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Delete account'), 'user/' . $account->uid . '/leave'),
  );
}

/**
 * AJAX callback for mail field validation.
 */
function c4m_user_profile_element_validate_mail_ajax($form, $form_state) {
  $ajax = array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace('#edit-mail-wrapper', render($form['mail'])),
      ajax_command_replace(
        '#edit-c4m-country-wrapper',
        render($form['c4m_country'])
      ),
      ajax_command_replace(
        '#edit-c4m-organisation-wrapper',
        render($form['c4m_organisation'])
      ),
      ajax_command_replace(
        '#edit-c4m-organisation-type-wrapper',
        render($form['c4m_organisation_type'])
      ),
    ),
  );
  return $ajax;
}

/**
 * Implements hook_c4m_captcha_form_info().
 */
function c4m_user_profile_c4m_captcha_form_info() {
  return array('user_register_form');
}

/**
 * Submit callback for user_register_form form.
 */
function c4m_user_profile_form_user_register_form_submit($form, &$form_state) {
  global $language;

  // Accept legal terms and conditions.
  $conditions = legal_get_conditions($language->language);
  legal_save_accept(
    $conditions['version'],
    $conditions['revision'],
    $conditions['language'],
    $form['#user']->uid
  );

  // Alter the default welcome message from user_registrationpassword module.
  // See user_registrationpassword_form_user_register_submit() to see how it
  // does it too.
  $message = t(
    'A welcome message with further instructions has been sent to your e-mail address.'
  );

  // Unset all messages that contain the $message.
  foreach ($_SESSION['messages']['status'] as $status => $statusmessage) {
    if ($message == $statusmessage) {
      unset($_SESSION['messages']['status'][$status]);
    }
  }
  $_SESSION['messages']['status'] = array_values(
    $_SESSION['messages']['status']
  );

  $name = $form_state['values']['c4m_first_name'][LANGUAGE_NONE][0]['value'] . ' ' . $form_state['values']['c4m_last_name'][LANGUAGE_NONE][0]['value'];

  // Set success message.
  drupal_set_message(
    t(
      'Hey @name, thank you for submitting your details. Please activate your account by clicking the link sent to your e-mail.',
      array('@name' => $name)
    )
  );

  // Always send "welcome" mail for user created by admin.
  if (user_access('administer users')) {
    _user_mail_notify('status_activated', $form['#user']);
  }

  // Process subscription to mailing list.
  if (!empty($form_state['values']['subscribe_to_mailinglist'])) {
    $email = $form_state['values']['mail'];
    if (c4m_user_profile_subscribe_to_mailing_list($email, $name)) {
      drupal_set_message(
        t(
          "Successfully subscribed to the newsletter."
        )
      );
    }
    else {
      drupal_set_message(
        t(
          "We couldn't subscribe you to the mailing list. Please try again later."
        )
      );
    }
  }
}

/**
 * Submit callback for user_register_form form.
 */
function c4m_user_profile_form_user_profile_form_submit($form, &$form_state) {
  // Redirect to user profile after submit.
  $form_state['redirect'] = 'user/' . $form_state['user']->uid;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_user_profile_form_campaignmonitor_admin_settings_general_alter(
  &$form,
  &$form_state,
  $form_id
) {
  $form['campaignmonitor_account']['#weight'] = -2;
  $form['campaignmonitor_list'] = array(
    '#type' => 'fieldset',
    '#title' => 'List settings',
    '#collapsible' => TRUE,
    '#collapsed' => !$form['campaignmonitor_account']['#collapsed'] || !empty(variable_get(
        'campaignmonitor_list_title'
      )),
    '#weight' => -1,
  );
  $form['campaignmonitor_list']['campaignmonitor_list_title'] = array(
    '#type' => 'textfield',
    '#title' => 'List Title',
    '#default_value' => variable_get('campaignmonitor_list_title'),
  );
  $form['#submit'][] = 'c4m_user_profile_form_campaignmonitor_admin_settings_general_submit';
}

/**
 * Submit callback for campaignmonitor_admin_settings_general form.
 */
function c4m_user_profile_form_campaignmonitor_admin_settings_general_submit(
  $form,
  &$form_state
) {
  if (isset($form_state['values'])) {
    variable_set(
      'campaignmonitor_list_title',
      $form_state['values']['campaignmonitor_list_title']
    );
  }
}

/**
 * Subscribe email address to mailing list.
 *
 * @param string $email_address
 *   Email address.
 * @param string $name
 *   User's name.
 *
 * @return bool
 *   TRUE if the subscribe process succeeded.
 */
function c4m_user_profile_subscribe_to_mailing_list($email_address, $name) {
  if (!$list_title = variable_get('campaignmonitor_list_title')) {
    return FALSE;
  }

  // Get connected to the API and get lists.
  $cm = CampaignMonitor::getConnector();
  $lists_info = $cm->getLists();
  $list_id = 0;
  foreach ($lists_info as $list_id => $list) {
    if ($list['name'] == $list_title) {
      break;
    }
  }

  if (!$list_id || $cm->isSubscribed($list_id, $email_address)) {
    return FALSE;
  }

  return $cm->subscribe($list_id, $email_address, $name);
}

/**
 * Implements hook_module_implements_alter().
 *
 * Our implementation needs to fire after legal module.
 */
function c4m_user_profile_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['c4m_user_profile'])) {
      $c4m_user_profile = $implementations['c4m_user_profile'];
      unset($implementations['c4m_user_profile']);
      $implementations['c4m_user_profile'] = $c4m_user_profile;

      // In order to alter the login/register form on the "c4m_user_og" module
      // we have no other way but use this hook to set the order, because of the
      // alphabetic order of the modules names.
      if (isset($implementations['c4m_user_og'])) {
        $c4m_user_profile = $implementations['c4m_user_og'];
        unset($implementations['c4m_user_og']);
        $implementations['c4m_user_og'] = $c4m_user_profile;
      }
    }

    // In order to alter the login/register form on the "c4m_user" module we
    // have no other way but use this hook to set the order, because of the
    // alphabetic order of the modules names.
    if (isset($implementations['c4m_user'])) {
      $c4m_user_profile = $implementations['c4m_user'];
      unset($implementations['c4m_user']);
      $implementations['c4m_user'] = $c4m_user_profile;
    }
  }
}

/**
 * Validator callback c4m_user_profile_account_form_validate().
 *
 * Replaces user_account_form_validate() and removes the code related to email
 * validation.
 */
function c4m_user_profile_account_form_validate($form, &$form_state) {
  if ($form['#user_category'] != 'account' && $form['#user_category'] != 'register') {
    return;
  }

  $account = $form['#user'];
  // Validate new or changing username.
  if (isset($form_state['values']['name'])) {
    if ($error = user_validate_name($form_state['values']['name'])) {
      form_set_error('name', $error);
    }
    elseif ((bool) db_select('users')->fields('users', array('uid'))->condition(
      'uid',
      $account->uid,
      '<>'
    )->condition('name', db_like($form_state['values']['name']), 'LIKE')->range(
      0,
      1
    )->execute()->fetchField()
    ) {
      form_set_error(
        'name',
        t(
          'The name %name is already taken.',
          array('%name' => $form_state['values']['name'])
        )
      );
    }
  }

  // Make sure the signature isn't longer than the size of the database field.
  // Signatures are disabled by default, so make sure it exists first.
  if (isset($form_state['values']['signature'])) {
    // Move text format for user signature into 'signature_format'.
    $form_state['values']['signature_format'] = $form_state['values']['signature']['format'];
    // Move text value for user signature into 'signature'.
    $form_state['values']['signature'] = $form_state['values']['signature']['value'];

    $user_schema = drupal_get_schema('users');
    if (drupal_strlen(
        $form_state['values']['signature']
      ) > $user_schema['fields']['signature']['length']
    ) {
      form_set_error(
        'signature',
        t(
          'The signature is too long: it must be %max characters or less.',
          array('%max' => $user_schema['fields']['signature']['length'])
        )
      );
    }
  }
}

/**
 * Validator callback for mail field.
 */
function c4m_user_profile_element_validate_mail(
  $element,
  &$form_state,
  &$form
) {
  // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
  // warnings often caused by cutting and pasting.
  $mail = trim($form_state['values']['mail']);
  form_set_value($form['mail'], $mail, $form_state);
  $validation_messages = array();

  $data['mail'] = $mail;
  $data['minimum_error_level'] = C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR;
  $data['form'] = &$form;
  // We need to always alter the form otherwise on AJAX calls (image upload),
  // the validation is run the form is cached but with wrong state for inputs.
  $data['alter_form'] = TRUE;
  $data['form_state'] = &$form_state;
  $data['validation_messages'] = &$validation_messages;

  drupal_alter('c4m_user_profile_validate_email', $data);
  drupal_alter('c4m_user_profile_validate_email_validation_messages', $data['validation_messages']);
  uasort($validation_messages, 'element_sort');

  if ($validation_messages) {
    $messages = array();
    foreach ($validation_messages as $validation_message) {
      $messages[] = $validation_message['message'];
    }
    form_error($element, implode("<br>", $messages));
  }
}

/**
 * Implements hook_c4m_user_profile_validate_email_alter().
 */
function c4m_user_profile_c4m_user_profile_validate_email_alter(&$data) {
  if (!valid_email_address($data['mail'])) {
    $data['validation_messages'][] = array(
      'message' => t(
        'The e-mail address %mail is not valid.',
        array('%mail' => $data['mail'])
      ),
      'type' => C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR,
      '#weight' => -6,
    );
    return;
  }

  $country = '';
  $organisation_name = '';
  $organisation_type = '';

  $is_ldap_user = FALSE;

  $domain_user = new C4mDomainUser($data['mail']);
  if ($domain = $domain_user->getEmailDomainByName()) {
    $ldap = new C4mLDAPUser();
    if ($ldap->isUp()) {
      $info = $ldap->getInfo($data['mail']);
      if ($info && !empty($info['valid'])) {
        $country = $info['country'];
        $organisation_name = $info['dg'];
        if (empty($organisation_name)) {
          $organisation_name = $domain->organisation_name;
        }
        $data['alter_form'] && $data['form']['c4m_is_ldap_user'][LANGUAGE_NONE]['#value'] = 1;
        $is_ldap_user = TRUE;
      }
      elseif ($whitelist_domain = $domain_user->getEmailDomainByWhitelist()) {
        $organisation_name = $whitelist_domain->organisation_name;
        $data['alter_form'] && $data['form']['c4m_is_ldap_user'][LANGUAGE_NONE]['#value'] = 2;
        $is_ldap_user = TRUE;
      }
    }
    if (!$is_ldap_user || $data['minimum_error_level'] <= C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_MESSAGE) {
      $data['validation_messages'][] = array(
        'message' => $is_ldap_user ? t(
          '<p>Your email address is validated in LDAP.</p>'
        ) : t(
          '<p>Your email address is not validated in LDAP, please !use_another_email.</p>',
          array(
            '!use_another_email' => l(
              t('use another email address'),
              '',
              array(
                'fragment' => ' ',
                'external' => TRUE,
                'attributes' => array('class' => array('use-another-email')),
              )
            ),
          )
        ),
        'type' => $is_ldap_user ? C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_MESSAGE : C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR,
        '#weight' => 4,
      );
    }
  }

  $organisation_user = new C4mOrganisationUser($data['mail']);
  if ($organisations = $organisation_user->getOrganisationsInfo()) {
    $organisation = array_shift($organisations);
    $organisation = entity_metadata_wrapper('node', $organisation);

    $organisation_type = $organisation->c4m_organisation_type->value();
    if (empty($organisation_name)) {
      $organisation_name = $organisation->title->value();
    }

    $data['alter_form'] && $data['form']['c4m_is_organisation_user'][LANGUAGE_NONE]['#value'] = 1;

    if ($data['minimum_error_level'] <= C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_MESSAGE) {
      $data['validation_messages'][] = array(
        'message' => t(
          '<p>You are recognized as member of !logo - %name<br />If you do not want to be associated with this organization, please !use_another_email.</p>',
          array(
            '!logo' => theme(
              'image_style',
              array(
                'path' => $organisation->c4m_icon->value()['uri'],
                'style_name' => 'icon_small',
              )
            ),
            '%name' => $organisation->title->value(),
            '!use_another_email' => l(
              t('use another email address'),
              '',
              array(
                'fragment' => ' ',
                'external' => TRUE,
                'attributes' => array('class' => array('use-another-email')),
              )
            ),
          )
        ),
        'type' => C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_MESSAGE,
        '#weight' => 4,
      );
    }
  }

  if ($data['alter_form']) {
    if ($country) {
      $data['form']['c4m_country'][LANGUAGE_NONE]['#attributes']['disabled'] = 'disabled';
      $data['form']['c4m_country'][LANGUAGE_NONE]['#value'] = $country;
    }
    if ($organisation_name) {
      $data['form']['c4m_organisation'][LANGUAGE_NONE][0]['value']['#attributes']['disabled'] = 'disabled';
      $data['form']['c4m_organisation'][LANGUAGE_NONE][0]['value']['#value'] = $organisation_name;
    }
    if ($organisation_type) {
      $data['form']['c4m_organisation_type'][LANGUAGE_NONE]['#attributes']['disabled'] = 'disabled';
      $data['form']['c4m_organisation_type'][LANGUAGE_NONE]['#value'] = $organisation_type;
    }
  }

  // Search for error messages.
  $has_errors = FALSE;
  foreach ($data['validation_messages'] as $key => $message) {
    if (isset($message['type']) && $message['type'] == C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR) {
      $has_errors = TRUE;
      break;
    }
  }

  // Only keep the error messages if there're.
  if ($has_errors) {
    foreach ($data['validation_messages'] as $key => $message) {
      if (isset($message['type']) && $message['type'] != C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR) {
        unset($data['validation_messages'][$key]);
      }
    }
  }

  if (!($other_user = user_load_by_mail(
      $data['mail']
    )) || isset($data['form_state']['user']->uid) && $other_user->uid == $data['form_state']['user']->uid
  ) {
    return;
  }

  $other_user = entity_metadata_wrapper('user', $other_user);
  if ($other_user->status->value()) {
    $data['validation_messages'][] = array(
      'message' => t(
        'This account is already in use. If this is you, please !login or !request_password.',
        array(
          '!login' => l(t('log in'), 'user/login'),
          '!request_password' => l(
            t('request a new password'),
            'user/password'
          ),
        )
      ),
      'type' => C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR,
      '#weight' => -5,
    );
  }
  else {
    if (!$other_user->last_login->value() && !$other_user->last_access->value()
    ) {
      $data['validation_messages'][] = array(
        'message' => t(
          'This email address is already in use. Please activate your account, or !resend_activation.',
          array(
            '!resend_activation' => l(
              t('re-send the activation mail'),
              'user/' . $other_user->uid->value() . '/resend-activation-email'
            ),
          )
        ),
        'type' => C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR,
        '#weight' => -4,
      );
    }
    if ($other_user->c4m_is_spammer->value()) {
      $data['validation_messages'][] = array(
        'message' => t(
          'This account has been blocked. !contact site administrator for more information.',
          array(
            '!contact' => l(t('Contact'), 'contact'),
          )
        ),
        'type' => C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR,
        '#weight' => 1,
      );
    }
    if ($other_user->c4m_is_deleted->value()) {
      $data['validation_messages'][] = array(
        'message' => t(
          'There is a problem with your account, please !contact the site administrators.',
          array(
            '!contact' => l(t('contact'), 'contact'),
          )
        ),
        'type' => C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR,
        '#weight' => 2,
      );
    }
  }
}

/**
 * Implements hook_c4m_user_profile_validate_email_validation_messages_alter().
 */
function c4m_user_profile_c4m_user_profile_validate_email_validation_messages_alter(&$messages) {
  // Search for error messages.
  $has_errors = FALSE;
  foreach ($messages as $key => $message) {
    if (isset($message['type']) && $message['type'] == C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR) {
      $has_errors = TRUE;
      break;
    }
  }

  // Only keep the error messages if there're.
  if ($has_errors) {
    foreach ($messages as $key => $message) {
      if (isset($message['type']) && $message['type'] != C4M_USER_PROFILE_VALIDATION_MESSAGE_TYPE_ERROR) {
        unset($messages[$key]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Replace the user_login_name_validate() from the user_login form.
 */
function c4m_user_profile_form_user_login_alter(
  &$form,
  &$form_state,
  $form_id
) {
  // If Drupal Core's "user_login_name_validate"-function is present, remove it.
  if (($key = array_search(
      'user_login_name_validate',
      $form['#validate']
    )) !== FALSE
  ) {
    unset($form['#validate'][$key]);
  }

  // Add our custom "user_login_validate" instead.
  array_unshift($form['#validate'], 'c4m_user_profile_user_login_validate');
}

/**
 * Validate callback for user_login form.
 *
 * @see user_login_name_validate()
 */
function c4m_user_profile_user_login_validate($form, &$form_state) {
  if (empty($form_state['values']['name'])) {
    return;
  }
  $account = user_load_by_name($form_state['values']['name']);

  // Username not found.
  if (!$account) {
    return;
  }

  // User is active.
  if (!empty($account->status)) {
    return;
  }

  $account = entity_metadata_wrapper('user', $account);
  if (!$account->c4m_is_deleted->value() && !$account->c4m_is_spammer->value() && !$account->last_login->value()) {
    $message = t(
      'You used valid credentials but your account is not activated yet. Use the !password_recovery form to resend the activation email.',
      array('!password_recovery' => l(t('password recovery'), 'user/password'))
    );
  }
  elseif ($account->c4m_is_spammer->value()) {
    $message = t(
      'This account has been blocked, for more information please !contact an administrator.',
      array('!contact' => l(t('contact'), 'contact'))
    );
  }
  elseif ($account->c4m_is_deleted->value()) {
    $message = t(
      'There is a problem with your account, please !contact the site administrators.',
      array('!contact' => l(t('contact'), 'contact'))
    );
  }
  else {
    $message = t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password')));
  }
  form_set_error('name', $message);
}

/**
 * Implements hook_context_registry().
 */
function c4m_user_profile_context_registry() {
  $registry['conditions'] = array(
    'c4m_user' => array(
      'title' => t('C4M User Profile'),
      'plugin' => 'c4m_user_profile_context_user',
    ),
  );
  return $registry;
}

/**
 * Implements hook_context_plugins().
 */
function c4m_user_profile_context_plugins() {
  $plugins['c4m_user_profile_context_user'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'c4m_user_profile') . '/plugins',
      'file' => 'c4m_user_profile_context_user.inc',
      'class' => 'c4m_user_profile_context_user',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_init().
 */
function c4m_user_profile_init() {
  global $user;

  if ($user->uid && $plugin = context_get_plugin('condition', 'c4m_user')) {
    $plugin->execute($user);
  }
}

/**
 * Render a hash for a specific user.
 *
 * @param mixed $account
 *   A user account.
 *
 * @return string
 *   The hash string.
 */
function c4m_user_profile_render_user_unsubscribe_hash($account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  $full_name = c4m_user_name($account);
  $wrapper = entity_metadata_wrapper('user', $account);
  $username = $wrapper->name->value();
  $mail = $wrapper->mail->value();
  $organisation = $wrapper->c4m_organisation->value();

  return md5($username . $mail . $full_name . $organisation . REQUEST_TIME);
}

/**
 * Implements hook_user_presave().
 *
 * Adding the unsubscribe hash to the user profile when it is not a new profile.
 */
function c4m_user_profile_user_presave(&$edit, $account, $category) {
  if ($account->is_new) {
    return;
  }

  $wrapper = entity_metadata_wrapper('user', $account);
  $wrapper->c4m_unsubscribe_hash->set(
    c4m_user_profile_render_user_unsubscribe_hash($account)
  );
}

/**
 * Access callback; Unsubscribe a user.
 *
 * @param object $account
 *   The user ID.
 * @param string $entity_type
 *   The flag suffix to unsubscribe from.
 * @param string $entity_id
 *   The ID of the entity to unsubscribe from.
 * @param string $hash
 *   The unsubscribe hash string.
 *
 * @return bool
 *   TRUE if user has access.
 */
function c4m_user_profile_unsubscribe_user_access(
  $account,
  $entity_type,
  $entity_id,
  $hash
) {
  if (!$account || c4m_user_is_spammer($account) || $account->status === 0) {
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper('user', $account);
  if ($wrapper->c4m_unsubscribe_hash->value() != $hash) {
    return FALSE;
  }

  // Validate we have an optout field for the current entity type.
  if (!isset($wrapper->{"c4m_optout_{$entity_type}"})) {
    return FALSE;
  }

  // Validate entity ID.
  try {
    if ($entity_type == 'group' || $entity_type == 'comment') {
      $entity_type = 'node';
    }
    $wrapper = entity_metadata_wrapper($entity_type, $entity_id);
    if (!$wrapper->value()) {
      return FALSE;
    }
  }
  catch (\EntityMetadataWrapperException $e) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Page callback; Unsubscribe a user.
 *
 * @param object $account
 *   The user account.
 * @param string $entity_type
 *   The flag suffix to unsubscribe from.
 * @param string $entity_id
 *   The ID of the entity to unsubscribe from.
 */
function c4m_user_profile_unsubscribe_user($account, $entity_type, $entity_id) {
  $wrapper = entity_metadata_wrapper('user', $account);
  $field = "c4m_optout_{$entity_type}";
  foreach ($wrapper->$field->value(
    array('identifier' => TRUE)
  ) as $existing_id) {
    if ($existing_id == $entity_id) {
      // User already unsubscribed from entity.
      drupal_set_message(t('Already unsubscribed'), 'warning');
      drupal_goto();
    }
  }

  $wrapper->{$field}[] = $entity_id;
  $wrapper->save();
  drupal_set_message(t('Successfully unsubscribed'));
  drupal_goto();
}

/**
 * Implements hook_message_subscribe_get_subscribers_alter().
 *
 * Remove unsubscribed users from the list when sending a notification.
 */
function c4m_user_profile_message_subscribe_get_subscribers_alter(
  &$uids,
  $values
) {
  $entity_type = $values['context']['entity_type'];
  $entity_id = $values['context']['entity_id'];
  $uids = c4m_user_profile_get_subscribed($entity_type, $entity_id, $uids);
}

/**
 * Check which of the given users are subscribed.
 *
 * A subscribed user is one who unsubscribed from a specific entity.
 *
 * @param string $entity_type
 *   The entity type of the content.
 * @param string $entity_id
 *   The entity ID of the content.
 * @param array $uids
 *   Array containing users IDs.
 *
 * @return array
 *   Array containing all subscribed users IDs.
 */
function c4m_user_profile_get_subscribed(
  $entity_type,
  $entity_id,
  $uids = array()
) {
  if (!$uids) {
    return array();
  }

  $uids_keys = array_keys($uids);
  // Using db_select instead of user_load_multiple to optimize the performance.
  $query = db_select("field_data_c4m_optout_{$entity_type}", 'o');
  $query
    ->fields('o', array('entity_id'))
    ->condition('entity_id', $uids_keys, 'IN')
    ->condition("c4m_optout_{$entity_type}_target_id", $entity_id);

  $unsubscribers = $query->execute()->fetchAllKeyed(0, 0);

  // Unset unsubscribers from $uids array.
  foreach ($unsubscribers as $unsubscriber) {
    if (in_array($unsubscriber, $uids_keys)) {
      unset($uids[$unsubscriber]);
    }
  }

  return $uids;
}

/**
 * Implements hook_field_access().
 *
 * Deny access to all 'optout' fields + the hash field.
 */
function c4m_user_profile_field_access(
  $op,
  $field,
  $entity_type,
  $entity,
  $account
) {
  $optout_fields = array(
    'c4m_optout_comment',
    'c4m_optout_group',
    'c4m_optout_node',
    'c4m_optout_taxonomy_term',
    'c4m_unsubscribe_hash',
  );

  if (in_array($field['field_name'], $optout_fields)) {
    return FALSE;
  }
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_user_profile_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_user_expertise_topics' => array(
      'type' => 'expertise_topics',
      'context' => 'user',
      'callback' => 'c4m_user_profile_get_expertise_topics',
    ),
  );
}

/**
 * Returns the expertise topics count for an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Count.
 */
function c4m_user_profile_get_expertise_topics($uid) {
  $query = db_select('field_data_c4m_vocab_topic_expertise', 'e');
  $query->fields('e', array('delta'));
  $query->condition('entity_type', 'user');
  $query->condition('entity_id', $uid);

  $query = $query->execute();
  $amount = $query->rowCount();

  return $amount;
}

/**
 * Implements hook_user_cancel_methods_alter().
 *
 * Adds a new cancellation method that reassigns the content to the anonymous
 * user without deleting the user account.
 */
function c4m_user_profile_user_cancel_methods_alter(&$methods) {
  $methods['user_block_reassign'] = array(
    'title' => t(
      'Block the account and make its content belong to the %anonymous-name user.',
      array('%anonymous-name' => variable_get('anonymous', t('Anonymous')))
    ),
    'description' => t(
      'Your account will be blocked. All of your content will be assigned to the %anonymous-name user.',
      array('%anonymous-name' => variable_get('anonymous', t('Anonymous')))
    ),
  );
}

/**
 * Implements hook_user_cancel().
 *
 * Implements the functionality for the custom cancellation method that blocks
 * and reassigns.
 * Removes all user cookies and session information when an user leaves the
 * platform.
 */
function c4m_user_profile_user_cancel($edit, $account, $method) {
  // By default, the cancellation blocks the user, so we only care about the
  // content reassign that is already implemented in the node hook
  // implementation.
  if ($method == 'user_block_reassign') {
    node_user_cancel($edit, $account, 'user_cancel_reassign');
  }

  // Remove all the cookies.
  // @see http://www.php.net/manual/en/function.setcookie.php#73484
  if (isset($_SERVER['HTTP_COOKIE'])) {
    $cookies = explode(';', $_SERVER['HTTP_COOKIE']);

    foreach ($cookies as $cookie) {
      $parts = explode('=', $cookie);
      $name = trim($parts[0]);
      // Cookies can't be really deleted as they are in the user browser.
      // Instead of deleted, we set a expiration date in the past so the brower
      // sees the cookie has expired and removes it.
      // The two set cookies is to ensure that the cookie is removed
      // independently if is set on the current path or the full site.
      unset($_COOKIE[$name]);
      setcookie($name, '', -1);
      setcookie($name, '', -1, '/');
    }
  }

  // Remove all the session information.
  $query = db_delete('sessions');
  $query->condition('uid', $account->uid);
  $query->execute();
}
