<?php
/**
 * @file
 * Extra functionality for comments.
 */

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function c4m_comment_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];

  // We only allow general access to the comment settings for OG content.
  if (!og_is_group_content_type('node', $node->type)) {
    return;
  }

  // If the user has access to the node form, he can also change the comment
  // settings for this content entry.
  $form['comment_settings']['#access'] = TRUE;
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_comment_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_comment' => array(
        'type' => 'comment',
        'entity_type' => 'comment',
        'bundles' => array(),
        'singular' => 'Post',
        'plural' => 'Posts',
        'state' => 1,
        'aggregate' => array(
          'type' => 'posts',
        ),
        'weight' => 1,
        'attributes' => array(
          'class' => array('posts'),
        ),
      ),
    ),
    'group' => array(
      'c4m_og_comment' => array(
        'type' => 'comment',
        'entity_type' => 'comment',
        'bundles' => array(),
        'singular' => 'Comment',
        'plural' => 'Comments',
        'state' => 1,
        'aggregate' => array(),
        'weight' => 6,
        'attributes' => array(
          'class' => array('og-comments'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_comment_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_og_comments' => array(
      'type'      => 'comment',
      'context'   => 'group',
      'callback'  => 'c4m_og_group_comment_metric',
      'weight'    => 0,
    ),
  );
}

/**
 * Implements hook_node_view_alter().
 *
 * @see comment_node_view()
 * @see comment_node_page_additions()
 */
function c4m_comment_node_view_alter(&$build) {
  $node = $build['#node'];
  $view_mode = $build['#view_mode'];
  // Only append comments when we are building a node on its own node detail
  // page. We compare $node and $page_node to ensure that comments are not
  // appended to other nodes shown on the page, for example a node_reference
  // displayed in 'full' view mode within another node.
  if ($node->comment && $view_mode == 'full' && node_is_page(
      $node
    ) && empty($node->in_preview)
  ) {
    // There are no comments yet but comments are enabled.
    if (user_is_anonymous() && $node->comment == COMMENT_NODE_OPEN) {
      $register_link = l(t('Register'), 'user/register');
      $login_link = l(
        t('log in'),
        'user/login',
        array(
          'query' => drupal_get_destination(),
        )
      );

      $text = '<p>' . t(
          '!register or !login to comment',
          array(
            '!register' => $register_link,
            '!login' => $login_link,
          )
        ) . '</p>';

      if (empty($build['comments'])) {
        $build['comments'] = array(
          '#markup' => $text,
        );
      }
      else {
        $build['comments']['comments'][] = array(
          '#markup' => $text,
        );
      }
    }
  }
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_comment_c4m_helper_entity_label_info() {
  return array(
    'comment' => array(
      'article' => t('a'),
      'singular' => t('comment'),
      'plural' => t('comments'),
      'insert action' => t('commented on'),
      'update action' => t('updated a comment'),
      'icon' => 'fa-comments',
    ),
  );
}
