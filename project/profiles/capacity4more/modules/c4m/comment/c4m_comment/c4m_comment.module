<?php

/**
 * @file
 * Extra functionality for comments.
 */

/**
 * Implements hook_module_implements_alter().
 *
 * In order to be able to alter the node form after the "Comment" module,
 * we have to make sure that the hook "form_alter" of the "c4m_comment" module
 * called last.
 * Note that we use "form_alter" hook here even though we actually implement
 * "form_BASE_FORM_ID_alter", but this is correct :-)
 *
 * @see hook_module_implements_alter()
 */
function c4m_comment_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['c4m_comment'])) {
    $group = $implementations['c4m_comment'];
    unset($implementations['c4m_comment']);
    $implementations['c4m_comment'] = $group;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function c4m_comment_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];

  // Remove the comment settings if the default is set to be closed.
  // --> Project specific approach!
  $comment_default_mode = variable_get('comment_' . check_plain($node->type), NULL);
  if ($comment_default_mode == COMMENT_NODE_CLOSED) {
    $form['comment_settings']['#access'] = FALSE;
    return;
  }

  // We only allow general access to the comment settings for OG content.
  if (!og_is_group_content_type('node', $node->type)) {
    return;
  }

  // If the user has access to the node form, he can also change the comment
  // settings for this content entry.
  $form['comment_settings']['#access'] = TRUE;
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_comment_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_comment' => array(
        'type' => 'comment',
        'entity_type' => 'comment',
        'bundles' => array(),
        'singular' => 'Post',
        'plural' => 'Posts',
        'state' => 1,
        'skip_access_check' => TRUE,
        'aggregate' => array(
          'type' => 'posts',
        ),
        'weight' => 1,
        'attributes' => array(
          'class' => array('posts'),
        ),
      ),
    ),
    'group' => array(
      'c4m_og_comment' => array(
        'type' => 'comment',
        'entity_type' => 'comment',
        'bundles' => array(),
        'singular' => 'Comment',
        'plural' => 'Comments',
        'state' => 1,
        'aggregate' => array(),
        'weight' => 6,
        'attributes' => array(
          'class' => array('og-comments'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_comment_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_og_comments' => array(
      'type'      => 'comment',
      'context'   => 'group',
      'callback'  => 'c4m_og_group_comment_metric',
      'weight'    => 0,
    ),
    'c4m_user_comments' => array(
      'type' => 'comments',
      'context'   => 'user',
      'callback'  => 'c4m_comment_get_comments_by_user',
    ),
  );
}

/**
 * Returns the number of comments for a particular user.
 *
 * @param int $uid
 *   User ID.
 *
 * @return int
 *   Number of comments.
 */
function c4m_comment_get_comments_by_user($uid) {
  $arguments = array(
    'entity_type' => 'comment',
    'uid' => $uid,
  );

  return c4m_helper_entity_get_number_of_entities($arguments);
}

/**
 * Implements hook_node_view_alter().
 *
 * @see comment_node_view()
 * @see comment_node_page_additions()
 */
function c4m_comment_node_view_alter(&$build) {
  $node = $build['#node'];
  $view_mode = $build['#view_mode'];
  // Only append comments when we are building a node on its own node detail
  // page. We compare $node and $page_node to ensure that comments are not
  // appended to other nodes shown on the page, for example a node_reference
  // displayed in 'full' view mode within another node.
  if ($node->comment && $view_mode == 'full' && node_is_page(
      $node
    ) && empty($node->in_preview)
  ) {
    // There are no comments yet but comments are enabled.
    if (user_is_anonymous() && $node->comment == COMMENT_NODE_OPEN) {
      $register_link = l(t('Register'), 'user/register');
      $login_link = l(
        t('log in'),
        'user/login',
        array(
          'query' => drupal_get_destination(),
        )
      );

      $text = '<p class="margin--top">' . t(
          '!register or !login to comment',
          array(
            '!register' => $register_link,
            '!login' => $login_link,
          )
        ) . '</p>';

      if (empty($build['comments'])) {
        $build['comments'] = array(
          '#markup' => $text,
        );
      }
      else {
        $build['comments']['comments'][] = array(
          '#markup' => $text,
        );
      }
    }
  }
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_comment_c4m_helper_entity_label_info() {
  return array(
    'comment' => array(
      'article' => t('a'),
      'singular' => t('comment'),
      'plural' => t('comments'),
      'insert action' => t('commented on'),
      'update action' => t('updated a comment'),
      'icon' => 'fa-comments',
    ),
  );
}

/**
 * Implements hook_user_cancel().
 *
 * Since we use a different method, we should cover the anonymize content for
 * comments manually as well.
 */
function c4m_comment_user_cancel($edit, $account, $method) {
  if (!in_array($method, c4m_user_profile_get_cancel_methods_to_reassign())) {
    return;
  }

  $comments = comment_load_multiple(array(), array('uid' => $account->uid));
  foreach ($comments as $comment) {
    $comment->uid = 0;
    // The comment instance saves the original username as well.
    $comment->name = t('Anonymous');
    comment_save($comment);
  }
}

/**
 * Implements hook_comment_view().
 *
 * When a user is forbidden to take actions on a comment we should display the
 * links only once, hence we remove it from all threads besides the main one.
 */
function c4m_comment_comment_view($comment, $view_mode, $langcode) {
  // The comment is not forbidden for actions.
  if (empty($comment->content['links']['comment']['#links']['comment_forbidden'])) {
    return;
  }

  unset($comment->content['links']['comment']['#links']['comment_forbidden']);
}
