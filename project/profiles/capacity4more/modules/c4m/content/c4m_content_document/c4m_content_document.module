<?php

/**
 * @file
 * Code for the Document content type feature.
 */

include_once 'c4m_content_document.features.inc';

/**
 * Implements hook_c4m_og_vocab_info_content().
 */
function c4m_content_document_c4m_og_vocab_info_content() {
  return array(
    'document' => array(
      'entity_type' => 'node',
      'bundle' => 'document',
      'vocabularies' => array(
        'c4m_vocab_category',
        'c4m_vocab_tag',
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Verifies user has access to the form.
 * Adds our own submit handler as the last one.
 */
function c4m_content_document_form_document_node_form_alter(array &$form, array $form_state) {
  c4m_content_create_group_content_access();
  // Hide field Add to library from user.
  $form['c4m_document_add_to_library']['#access'] = FALSE;

  c4m_og_add_content_author_options_to_power_users($form);

  if (strpos(url(current_path()), 'overlay')) {
    // If this is overlay page - add our own submit handler.
    $form['actions']['submit']['#submit'][] = 'c4m_content_document_form_document_node_form_submit';

    // Documents created via the overlay (document widget) should not render an
    // activity stream (indirect document addition).
    $form_state['node']->_skip_message = TRUE;
  }
}

/**
 * Form Submit; Do not redirect the overlay to the node page after submit.
 *
 * Add 'close_overlay' after submitting to let the javascript know,
 * that overlay should be closed.
 */
function c4m_content_document_form_document_node_form_submit($form, &$form_state) {
  $form_state['redirect'] = current_path() . '/close_overlay';
}

/**
 * Define fields.
 *
 * These fields are not overridden through the interface.
 * If you want those, look at hook_ds_custom_fields_info().
 *
 * @param string $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return array
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function c4m_content_document_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_content_document');

  $fields['node']['c4m_content_document_icon'] = [
    'title' => t('Document icon'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => ['document|*'],
    'file' => $path . '/includes/c4m_content_document.theme.inc',
    'function' => 'theme_c4m_content_document_icon',
    'properties' => [
      'default' => t('Default'),
    ],
  ];

  $fields['node']['c4m_content_document_type_size'] = [
    'title' => t('Document type and size'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => ['document|*'],
    'file' => $path . '/includes/c4m_content_document.theme.inc',
    'function' => 'theme_c4m_content_document_type_size',
    'properties' => [
      'default' => t('Default'),
    ],
  ];

  $fields['node']['c4m_content_document_ds_field_pdf_preview'] = [
    'title' => t('C4M PDF preview'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => ['document|full'],
    'file' => $path . '/includes/c4m_content_document.theme.inc',
    'function' => 'c4m_content_document_ds_field_pdf_preview',
    'properties' => [
      'default' => t('Default'),
    ],
  ];

  return $fields;
}

/**
 * Implements hook_entity_type_label_alter().
 */
function c4m_content_document_entity_type_label_alter(&$variables) {
  if (empty($variables['entity']->type) ||
      'document' !== $variables['entity']->type) {
    return;
  }
  $variables['label'] .= ' ' . ('uploaded by');
}

/**
 * Returns the amount of document downloads.
 *
 * @param int $og_id
 *   The Organic Group ID to eventually limit the query for.
 *
 * @return int
 *   The amount of document downloads.
 */
function c4m_content_document_get_number_of_downloads($og_id = NULL) {
  $query = db_select('file_download_count', 'dc');
  $query->fields('dc');
  $query->join('field_data_c4m_document', 'd', 'dc.fid = d.c4m_document_fid');
  $query->join('node', 'n', 'n.nid = d.entity_id');
  $query->condition('d.entity_type', 'node');
  $query->condition('n.status', 1);
  $query->addTag('node_access');

  if ($og_id) {
    $query->join('og_membership', 'og', "n.nid = og.etid AND og.entity_type = 'node'");
    $query->condition('og.gid', $og_id);
  }

  $query = $query->execute();
  $amount = $query->rowCount();

  return $amount;
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_content_document_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_documents' => array(
        'type'        => 'document',
        'entity_type' => 'node',
        'bundles'     => array('document'),
        'singular'    => 'Post',
        'plural'      => 'Posts',
        'state'       => 1,
        'skip_access_check' => TRUE,
        'aggregate'   => array(
          'type' => 'posts',
        ),
        'weight'      => 1,
        'attributes'  => array(
          'class' => array('posts'),
        ),
        'link' => array(
          'path' => 'search',
        ),
      ),
    ),
    'group' => array(
      'c4m_og_documents' => array(
        'type'          => 'document',
        'entity_type'   => 'node',
        'bundles'       => array('document'),
        'singular'      => 'Document',
        'plural'        => 'Documents',
        'state'         => 1,
        'aggregate'     => array(),
        'weight'        => 2,
        'feature_name'  => 'c4m_features_og_documents',
        'attributes'    => array(
          'class' => array('og-documents'),
        ),
        'link'          => array(
          'path' => 'documents',
        ),
      ),
    ),
    'project' => array(
      'c4m_og_documents' => array(
        'type'          => 'document',
        'entity_type'   => 'node',
        'bundles'       => array('document'),
        'singular'      => 'Document',
        'plural'        => 'Documents',
        'state'         => 1,
        'aggregate'     => array(),
        'weight'        => 2,
        'feature_name'  => 'c4m_features_og_documents',
        'attributes'    => array(
          'class' => array('og-documents'),
        ),
        'link'          => array(
          'path' => 'documents',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_documents' => array(
        'type'          => 'document',
        'entity_type'   => 'node',
        'bundles'       => array('document'),
        'singular'      => 'Document',
        'plural'        => 'Documents',
        'state'         => 1,
        'aggregate'     => array(),
        'weight'        => 5,
        'attributes'    => array(
          'class' => array('topic-documents'),
        ),
        'link'          => array(
          'path' => 'search',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic:@TOPIC_ID',
                'type:document',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_document_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_og_documents' => array(
      'type'      => 'document',
      'context'   => 'group',
      'callback'  => 'c4m_og_group_node_metric',
      'arguments' => array(array('document')),
      'weight'    => 0,
    ),
    'c4m_og_document_downloads' => array(
      'type'     => 'document_download',
      'context'  => 'group',
      'callback' => 'c4m_content_document_get_number_of_downloads',
      'weight'   => 3,
    ),
    'c4m_user_documents' => array(
      'type' => 'documents',
      'context'  => 'user',
      'callback'  => 'c4m_user_get_node_metric',
      'arguments' => array(array('document')),
    ),
  );
}

/**
 * Implements hook_c4m_content_share_fields_info().
 */
function c4m_content_document_c4m_content_share_fields_info() {
  return array(
    'document' => array(
      'type',
      'c4m_vocab_document_type',
      'c4m_document_add_to_library',
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_document_c4m_helper_entity_label_info() {
  return array(
    'document' => array(
      'article' => t('a'),
      'singular' => t('document'),
      'plural' => t('documents'),
      'insert action' => t('uploaded a new Document'),
      'update action' => t('updated the Document'),
      'icon' => 'fa-file-o',
    ),
  );
}
