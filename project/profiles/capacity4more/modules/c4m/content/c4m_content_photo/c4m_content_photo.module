<?php

/**
 * @file
 * Code for the Photo content type feature.
 */

include_once 'c4m_content_photo.features.inc';

/**
 * Implements hook_theme_registry_alter().
 */
function c4m_content_photo_theme_registry_alter(&$theme_registry) {
  $theme_registry['node_gallery_api_item_navigator']['path'] = drupal_get_path(
      'module',
      'c4m_content_photo'
    ) . "/theme";
}

/**
 * Implements hook_node_presave().
 *
 * If a photo was uploaded and if is part of a photo album rename Album name
 * along with a numerical suffix.
 */
function c4m_content_photo_node_presave($node) {
  if ($node->type != 'photo') {
    // Node is not a photo.
    return;
  }

  if (!empty($node->nid)) {
    // Node is already saved.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  if (!$wrapper->node_gallery_ref_1->getIdentifier()) {
    // Photo is not part of an album.
    return;
  }

  // Determine whether a photo has been created while creating its photo album.
  if (c4m_content_photo_is_part_of_photo_album_creation($node)) {
    $wrapper->c4m_created_with_photo_album->set(1);
  }

  $source = file_load($wrapper->c4m_media->value()['fid']);
  $gallery_title = $wrapper->node_gallery_ref_1->label();
  $destination = drupal_dirname(
      $source->uri
    ) . '/' . transliteration_clean_filename($gallery_title) . '.' . pathinfo(
      $source->uri,
      PATHINFO_EXTENSION
    );
  $new_file = file_move($source, $destination, FILE_EXISTS_RENAME);

  if (!empty($node->_create_form)) {
    // This node was created in a regular Drupal form, as opposed to the node
    // gallery multiple files upload.
    // In that case the user has already added the title for the node, so we
    // don't want to change it.
    return;
  }

  // Set the title to be like the new given file name.
  $wrapper->title->set(drupal_basename($new_file->uri));
}

/**
 * Implements hook_menu().
 */
function c4m_content_photo_menu() {
  $items['admin/config/c4m/photo'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_content_photo_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'title' => 'Photo Settings',
    'description' => 'Manage the Photo type',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Gets the allowed threshold time between a photo and a photo album creation.
 *
 * In order to determine if a photo was uploaded as part of the creation of a
 * photo album, we set a threshold.
 *
 * @return int
 *   The allowed threshold time.
 */
function c4m_content_photo_get_photo_allowed_threshold_time() {
  return intval(variable_get('c4m_photo_part_of_photo_album_threshold', 30));
}

/**
 * Form builder for the photo type settings.
 */
function c4m_content_photo_admin_settings_form($form, &$form_state) {
  $form['c4m_photo_part_of_photo_album_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowed threshold time between photo and photo album creation (in minutes)'),
    '#description' => t('In order to determine if a photo was uploaded as part of the creation of a photo album, we set a threshold.'),
    '#default_value' => c4m_content_photo_get_photo_allowed_threshold_time(),
  );

  return system_settings_form($form);
}

/**
 * Validate handler for c4m_content_photo_admin_settings_form.
 */
function c4m_content_photo_admin_settings_form_validate($form, $form_state) {
  $threshold_value = $form_state['values']['c4m_photo_part_of_photo_album_threshold'];
  if (empty($threshold_value)) {
    form_set_error('c4m_photo_part_of_photo_album_threshold', t('Threshold time can not be empty.'));
  }
  if (intval($threshold_value) <= 0) {
    form_set_error('c4m_photo_part_of_photo_album_threshold', t('Threshold time must be a valid integer greater than 0.'));
  }
}

/**
 * Determine if a photo was uploaded as part of a creation of a photo album.
 *
 * @param object $node
 *   The photo object.
 *
 * @return bool
 *   TRUE whether a photo was uploaded as part of the creation of the photo
 *   album, otherwise returns FALSE.
 */
function c4m_content_photo_is_part_of_photo_album_creation($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  if ($node->type != 'photo' || !$wrapper->node_gallery_ref_1->getIdentifier()) {
    // Photo is not part of an album.
    return FALSE;
  }

  $delta = $wrapper->created->value() - $wrapper->node_gallery_ref_1->created->value();
  $allowed_threshold = 60 * c4m_content_photo_get_photo_allowed_threshold_time();

  return $delta <= $allowed_threshold;
}

/**
 * Implements form_FORM_ID_alter().
 *
 * Verifies user has access to the form.
 * Indicate a node is being created via the regular node form.
 *
 * @see c4m_content_photo_node_presave()
 */
function c4m_content_photo_form_photo_node_form_alter(&$form, $form_state) {
  // Add author information to the edit discussion form.
  c4m_og_add_content_author_options_to_power_users($form);

  // The "c4m_created_with_photo_album" is being set automatically when
  // creating a new photo and any user should not be able to change this data.
  $form['c4m_created_with_photo_album']['#access'] = FALSE;

  $node = &$form['#node'];
  if (!empty($node->nid)) {
    return;
  }

  // Indicate this node is created from a Drupal form.
  $node->_create_form = TRUE;
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_content_photo_c4m_content_statistics_info() {
  return array(
    'group' => array(
      'c4m_og_media' => array(
        'type' => 'photo',
        'entity_type' => 'node',
        'bundles' => array('photo', 'photoalbum'),
        'singular' => 'Media item',
        'plural' => 'Media items',
        'state' => 1,
        'aggregate' => NULL,
        'weight' => 5,
        'feature_name' => 'c4m_features_og_media',
        'attributes' => array(
          'class' => array('og-media'),
        ),
        'link' => array(
          'path' => 'media',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_photo_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_og_photos' => array(
      'type' => 'photo',
      'context' => 'group',
      'callback' => 'c4m_og_group_node_metric',
      'arguments' => array(array('photo')),
      'weight' => 2,
    ),
  );
}

/**
 * Implements hook_c4m_content_share_fields_info().
 */
function c4m_content_photo_c4m_content_share_fields_info() {
  return array(
    'photo' => array(
      'type',
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_photo_c4m_helper_entity_label_info() {
  return array(
    'photo' => array(
      'article' => t('a'),
      'singular' => t('photo'),
      'plural' => t('photos'),
      'insert action' => t('added a new Photo'),
      'update action' => t('updated the photo'),
      'icon' => 'fa-file-picture-o',
    ),
  );
}

/**
 * Implements hook_preprocess().
 *
 * Disable the purl on the links producing by the node_gallery module.
 */
function c4m_content_photo_preprocess(&$variables, $hook) {
  if ($hook != 'node_gallery_api_item_navigator') {
    return;
  }

  $options = array(
    'absolute' => TRUE,
    'purl' => array(
      'disabled' => TRUE,
    ),
  );

  // Modify the links with absolute path and no purl.
  if (isset($variables['gallery_link'])) {
    $variables['gallery_link'] = url($variables['gallery_link'], $options);
  }
  if (isset($variables['next_link'])) {
    $variables['next_link'] = url($variables['next_link'], $options);
  }
  if (isset($variables['last_link'])) {
    $variables['last_link'] = url($variables['last_link'], $options);
  }
  if (isset($variables['prev_link'])) {
    $variables['prev_link'] = url($variables['prev_link'], $options);
  }
}
