<?php

/**
 * @file
 * Code for the Photo content type feature.
 */

include_once 'c4m_content_photo.features.inc';

/**
 * Implements hook_theme_registry_alter().
 */
function c4m_content_photo_theme_registry_alter(&$theme_registry) {
  $theme_registry['node_gallery_api_item_navigator']['path'] = drupal_get_path('module', 'c4m_content_photo') . "/theme";
}

/**
 * Implements hook_node_presave().
 *
 * If a photo was uploaded and if is part of a photo album rename Album name
 * along with a numerical suffix.
 */
function c4m_content_photo_node_presave($node) {
  if ($node->type != 'photo') {
    // Node is not a photo.
    return;
  }

  if (!empty($node->nid)) {
    // Node is already saved.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  if (!$wrapper->node_gallery_ref_1->getIdentifier()) {
    // Photo is not part of an album.
    return;
  }

  $source = file_load($wrapper->c4m_media->value()['fid']);
  $gallery_title = $wrapper->node_gallery_ref_1->label();
  $destination = drupal_dirname($source->uri) . '/' . transliteration_clean_filename($gallery_title) . '.' . pathinfo($source->uri, PATHINFO_EXTENSION);
  $new_file = file_move($source, $destination, FILE_EXISTS_RENAME);

  if (!empty($node->_create_form)) {
    // This node was created in a regular Drupal form, as opposed to the node
    // gallery multiple files upload.
    // In that case the user has already added the title for the node, so we
    // don't want to change it.
    return;
  }

  // Set the title to be like the new given file name.
  $wrapper->title->set(drupal_basename($new_file->uri));
}

/**
 * Implements form_FORM_ID_alter().
 *
 * Indicate a node is being created via the regular node form.
 *
 * @see c4m_content_photo_node_presave()
 */
function c4m_content_photo_form_photo_node_form_alter(&$form, $form_state) {
  $node = &$form['#node'];
  if (!empty($node->nid)) {
    return;
  }

  // Indicate this node is created from a Drupal form.
  $node->_create_form = TRUE;
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_photo_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_og_photos' => array(
      'type' => 'photo',
      'context' => 'group',
      'callback' => 'c4m_og_group_node_metric',
      'arguments' => array(array('photo')),
      'weight' => 2,
    ),
  );
}

/**
 * Implements hook_c4m_content_share_fields_info().
 */
function c4m_content_photo_c4m_content_share_fields_info() {
  return array(
    'photo' => array(
      'type',
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_photo_c4m_helper_entity_label_info() {
  return array(
    'photo' => array(
      'article' => t('a'),
      'singular' => t('photo'),
      'plural' => t('photos'),
      'insert action' => t('added new Photo'),
      'update action' => t('updated the photo'),
      'icon' => 'fa-file-picture-o',
    ),
  );
}

/**
 * Implements hook_preprocess().
 *
 * Create the back to photo album link.
 */
function c4m_content_photo_preprocess(&$variables, $hook) {
  if ($hook != 'node_gallery_api_item_navigator') {
    return;
  }

  global $base_path;
  $options = array(
    'absolute' => TRUE,
  );

  // The 'gallery_link' contain the full path to the gallery (back button),
  // which creates a duplication of the base path in the link when creating
  // it in the next line, so we strip the base path from the 'gallery_link'.
  $variables['gallery_link'] = str_replace($base_path, '', $variables['gallery_link']);

  // Create the link with absolute path.
  $variables['back_to_galley_link'] = l(t('Back to photo album'), $variables['gallery_link'], $options);
}
