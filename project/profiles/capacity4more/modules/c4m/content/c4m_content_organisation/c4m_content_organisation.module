<?php

/**
 * @file
 * Code for the Organisation content type feature.
 */

include_once 'c4m_content_organisation.features.inc';

/**
 * Implements hook_field_info().
 */
function c4m_content_organisation_field_info() {
  return array(
    'c4m_domain' => array(
      'label' => t('Domain'),
      'description' => t(
        'Define the domain name and optional if it should be used to brand the users.'
      ),
      'default_widget' => 'c4m_domain_field',
      'default_formatter' => 'c4m_domain_default',

      'property_type' => 'field_c4m_domain',
      'property_callbacks' => array('c4m_content_organisation_domain_field_property_info_callback'),
    ),
  );
}

/**
 * Additional callback to adapt the property info of domain fields.
 *
 * @see entity_metadata_field_entity_property_info()
 */
function c4m_content_organisation_domain_field_property_info_callback(
  &$info,
  $entity_type,
  $field,
  $instance,
  $field_type
) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';

  // Auto-create the field item as soon as a property is set.
  $property['auto creation'] = 'c4m_content_organisation_domain_field_create';

  $property['property info'] = c4m_content_organisation_domain_field_property_info(
  );
  $property['property info']['icon']['required'] = FALSE;
  $property['property info']['domain']['required'] = TRUE;

  unset($property['query callback']);
}

/**
 * Callback for creating a new, empty domain field item.
 *
 * @return array
 *   The empty properties information array.
 *
 * @see c4m_content_organisation_domain_field_property_info_callback()
 */
function c4m_content_organisation_domain_field_create() {
  return array(
    'icon' => NULL,
    'domain' => NULL,
  );
}

/**
 * Defines info for the properties of the link-field item data structure.
 *
 * @return array
 *   The properties information array.
 *
 * @see c4m_content_organisation_domain_field_property_info_callback()
 */
function c4m_content_organisation_domain_field_property_info() {
  $properties['icon'] = array(
    'type' => 'int',
    'label' => t(
      'Should the domain be used to add an icon to the user profile.'
    ),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['domain'] = array(
    'type' => 'text',
    'label' => t('The domain part of an email address.'),
    'setter callback' => 'entity_property_verbatim_set',
  );

  return $properties;
}

/**
 * Implements hook_field_widget_info().
 */
function c4m_content_organisation_field_widget_info() {
  return array(
    'c4m_domain_field' => array(
      'label' => t('Text field'),
      'field types' => array('c4m_domain'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function c4m_content_organisation_field_settings_form(
  $field,
  $instance,
  $has_data
) {
  $settings = $field['settings'];
  // Add your global settings fields here.
  $form = array();
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function c4m_content_organisation_field_widget_form(
  &$form,
  &$form_state,
  $field,
  $instance,
  $langcode,
  $items,
  $delta,
  $element
) {
  switch ($instance['widget']['type']) {
    case 'c4m_domain_field':
      $element['c4m_domain'] = array(
        '#type' => 'fieldset',
        '#title' => $element['#title'],
        '#tree' => TRUE,
      );
      $element['c4m_domain']['icon'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use icon'),
        '#default_value' => isset($items[$delta]['icon']) ? $items[$delta]['icon'] : '',
      );
      $element['c4m_domain']['domain'] = array(
        '#type' => 'textfield',
        '#title' => t('Domain'),
        '#default_value' => isset($items[$delta]['domain']) ? $items[$delta]['domain'] : '',
        '#required' => $element['#required'],
      );
      break;
  }
  return $element;
}

/**
 * Implements hook_field_presave().
 */
function c4m_content_organisation_field_presave(
  $entity_type,
  $entity,
  $field,
  $instance,
  $langcode,
  &$items
) {
  foreach ($items as $delta => $item) {
    if (isset($item['c4m_domain']['domain'])) {
      $items[$delta]['domain'] = $item['c4m_domain']['domain'];
      $items[$delta]['icon'] = $item['c4m_domain']['icon'];
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function c4m_content_organisation_field_is_empty($item, $field) {
  if (empty($item['c4m_domain']['domain'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_content_organisation_field_formatter_info() {
  return array(
    'c4m_domain_default' => array(
      'label' => t('Default'),
      'field types' => array('c4m_domain'),
    ),
    'c4m_domain_icon' => array(
      'label' => t('Domain and icon'),
      'field types' => array('c4m_domain'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function c4m_content_organisation_field_formatter_view(
  $entity_type,
  $entity,
  $field,
  $instance,
  $langcode,
  $items,
  $display
) {
  $element = array();
  switch ($display['type']) {
    case 'c4m_domain_default':
      foreach ($items as $delta => $item) {
        if (isset($item['domain'])) {
          $element[$delta]['#markup'] = $item['domain'];
        }
      }
      break;

    case 'c4m_domain_icon':
      foreach ($items as $delta => $item) {
        if (isset($item['domain'])) {
          $element[$delta]['#markup'] = '';
          // Render the organisation icon when checkbox is checked.
          if ($item['icon'] && isset($entity->c4m_icon)) {
            $icons = field_get_items('node', $entity, 'c4m_icon');
            if (!empty($icons)) {
              $icon = field_view_value(
                'node',
                $entity,
                'c4m_icon',
                $icons[0],
                array(
                  'type' => 'image',
                  'settings' => array(
                    'image_style' => 'thumbnail',
                  ),
                )
              );
            }
            $element[$delta]['#markup'] = render($icon);
          }
          $element[$delta]['#markup'] .= '<div class="c4m_domain">' . $item['domain'] . '</div>';
        }
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_ds_fields_info_alter().
 */
function c4m_content_organisation_ds_fields_info_alter(&$fields, $entity_type) {
  if (isset($fields['c4m_user_first_and_last_name']) &&
    $user_fullname = &$fields['c4m_user_first_and_last_name']
  ) {
    $fields['c4m_user_first_and_last_name']['properties']['formatters']['user_with_icon'] = 'User first and last name with icon';
    $fields['c4m_user_first_and_last_name']['properties']['formatters']['linked_user_with_icon'] = 'User first and last name with icon linked to profile';
  }
}

/**
 * Get the organisation by a given email address.
 *
 * @param string $email
 *   The email address we want the organisation for.
 *
 * @return mixed
 *   Organisation node (if any).
 */
function c4m_content_organisation_get_organisation_by_email($email) {
  $domain = explode('@', $email);
  if (isset($domain[1]) && $domain = $domain[1]) {
    $results = db_select('node', 'n');
    $results->join('field_data_c4m_domain', 'd', 'n.nid = d.entity_id');
    $results->fields('n', array('nid'));
    $results->condition('d.c4m_domain_domain', $domain, '=');
    $results->condition('d.c4m_domain_icon', 1, '=');

    $nid = $results->execute()->fetchField();
    if (!$nid) {
      return NULL;
    }

    $organisation = node_load($nid);
    return $organisation;
  }
}

/**
 * Get icon for the given organisation entity.
 *
 * @param object $organisation
 *   The organisation node we want to get the icon for.
 *
 * @return array
 *   Render array for the icon.
 */
function c4m_content_organisation_get_icon($organisation) {
  $icons = field_get_items('node', $organisation, 'c4m_icon');

  if (empty($icons)) {
    return array();
  }

  $icon = field_view_value(
    'node',
    $organisation,
    'c4m_icon',
    $icons[0],
    array(
      'type' => 'image',
      'settings' => array(
        'image_style' => 'icon_small',
      ),
    )
  );

  return $icon;
}

/**
 * Get organisation icon, where it matches the given domain.
 *
 * @param string $email
 *   The email address we want the icon for (if any).
 *
 * @return array
 *   Render array for the icon.
 */
function c4m_content_organisation_get_icon_by_email($email) {
  $organisation = c4m_content_organisation_get_organisation_by_email($email);
  if (!$organisation) {
    return array();
  }

  return c4m_content_organisation_get_icon($organisation);
}

/**
 * Get organisation type label.
 *
 * @param string $organisation_key
 *   Key of the organisation type.
 *
 * @return string
 *   Label of the organisation type.
 */
function c4m_content_organisation_type_value($organisation_key) {
  $fields = &drupal_static(__FUNCTION__);

  if (!isset($fields)) {
    $fields = field_info_fields();
    $allowed_values = list_allowed_values($fields['c4m_organisation_type']);
  }

  if (isset($allowed_values[$organisation_key])) {
    return $allowed_values[$organisation_key];
  }

  return NULL;
}
