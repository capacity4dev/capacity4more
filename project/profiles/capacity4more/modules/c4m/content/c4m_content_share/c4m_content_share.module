<?php

/**
 * @file
 * Code for the Share content type feature.
 */

include_once 'c4m_content_share.features.inc';

/**
 * The access realm of C4M group shares.
 */
define('C4M_CONTENT_SHARE_ACCESS_REALM', 'c4m_content_share_access');

/**
 * Implements hook_menu().
 */
function c4m_content_share_menu() {
  $items = array();

  $items['node/%node/share'] = array(
    'title' => 'Share content to another group or project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_content_share_form'),
    'access callback' => 'c4m_content_share_access',
    'file' => 'c4m_content_share.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function c4m_content_share_menu_alter(&$items) {
  // Don't allow direct shares.
  $items['node/add/share']['access callback'] = FALSE;
}

/**
 * Implements hook_c4m_content_actions_info().
 */
function c4m_content_share_c4m_content_actions_info() {
  return array(
    'action_share' => array(
      'context' => array('group'),
      'callback' => 'c4m_content_share_action_share',
      'weight' => '5',
    ),
  );
}

/**
 * Callback to show the share link.
 *
 * @param object $node
 *    The node object.
 *
 * @return string
 *    Rendered output of the share link.
 */
function c4m_content_share_action_share($node) {
  if (!c4m_og_user_is_member() || !og_is_group_content_type(
      'node',
      $node->type
    )
  ) {
    return '';
  }

  $context = og_context();

  $url = url(
    'node/' . $node->nid . '/share',
    array(
      'absolute' => TRUE,
      'purl' => array(
        'provider' => 'og_purl|node',
        'id' => $context['gid'],
      ),
    )
  );

  $output = '<div class="group-actions-share">' . l(
      '<i class="fa fa-retweet"></i><span class="action">' . t('Share to your groups/projects') . '</span>',
      $url, array('html' => TRUE)
    ) . '</div>';
  return $output;
}

/**
 * Implements hook_search_api_index_items_alter().
 */
function c4m_content_share_search_api_index_items_alter(
  array &$items,
  SearchApiIndex $index
) {
  foreach ($items as $index => $item) {
    if (!isset($item->type)) {
      return;
    }

    if ($item->type == 'share') {
      // Do stuff.
      $node = entity_metadata_wrapper('node', $item);

      // Retrieve original node.
      $original_node = $node->c4m_source_entity->value();
      $index_fields = c4m_content_share_fields_info($original_node->type);

      foreach ($index_fields as $field) {
        $item->{$field} = $original_node->{$field};
      }

      $item->original_node_type = 'share';

      $items[$index] = $item;
    }
  }
}

/**
 * Load all group features info from implemented c4m_og_feature hooks.
 *
 * @param string $bundle
 *   Only return data for a given content type (node bundle).
 *
 * @return array
 *   Configuration as collected trough the implemented
 *   hook_c4m_share_content_fields_info hooks.
 */
function c4m_content_share_fields_info($bundle = NULL) {
  $cache_key = 'c4m_content_share:fields_info';
  $data = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $hook = 'c4m_content_share_fields_info';
      $data = module_invoke_all($hook);
      cache_set($cache_key, $data);
    }
  }

  // Only return data for a given feature.
  if (isset($data[$bundle])) {
    return $data[$bundle];
  }

  // Return all data.
  return $data;
}

/**
 * Implements hook_ds_fields_info().
 */
function c4m_content_share_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_content_share') . '/includes';

  $fields['node']['c4m_content_share_original_group'] = array(
    'title' => t('Original group'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('share|*'),
    'file' => $path . '/c4m_content_share.theme.inc',
    'function' => 'theme_c4m_content_share_original_group',
  );

  return $fields;
}

/**
 * Implements hook_node_view().
 */
function c4m_content_share_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'share' && $view_mode == 'full' && node_is_page($node)) {
    $access = node_access('view', $node);

    $host_entity = entity_metadata_wrapper('node', $node);
    $source_entity = entity_metadata_wrapper(
      'node',
      $host_entity->c4m_source_entity->value()
    );

    $redirect = 'node/' . $source_entity->nid->value();

    $group_id = $source_entity->og_group_ref->nid->value();

    drupal_goto(
      $redirect,
      array(
        'purl' => array(
          'disabled' => FALSE,
          'provider' => "og_purl|node",
          'id' => $group_id,
        ),
      ),
      301
    );
  }
}

/**
 * Access callback checks if the current user is group member.
 *
 * @return void|bool
 *   TRUE if the current user is group member, FALSE otherwise.
 */
function c4m_content_share_access() {
  if (!og_context_is_init()) {
    // OG context was not determined yet, so register the path and return
    // early. The next time this access callback will be called, it will not
    // enter here.
    og_context_access_callback_register_path($_GET['q']);

    return NULL;
  }

  return c4m_og_user_is_member();
}

/**
 * Implements hook_node_access().
 */
function c4m_content_share_node_access($node, $op, $account) {
  if (!is_object($node)) {
    return NODE_ACCESS_IGNORE;
  }

  if ($node->type == 'share' || ((isset($node->original_node_type) && $node->original_node_type == 'share'))) {
    // We index shares as their original content type (event, document...).
    // We change this type back to "share" for our manipulation, because Entity
    // API will not know the 'c4m_source_entity' field otherwise.
    $original_type = $node->type;
    $node->type = 'share';
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $original_node = $node_wrapper->c4m_source_entity->value();

    $original_access = node_access($op, $original_node, $account);

    $node->type = $original_type;

    if ($original_access === FALSE) {
      return NODE_ACCESS_DENY;
    }

    return NODE_ACCESS_ALLOW;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_content_share_form_share_node_form_alter(&$form, &$form_state, $form_id) {
  // Form ID covers both create/edit form,
  // but in our hook_menu_alter we already restrict access to the creation form.
  // Only allow access to update the description field.
  if (arg(2) === 'edit') {
    $form['title']['#access'] = FALSE;
    $form['c4m_source_entity']['#access'] = FALSE;
    $form['og_group_ref']['#access'] = FALSE;
  }
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_share_c4m_helper_entity_label_info() {
  return array(
    'share' => array(
      'article' => t('a'),
      'singular' => t('share'),
      'plural' => t('shares'),
      'insert action' => t('shared'),
      'update action' => t('updated'),
      'icon' => 'fa-retweet',
    ),
  );
}

/**
 * Implements hook_node_access_records_alter().
 *
 * Create a custom realm we grant access to.
 *
 * ******************************* *
 * **** POSSIBLE COMBINATIONS **** *
 * ******************************* *
 * SOURCE ENTITY  |  TARGET ENTITY *
 * ------------------------------- *
 *      all       |      all       *
 *      all       | og_access:node *
 * og_access:node |      all       *
 * og_access:node | og_access:node *
 * ******************************* *
 */
function c4m_content_share_node_access_records_alter(&$grants, $node) {
  if ($node->type == 'share') {
    // Reset default OG grants.
    $grants = array();

    $grants[] = array(
      'realm' => C4M_CONTENT_SHARE_ACCESS_REALM,
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }

}

/**
 * Implements hook_node_grants().
 */
function c4m_content_share_node_grants($account, $op) {
  switch ($op) {
    case 'view':
      $grants = array();
      $realm = C4M_CONTENT_SHARE_ACCESS_REALM;

      // Retrieve all shares on the platform.
      $query = db_select('node', 'n');
      $query->addField('n', 'nid');
      $query->condition('n.type', 'share');

      $result = $query->execute()->fetchAll();

      foreach ($result as $nid) {
        // Share object.
        $node = node_load($nid->nid);

        // Check node access on the target groups:
        $group = c4m_og_get_group_of_content($node);

        $access = c4m_content_share_custom_node_access('view', $group, $account);

        if (!$access) {
          // No point in continuing if we already fail here.
          continue;
        }

        // Original node:
        $node_wrapper = entity_metadata_wrapper('node', $node);
        $original_node = $node_wrapper->c4m_source_entity->value();

        // Check access to the original node:
        $access_source = c4m_content_share_custom_node_access('view', $original_node, $account);

        if ($access && $access_source) {
          $grants[$realm][] = $node->nid;
        }
      }

      return $grants;
  }
}

/**
 * Custom version of the `node_access()` function to prevent endless loop.
 *
 * We want to retrieve node access for nodes, but exclude our custom
 * `hook_node_grants` in this module (endless loop). Therefore we duplicated
 * the function signature of `node_access` and prevent our hook to be called.
 *
 * @param string $op
 *   Operation.
 * @param object $node
 *   Node object to check access for.
 * @param object $account
 *   Optional user account object to check access for.
 *
 * @return bool
 *   Access indicator.
 *
 * @see node_access()
 */
function c4m_content_share_custom_node_access($op, $node, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!$node || !in_array($op, array('view', 'update', 'delete', 'create'), TRUE)) {
    // If there was no node to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  // $node may be either an object or a node type. Since node types cannot be
  // an integer, use either nid or type as the static cache id.
  $cid = is_object($node) ? $node->nid : $node;

  // If we've already checked access for this node, user and op, return from
  // cache.
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  if (user_access('bypass node access', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }
  if (!user_access('access content', $account)) {
    $rights[$account->uid][$cid][$op] = FALSE;
    return FALSE;
  }

  // We grant access to the node if both of the following conditions are met:
  // - No modules say to deny access.
  // - At least one module says to grant access.
  // If no module specified either allow or deny, we fall back to the
  // node_access table.
  $access = module_invoke_all('node_access', $node, $op, $account);
  if (in_array(NODE_ACCESS_DENY, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = FALSE;
    return FALSE;
  }
  elseif (in_array(NODE_ACCESS_ALLOW, $access, TRUE)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  // Check if authors can view their own unpublished nodes.
  if ($op == 'view' && !$node->status && user_access('view own unpublished content', $account) && $account->uid == $node->uid && $account->uid != 0) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  // If the module did not override the access rights, use those set in the
  // node_access table.
  if ($op != 'create' && $node->nid) {
    if (module_implements('node_grants')) {
      $query = db_select('node_access');
      $query->addExpression('1');
      $query->condition('grant_' . $op, 1, '>=');
      $nids = db_or()->condition('nid', $node->nid);
      if ($node->status) {
        $nids->condition('nid', 0);
      }
      $query->condition($nids);
      $query->range(0, 1);

      $grants = db_or();
      foreach (c4m_content_share_custom_node_access_grants($op, $account) as $module => $realms) {
        foreach ($realms as $realm => $gids) {
          foreach ($gids as $gid) {
            $grants->condition(db_and()
              ->condition('gid', $gid)
              ->condition('realm', $realm)
            );
          }
        }
      }
      if (count($grants) > 0) {
        $query->condition($grants);
      }
      $result = (bool) $query
        ->execute()
        ->fetchField();
      $rights[$account->uid][$cid][$op] = $result;
      return $result;
    }
    elseif (is_object($node) && $op == 'view' && $node->status) {
      // If no modules implement hook_node_grants(), the default behavior is to
      // allow all users to view published nodes, so reflect that here.
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Custom version of `node_access_grants()` function to prevent endless loop.
 *
 * We want to retrieve node access for nodes, but exclude our custom
 * `hook_node_grants` in this module (endless loop). Therefore we duplicated
 * the function signature of `node_access_grants` and prevent our hook to be
 * called.
 *
 * @param string $op
 *   Operation.
 * @param object $account
 *   Optional user account object to check access for.
 *
 * @return array
 *   A multidimensional associative array in which the keys are the modules,
 *   second level keys are the realms, and the values are arrays of grants
 *   for those realms.
 *
 * @see node_access_grants()
 */
function c4m_content_share_custom_node_access_grants($op, $account = NULL) {
  $grants = &drupal_static(__FUNCTION__);

  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }

  if (!isset($grants)) {
    foreach (module_implements('node_grants') as $module) {
      if ($module !== 'c4m_content_share') {
        $grant = module_invoke($module, 'node_grants', $op, $account);
        if (!empty($grant)) {
          $grants[$module] = $grant;
        }
      }
    }
  }

  return array_merge(array('node' => array('all' => array(0))), $grants);
}

/**
 * Implements hook_c4m_helper_entity_label_info_alter().
 */
function c4m_content_share_c4m_helper_entity_label_info_alter(
  &$label_info,
  $entity
) {
  if ($entity->type == 'share') {
    $node = entity_metadata_wrapper('node', $entity);
    $original_node = $node->c4m_source_entity->value();

    $original_label_info = c4m_helper_entity_label_info($original_node);

    $label_info['singular'] = $original_label_info['singular'];
    $label_info['article'] = $original_label_info['article'];
  }
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_share_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_groups_shared_content' => array(
      'type' => 'shared_content',
      'context' => 'group',
      'callback' => 'c4m_content_share_get_number_of_shared_content_per_group',
    ),
  );
}

/**
 * Get all the groups (nids) the node is shared to.
 *
 * @param object $node
 *   The drupal node object.
 *
 * @return array
 *   Array of group node ids the content is shared to.
 */
function c4m_content_share_get_shared_groups($node) {
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'share')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('c4m_source_entity', 'target_id', $node->nid, '=');

  $result = $query->execute();

  $group_ids = array();

  if (isset($result['node'])) {
    $share_ids = array_keys($result['node']);

    $shares = node_load_multiple($share_ids);

    foreach ($shares as $share) {
      $share = entity_metadata_wrapper('node', $share);
      $group_ids[] = $share->og_group_ref->value()->nid;
    }
  }

  return $group_ids;
}

/**
 * Retrieve the total sum of content shares within a group.
 *
 * Retrieve the total sum of content shares within a group.
 * If one node is shared multiple times, it is added to the sum multiple
 * times as well.
 *
 * @param int $og_id
 *   The group node id.
 *
 * @return int
 *   Total sum of content shares within a group.
 */
function c4m_content_share_get_number_of_shared_content_per_group($og_id) {
  $query = _c4m_content_share_get_shared_content_per_group_query($og_id);

  $shares = $query->countQuery()->execute()->fetchField();

  return $shares;
}

/**
 * Retrieve all the content that is shared within a group (not unique).
 *
 * Retrieve all the content that is shared within a group.
 * If one node is shared multiple times, it is added to the array multiple
 * times as well.
 *
 * @param int $og_id
 *   The group node id.
 *
 * @return array
 *   Shared content (not unique) in an associative array.
 */
function c4m_content_share_get_shared_content_per_group($og_id) {
  $query = _c4m_content_share_get_shared_content_per_group_query($og_id);

  $result = $query->execute();

  $shares = $result->fetchCol();

  return $shares;
}

/**
 * Helper function returns the selectquery to retrieve shared group content.
 *
 * @param int $og_id
 *   The group node id.
 *
 * @return \SelectQuery
 *   The selectquery object before execution.
 */
function _c4m_content_share_get_shared_content_per_group_query($og_id) {
  $query = db_select('node', 'node_source');

  $query->innerJoin(
    'field_data_c4m_source_entity',
    'field_source',
    'field_source.c4m_source_entity_target_id = node_source.nid'
  );

  $query->innerJoin(
    'node',
    'node_share',
    'field_source.entity_id = node_share.nid'
  );

  $query->innerJoin('og_membership', 'og', 'og.etid = node_source.nid');

  $query->fields('node_source', array('nid'))
    ->condition('og.gid', $og_id, '=');

  return $query;
}
