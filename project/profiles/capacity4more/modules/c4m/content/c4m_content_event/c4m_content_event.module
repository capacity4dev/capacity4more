<?php

/**
 * @file
 * Code for the Event content type feature.
 */

include_once 'c4m_content_event.features.inc';

/**
 * Implements hook_c4m_og_vocab_info_content().
 */
function c4m_content_event_c4m_og_vocab_info_content() {
  return array(
    'event' => array(
      'entity_type' => 'node',
      'bundle' => 'event',
      'vocabularies' => array(
        'c4m_vocab_category',
        'c4m_vocab_tag',
      ),
    ),
  );
}

/**
 * Define fields.
 *
 * These fields are not overridden through the interface.
 * If you want those, look at hook_ds_custom_fields_info().
 *
 * @param string $entity_type
 *   The name of the entity which we are requesting fields for, e.g. 'node'.
 *
 * @return array
 *   A collection of fields which keys are the entity type name and values
 *   a collection fields.
 *
 * @see ds_get_fields()
 */
function c4m_content_event_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_content_event');

  $fields['node']['c4m_content_event_link_to_osm'] = array(
    'title' => t('Link to OSM map'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    'ui_limit' => array('event|*'),
    'file' => $path . '/includes/c4m_content_event.theme.inc',
    'function' => 'theme_c4m_content_event_link_to_osm',
    'properties' => array(
      'formatters' => array(
        'default' => t('Default'),
      ),
    ),
  );

  return $fields;
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_content_event_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_events_posts' => array(
        'type'        => 'event',
        'entity_type' => 'node',
        'bundles'     => array('event'),
        'singular'    => 'Event',
        'plural'      => 'Events',
        'state'       => 1,
        'aggregate'   => array(
          'type' => 'posts',
        ),
        'weight'      => 1,
        'attributes'  => array(
          'class' => array('posts'),
        ),
        'link'        => array(
          'path' => 'search',
        ),
      ),
      'c4m_events' => array(
        'type'        => 'event',
        'entity_type' => 'node',
        'bundles'     => array('event'),
        'singular'    => 'Event',
        'plural'      => 'Events',
        'state'       => 1,
        'aggregate'   => NULL,
        'weight'      => 4,
        'attributes'  => array(
          'class' => array('events'),
        ),
        'link'        => array(
          'path' => 'events',
        ),
      ),
    ),
    'group' => array(
      'c4m_og_events' => array(
        'type'          => 'event',
        'entity_type'   => 'node',
        'bundles'       => array('event'),
        'singular'      => 'Event',
        'plural'        => 'Events',
        'state'         => 1,
        'aggregate'     => NULL,
        'weight'        => 3,
        'feature_name'  => 'c4m_features_og_events',
        'attributes'    => array(
          'class' => array('og-events'),
        ),
        'link'          => array(
          'path' => 'calendar',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_events' => array(
        'type'          => 'event',
        'entity_type'   => 'node',
        'bundles'       => array('event'),
        'singular'      => 'Event',
        'plural'        => 'Events',
        'state'         => 1,
        'aggregate'     => NULL,
        'weight'        => 6,
        'attributes'    => array(
          'class' => array('topic-events'),
        ),
        'link'          => array(
          'path' => 'events',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic:@TOPIC_ID',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_event_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_og_events' => array(
      'type'      => 'event',
      'context'   => 'group',
      'callback'  => 'c4m_og_group_node_metric',
      'arguments' => array(array('event')),
      'weight'    => 0,
    ),
    'c4m_user_events' => array(
      'type' => 'events',
      'context'   => 'user',
      'callback'  => 'c4m_user_get_node_metric',
      'arguments' => array(array('event')),
    ),
  );
}

/**
 * Implements hook_c4m_content_share_fields_info().
 */
function c4m_content_event_c4m_content_share_fields_info() {
  return array(
    'event' => array(
      'type',
      'c4m_event_type',
      'c4m_datetime_end',
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_event_c4m_helper_entity_label_info() {
  return array(
    'event' => array(
      'article' => t('an'),
      'singular' => t('event'),
      'plural' => t('events'),
      'insert action' => t('created a new event'),
      'update action' => t('updated the event'),
      'icon' => 'fa-calendar',
    ),
    'event-event' => array(
      'article' => t('an'),
      'singular' => t('event'),
      'plural' => t('events'),
      'insert action' => t('created a new event'),
      'update action' => t('updated the event'),
      'icon' => 'fa-calendar',
    ),
    'event-meeting' => array(
      'article' => t('an'),
      'singular' => t('meeting'),
      'plural' => t('meetings'),
      'insert action' => t('created a new meeting'),
      'update action' => t('updated the meeting'),
      'icon' => 'fa-users',
    ),
    'event-learning' => array(
      'article' => t('an'),
      'singular' => t('learning event'),
      'plural' => t('learning events'),
      'insert action' => t('created a new learning event'),
      'update action' => t('updated the learning event'),
      'icon' => 'fa-university',
    ),
  );
}

/**
 * Implements hook_TYPE_alter().
 *
 * Using hook_c4m_offcanvas_trigger_label_left_alter().
 */
function c4m_content_event_c4m_offcanvas_trigger_label_left_alter(&$trigger_label) {
  if (arg(0) == 'events' && empty(arg(1))) {
    $trigger_label['label'] = t('Filter results');
    $trigger_label['icon'] = 'filter';
  }
}
