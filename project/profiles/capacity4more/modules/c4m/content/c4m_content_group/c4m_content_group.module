<?php

/**
 * @file
 * Code for the Group content type feature.
 */

define('C4M_CONTENT_GROUP_ACCESS_REALM', 'c4m_group_status');
define('C4M_CONTENT_GROUP_ACCESS_REALM_ALL', 'c4m_group_status_admin');
define('C4M_CONTENT_GROUP_STATUS_VIEW_PENDING', 0);
define('C4M_CONTENT_GROUP_STATUS_VIEW_DRAFT', 1);
define('C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED', 2);
define('C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED', 3);
define('C4M_CONTENT_GROUP_STATUS_VIEW_REJECTED', 4);
define('C4M_CONTENT_GROUP_STATUS_VIEW_DELETED', 5);
define('C4M_CONTENT_GROUP_STATUS_UPDATE_PENDING', 6);
define('C4M_CONTENT_GROUP_STATUS_UPDATE_DRAFT', 7);
define('C4M_CONTENT_GROUP_STATUS_UPDATE_PUBLISHED', 8);
define('C4M_CONTENT_GROUP_STATUS_UPDATE_ARCHIVED', 9);
define('C4M_CONTENT_GROUP_STATUS_UPDATE_REJECTED', 10);
define('C4M_CONTENT_GROUP_STATUS_UPDATE_DELETED', 11);

include_once 'c4m_content_group.features.inc';

/**
 * Implements hook_c4m_og_vocab_info_groups().
 */
function c4m_content_c4m_og_vocab_info_groups() {
  return array(
    'group' => array(
      'c4m_vocab_category',
      'c4m_vocab_tag',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_content_group_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_block_info().
 */
function c4m_content_group_block_info() {
  $blocks['header_name_banner_group'] = array(
    'info' => t('Group header'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['c4m_block_create_group'] = array(
    'info' => t('Group: Create group'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_content_group_block_view($delta = '') {
  module_load_include('inc', 'c4m_content_group', 'c4m_content_group.block');
  $callback = '_c4m_content_group_block_' . $delta;
  if (!function_exists($callback)) {
    return NULL;
  }

  return $callback();
}

/**
 * Preprocess for blocks of this module.
 *
 * @param array $variables
 *   The block variables.
 */
function c4m_content_group_preprocess_block(array &$variables) {
  module_load_include('inc', 'c4m_content_group', 'c4m_content_group.block');
  if ($variables['block']->module == 'c4m_content_group' &&
      !empty($variables['block']->delta)) {
    $callback = '_c4m_content_group_preprocess_' . $variables['block']->delta;
    if (function_exists($callback)) {
      $callback($variables);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide fields for authenticated users and set submit function.
 */
function c4m_content_group_form_group_node_form_alter(&$form, &$form_state) {
  global $user;
  if ($user->uid && !user_access('administer nodes', $user)
    && strpos($form['#action'], 'add')) {
    // Hide fields for authenticated users.
    $form['c4m_related_group']['#access'] = FALSE;
    $form['c4m_related_projects']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    // After a form is submitted, run a redirect function.
    $form['actions']['submit']['#submit'][] = 'c4m_content_group_submit_redirect';
  }

  // Checks if the node is being created.
  if (is_null($form['nid']['#value'])) {
    $form['c4m_og_status']['#access'] = FALSE;
  }
}

/**
 * Submit form function.
 *
 * Set redirect and successful message.
 *
 * @param array $form
 *   Form definition.
 * @param array $form_state
 *   The current form state.
 */
function c4m_content_group_submit_redirect(array &$form, array &$form_state) {
  // Set a successful message for a user.
  drupal_set_message(t('The group you requested is pending review by one of the administrators. You will receive an email with the outcome of that review.'));
  // Redirect a user to homepage.
  $form_state['redirect'] = url('', array('absolute' => TRUE));
}

/**
 * Implements hook_og_user_access_alter().
 *
 * Set permissions to users based on OG role and group status.
 */
function c4m_content_group_og_user_access_alter(&$perm, $context) {
  $account = $context['account'];
  $group = $context['group'];

  if ($group->type != 'group' || !$account->uid) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $group);
  $status = $wrapper->c4m_og_status->value();

  $site_admin = user_access('administer site configuration', $account);
  $group_owner = $account->uid == $group->uid;
  $group_admin = !empty($perm['administer group']) ? $perm['administer group'] : FALSE;

  if ($site_admin || $group_owner || $group_admin) {
    // Site admin/group owner/group admin can invite/approve group members only
    // for Draft and Published groups.
    $allowed_values = array('draft', 'published');
    if (!in_array($status, $allowed_values)) {
      $perm['add user'] = FALSE;
      $perm['approve and deny subscription'] = FALSE;
    }
  }
  else {
    // Not site admin/group owner/group admin can't invite/approve group
    // members.
    $perm['add user'] = FALSE;
    $perm['approve and deny subscription'] = FALSE;
  }

  if (!og_is_member('node', $group->nid, 'user', $account) && $status != 'published') {
    // Users that are not members can ask membership only for published groups.
    $perm['subscribe'] = FALSE;
  }
}

/**
 * Implements hook_node_grants().
 *
 * Set user permissions based on his OG role.
 */
function c4m_content_group_node_grants($account = NULL, $op = 'view') {
  $grants = array();
  if (empty($account)) {
    global $user;
    $account = user_load($user->uid);
  }

  $nodes = og_get_entity_groups();

  $grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_not_member'] = array(
    C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
    C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
  );

  if (!$account->uid || empty($nodes)) {
    // Anonymous user or user that is not a member of any group.
    $anonymous_grant_ids = array(
      C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
      C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
    );

    $grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_anon'] = $op == 'view' ? $anonymous_grant_ids : array();
    return $grants;
  }

  if (user_access('administer site configuration', $account)) {
    // Site admin.
    $grants[C4M_CONTENT_GROUP_ACCESS_REALM_ALL] = array(
      C4M_CONTENT_GROUP_STATUS_VIEW_PENDING,
      C4M_CONTENT_GROUP_STATUS_VIEW_DRAFT,
      C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
      C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
      C4M_CONTENT_GROUP_STATUS_VIEW_REJECTED,
      C4M_CONTENT_GROUP_STATUS_VIEW_DELETED,
      C4M_CONTENT_GROUP_STATUS_UPDATE_PENDING,
      C4M_CONTENT_GROUP_STATUS_UPDATE_DRAFT,
      C4M_CONTENT_GROUP_STATUS_UPDATE_PUBLISHED,
      C4M_CONTENT_GROUP_STATUS_UPDATE_ARCHIVED,
      C4M_CONTENT_GROUP_STATUS_UPDATE_REJECTED,
      C4M_CONTENT_GROUP_STATUS_UPDATE_DELETED,
    );
    return $grants;
  }

  // Go through all user's group he is owner, admin or member of.
  foreach (og_get_entity_groups() as $group_type => $gids) {
    foreach ($gids as $gid) {
      $node = node_load($gid);

      if ($account->uid == $node->uid) {
        // Group owner.
        $grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_' . $gid] = array(
          C4M_CONTENT_GROUP_STATUS_VIEW_PENDING,
          C4M_CONTENT_GROUP_STATUS_VIEW_DRAFT,
          C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
          C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
          C4M_CONTENT_GROUP_STATUS_UPDATE_PENDING,
          C4M_CONTENT_GROUP_STATUS_UPDATE_DRAFT,
          C4M_CONTENT_GROUP_STATUS_UPDATE_PUBLISHED,
          C4M_CONTENT_GROUP_STATUS_UPDATE_ARCHIVED,
        );
        continue;
      }
      // Group admin or group member.
      elseif (og_user_access('node', $gid, 'administer group', $account)) {
        // Group admin.
        $grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_' . $gid] = array(
          C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
          C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
          C4M_CONTENT_GROUP_STATUS_VIEW_DRAFT,
          C4M_CONTENT_GROUP_STATUS_UPDATE_PUBLISHED,
          C4M_CONTENT_GROUP_STATUS_UPDATE_ARCHIVED,
          C4M_CONTENT_GROUP_STATUS_UPDATE_DRAFT,
        );
        continue;
      }
      else {
        $member_grant_ids = array(
          C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
          C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
          C4M_CONTENT_GROUP_STATUS_VIEW_DRAFT,
        );
        $grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_' . $gid] = $op == 'view' ? $member_grant_ids : array();
        continue;
      }
    }
  }
  return $grants;
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by the token_replace() call at the end of
 * _user_mail_text() to set up some additional tokens that can be
 * used in email messages generated by user_mail().
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values. If the 'group' element
 *   exists, it must contain a group node object.
 * @param mixed $options
 *   Unused parameter required by the token_replace() function.
 */
function c4m_content_group_replace_mail_tokens(array &$replacements, array $data, $options) {
  if (isset($data['group'])) {
    $group = $data['group'];
    $owner = user_load($group->uid);

    $url_options = array(
      'absolute' => TRUE,
      'purl' => array(
        'provider' => 'og_purl|node',
        'id' => $group->nid,
      ),
    );

    $replacements['[group:dashboard_url]'] = url('<front>', $url_options);
    $replacements['[group:owner]'] = $owner->name;
    $replacements['[group:title]'] = $group->title;
  }
}

/**
 * Implements hook_node_access_records().
 *
 * Add grants based on group status field.
 */
function c4m_content_group_node_access_records($node) {
  // Only for group nodes.
  if ($node->type != 'group') {
    return;
  }
  $wrapper = entity_metadata_wrapper('node', $node);
  $grants = array();
  $realm_grants = array();

  switch ($wrapper->c4m_og_status->value()) {
    case 'pending':
      $realm_grants = array(
        C4M_CONTENT_GROUP_ACCESS_REALM . '_' . $node->nid => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_PENDING,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_PENDING,
            'grant_update' => 1,
          ),
        ),
        C4M_CONTENT_GROUP_ACCESS_REALM_ALL => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_PENDING,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_PENDING,
            'grant_update' => 1,
          ),
        ),
      );
      break;

    case 'draft':
      $realm_grants = array(
        C4M_CONTENT_GROUP_ACCESS_REALM . '_' . $node->nid => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_DRAFT,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_DRAFT,
            'grant_update' => 1,
          ),
        ),
        C4M_CONTENT_GROUP_ACCESS_REALM_ALL => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_DRAFT,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_DRAFT,
            'grant_update' => 1,
          ),
        ),
      );
      break;

    case 'published':
      $realm_grants = array(
        C4M_CONTENT_GROUP_ACCESS_REALM . '_' . $node->nid => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_PUBLISHED,
            'grant_update' => 1,
          ),
        ),
        C4M_CONTENT_GROUP_ACCESS_REALM_ALL => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_PUBLISHED,
            'grant_update' => 1,
          ),
        ),
      );

      if (!$wrapper->{OG_ACCESS_FIELD}->value()) {
        // Only for public groups.
        $realm_grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_anon'] = array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
            'grant_update' => 0,
          ),
        );
        $realm_grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_not_member'] = array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_PUBLISHED,
            'grant_update' => 0,
          ),
        );
      }
      break;

    case 'archived':
      $realm_grants = array(
        C4M_CONTENT_GROUP_ACCESS_REALM . '_' . $node->nid => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_ARCHIVED,
            'grant_update' => 1,
          ),
        ),
        C4M_CONTENT_GROUP_ACCESS_REALM_ALL => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_ARCHIVED,
            'grant_update' => 1,
          ),
        ),
      );
      if (!$wrapper->{OG_ACCESS_FIELD}->value()) {
        // Only for public groups.
        $realm_grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_anon'] = array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
            'grant_update' => 0,
          ),
        );
        $realm_grants[C4M_CONTENT_GROUP_ACCESS_REALM . '_not_member'] = array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_ARCHIVED,
            'grant_update' => 0,
          ),
        );
      }
      break;

    case 'deleted':
      $realm_grants = array(
        C4M_CONTENT_GROUP_ACCESS_REALM . '_' . $node->nid => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_DELETED,
            'grant_update' => 0,
          ),
        ),
        C4M_CONTENT_GROUP_ACCESS_REALM_ALL => array(
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_VIEW_DELETED,
            'grant_update' => 0,
          ),
          array(
            'gid' => C4M_CONTENT_GROUP_STATUS_UPDATE_DELETED,
            'grant_update' => 1,
          ),
        ),
      );
      break;
  }

  c4m_content_group_add_grants($realm_grants, $grants);
  return $grants;
}

/**
 * Add new grants to the grunts list.
 *
 * @param array $rows
 *   List of realms and related to it grunt ids and permissions.
 * @param array $grants
 *   List of grants.
 */
function c4m_content_group_add_grants(array $rows, array &$grants) {
  foreach ($rows as $realm => $row) {
    foreach ($row as $grant) {
      $grants[] = array(
        'realm' => $realm,
        'gid' => $grant['gid'],
        'grant_view' => 1,
        'grant_update' => $grant['grant_update'],
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
  }
}

/**
 * Implements hook_admin_paths_alter().
 *
 * @see og_ui_admin_paths()
 * Set the 'node/add/group' path as not admin.
 */
function c4m_content_group_admin_paths_alter(&$paths) {
  $paths['node/*/group'] = FALSE;
}

/**
 * Returns the updated date of the latest updated content item (in a group).
 *
 * @param int $og_id
 *   The Organic group ID to eventually limit the query for.
 *
 * @return int
 *   The updated date of the latest updated content (in a group).
 */
function c4m_content_group_get_latest_activity($og_id = NULL) {
  // Find last updated node.
  $query_nodes = db_select('node', 'n');
  $query_nodes->addField('n', 'changed');
  $query_nodes->condition('n.status', 1);

  if (is_numeric($og_id)) {
    $query_nodes->join('og_membership', 'ogm', 'ogm.etid = n.nid');
    $query_nodes->condition('ogm.gid', (int) $og_id);
    $query_nodes->condition('ogm.entity_type', 'node');
  }

  $latest_updated_node = $query_nodes->execute()->fetchField();

  // Find last updated comment.
  $query_comments = db_select('comment', 'c');
  $query_comments->addField('c', 'changed');
  $query_comments->join('node', 'n', 'n.nid = c.nid');
  $query_comments->condition('c.status', 1);
  $query_comments->condition('n.status', 1);

  if (is_numeric($og_id)) {
    $query_comments->join('og_membership', 'ogm', 'ogm.etid = n.nid');
    $query_comments->condition('ogm.gid', (int) $og_id);
    $query_comments->condition('ogm.entity_type', 'node');
  }

  $latest_updated_comment = $query_comments->execute()->fetchField();

  // Find and return latest activity by comparing latest update node & comment.
  $latest_activity = max($latest_updated_node, $latest_updated_comment);
  return empty($latest_activity) ? 0 : format_date($latest_activity, 'custom', 'd/m/Y');
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_content_group_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_groups' => array(
        'type'        => 'group',
        'entity_type' => 'node',
        'bundles'     => array('group'),
        'singular'    => 'Group',
        'plural'      => 'Groups',
        'state'       => 1,
        'skip_access_check' => TRUE,
        'c4m_status'  => array('published', 'archived'),
        'aggregate'   => array(),
        'weight'      => -4,
        'attributes'  => array(
          'class' => array('groups'),
        ),
        'link'        => array(
          'path' => 'groups',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_groups' => array(
        'type'        => 'group',
        'entity_type' => 'node',
        'bundles'     => array('group'),
        'singular'    => 'Group',
        'plural'      => 'Groups',
        'state'       => 1,
        'aggregate'   => array(),
        'weight'      => 0,
        'attributes'  => array(
          'class' => array('topic-groups'),
        ),
        'link' => array(
          'path' => 'groups',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic:@TOPIC_ID',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_group_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_groups_latest_activity' => array(
      'type'     => 'latest_activity',
      'context'  => 'group',
      'callback' => 'c4m_content_group_get_latest_activity',
      'weight'   => 0,
    ),
    'c4m_user_groups' => array(
      'type' => 'groups',
      'context'  => 'user',
      'callback'  => 'c4m_user_get_node_metric',
      'arguments' => array(array('group')),
    ),
    'c4m_user_groups_administered' => array(
      'type' => 'groups_administered',
      'context'  => 'user',
      'callback' => 'c4m_user_get_administered_groups_count',
    ),
  );
}

/**
 * Implements hook_ds_fields_info().
 */
function c4m_content_group_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_content_group');

  $fields['node']['c4m_content_group_statistics'] = array(
    'title'      => t('Group statistics'),
    'field_type' => DS_FIELD_TYPE_FUNCTION,
    // Only for group nodes.
    'ui_limit'   => array('group|*', 'project|*'),
    'file'       => $path . '/includes/c4m_content_group_statistics.theme.inc',
    'function'   => 'c4m_content_group_statistics',
  );

  return $fields;
}

/**
 * Returns the administered groups count for an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Count.
 */
function c4m_user_get_administered_groups_count($uid) {
  return c4m_og_get_user_administered_groups_count($uid);
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_group_c4m_helper_entity_label_info() {
  return array(
    'group' => array(
      'article' => t('a'),
      'singular' => t('group'),
      'plural' => t('groups'),
      'insert action' => t('created a new group'),
      'update action' => t('updated the group'),
      'icon' => 'fa-users',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function c4m_content_group_theme() {
  $theme['c4m_content_group_header_title'] = array(
    'variables' => array(
      'homepage' => FALSE,
      'title' => '',
      'group_type' => '',
      'group_access' => '',
      'group_status' => '',
      'organisations' => array(),
      'organisation_icons' => array(),
      'organisation_ellipsis' => FALSE,
      'emails' => array(),
    ),
    'path' => drupal_get_path('module', 'c4m_content_group') . '/theme',
    'template' => 'c4m-content-group-header-title',
  );

  $theme['c4m_og_vocab'] = array(
    'template' => 'c4m_og_vocab',
    'path' => drupal_get_path('module', 'c4m_content_group') . '/templates',
    'variables' => array(),
  );

  return $theme;
}

/**
 * Implements hook_TYPE_alter().
 *
 * Using hook_c4m_offcanvas_trigger_label_left_alter().
 */
function c4m_content_group_c4m_offcanvas_trigger_label_left_alter(&$trigger_label) {
  if (arg(0) == 'groups' && empty(arg(1))) {
    $trigger_label['label'] = t('Filter results');
    $trigger_label['icon'] = 'filter';
  }
}

/**
 * Implements hook_field_extra_fields().
 *
 * Add the 'Group Admins' field in the group dashboard management.
 */
function c4m_content_group_field_extra_fields() {
  $extra_fields['node']['group']['display']['group_admins'] = array(
    'label' => t('Group Admins'),
    'description' => t('Group Admins'),
    'weight' => 0,
  );

  return $extra_fields;
}

/**
 * Implements hook_node_view_alter().
 *
 * Adding the 'Group administrators' view for the group_admins field.
 */
function c4m_content_group_node_view($node, $view_mode, $langcode) {
  if ($view_mode != "group_dashboard") {
    return;
  }

  drupal_add_library('system', 'drupal.ajax');
  $accounts = c4m_og_get_group_admins($node->nid);

  $links = array();
  $options = array(
    'purl'  => array(
      'disabled' => TRUE,
    ),
  );
  foreach ($accounts as $account) {
    $uri = entity_uri('user', $account);
    $links[] = l(c4m_user_name($account), $uri['path'], $options);
  }

  $node->content['group_admins'] = array(
    '#type' => 'item',
    '#title' => t('Group administrators'),
    '#title_display' => 'above',
    '#suffix' => implode(",", $links),
  );

  $node->content['#pre_render'][] = 'c4m_content_group_theme_topics_and_regions';
}

/**
 * Remove the default Topics and Regions markup, and create it as a tree.
 *
 * @param array $elements
 *   The elements array of the node.
 *
 * @return array|mixed
 *   The elements array with the new topics and regions.
 */
function c4m_content_group_theme_topics_and_regions(&$elements) {
  // Remove the 'Regions' taxonomies.
  foreach ($elements['c4m_vocab_geo']['#items'] as $index => $item) {
    unset($elements['c4m_vocab_geo'][$index]);
  }

  // Remove the 'Topics' taxonomies.
  foreach ($elements['c4m_vocab_topic']['#items'] as $index => $item) {
    unset($elements['c4m_vocab_topic'][$index]);
  }

  // Add the new markup Topics.
  $topics_options = array('vocabulary_name' => 'c4m_vocab_topic');
  $elements['c4m_vocab_topic'][0]['#markup'] = c4m_content_taxonomy_build_tree($elements['c4m_vocab_topic']['#items'], $topics_options);
  // Add the new markup Regions.
  $elements['c4m_vocab_geo'][0]['#markup'] = c4m_content_taxonomy_build_tree($elements['c4m_vocab_geo']['#items']);

  return $elements;
}

/**
 * Implements hook_menu_alter().
 *
 * Adds a menu item for AJAX call that enables / disables group notifications.
 */
function c4m_content_group_menu_alter(&$items) {
  $items['group/%node/notification/%'] = array(
    'title' => 'Manage notifications',
    'page callback' => 'c4m_content_group_toggle_notification',
    'page arguments' => array(1, 3),
    'access callback' => 'c4m_content_group_toggle_notification_access',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Access function - AJAX call to menu that triggers group notifications toggle.
 *
 * @param object $group
 *   Group, for which notifications are toggled.
 *
 * @return bool
 *   Whether user is group member, or not.
 */
function c4m_content_group_toggle_notification_access($group) {
  if (!og_context_is_init()) {
    // OG context was not determined yet, so register the path and return early.
    // The next time this access callback will be called, it will not enter
    // here.
    og_context_access_callback_register_path($_GET['q']);
    return FALSE;
  }

  return og_is_member('node', $group->nid);
}

/**
 * Executes group notifications toggle for current user.
 *
 * @param object $group
 *   Group, for which to execute toggle.
 * @param string $ajax
 *   Link suffix, that's chenged from 'nojs' to 'ajax' by AJAX library JS.
 */
function c4m_content_group_toggle_notification($group, $ajax = 'nojs') {
  global $user;

  if ($ajax != 'ajax') {
    // Return a Drupal message if js in disabled or not found.
    drupal_set_message(t('Change the promote value.'));
    drupal_goto();
  }

  $group = c4m_og_current_group();
  // Toggle notifications.
  _c4m_content_group_toggle_group_notifications($user, $group);
  // Generate new link.
  $link = c4m_content_group_create_toggle_notification_link($user, $group);

  // Use AJAX commands to replace link on the page.
  $commands[] = ajax_command_replace('#toggle-group-notifications', $link);
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Creates html for link to toggle group notifications.
 *
 * @param object $account
 *   User, for which link is created.
 * @param object $group
 *   Group, for which link is created.
 *
 * @return Html
 *    Html block representing the link.
 */
function c4m_content_group_create_toggle_notification_link($account, $group) {
  $user_subscribed = _c4m_content_group_is_subscribed_to_group_notifications($account, $group);
  $message_text = $user_subscribed ? t('Notifications are enabled') : t('Notifications are disabled');
  $link_text = $user_subscribed ? t('disable') : t('enable');

  $options = array(
    'attributes' => array(
      'class' => 'use-ajax',
    ),
    'purl' => array('disabled' => TRUE),
    'html' => TRUE,
  );

  $link = l($link_text, url('group/' . $group->nid . '/notification/nojs'), $options);

  $tag['element'] = array(
    '#tag' => 'div',
    '#value' => $message_text . '  (' . $link . ')',
    '#attributes' => array(
      'id' => 'toggle-group-notifications',
    ),
  );

  return theme_html_tag($tag);
}

/**
 * Determines if user is subscribed to group notifications, or not.
 *
 * @param object $account
 *   Checked user.
 * @param object $group
 *   Group for which notifications are checked.
 *
 * @return bool
 *   Whether user is subscribed to group notifications, or not.
 */
function _c4m_content_group_is_subscribed_to_group_notifications($account, $group) {
  $user_flags = flag_get_user_flags('node', $group->nid);
  $user_subscribed = array_key_exists('subscribe_c4m_follow_group', $user_flags);

  if ($user_subscribed) {
    $wrapper = entity_metadata_wrapper('user', $account);
    foreach ($wrapper->c4m_optout_group->value(array('identifier' => TRUE)) as $existing_id) {
      if ($existing_id == $group->nid) {
        // User unsubscribed from entity.
        $user_subscribed = FALSE;
        break;
      }
    }
  }

  return $user_subscribed;
}

/**
 * Enables / Disables group notifications for group member.
 *
 * @param object $account
 *   Group member user.
 * @param object $group
 *   Group for which notifications are toggled.
 */
function _c4m_content_group_toggle_group_notifications($account, $group) {
  $user_subscribed = _c4m_content_group_is_subscribed_to_group_notifications($account, $group);

  if ($user_subscribed) {
    // Unflag.
    flag('unflag', 'subscribe_c4m_follow_group', $group->nid);
  }
  else {
    // Flag.
    flag('flag', 'subscribe_c4m_follow_group', $group->nid);

    // If required, unset optout_group field.
    $wrapper = entity_metadata_wrapper('user', $account);
    $unsubscribed = $wrapper->c4m_optout_group->value(array('identifier' => TRUE));
    // If group id is found at array of unsubscribed groups, unset it.
    if (($index = array_search($group->nid, $unsubscribed)) !== FALSE) {
      $wrapper->c4m_optout_group->offsetUnset($index);
      $wrapper->save();
    }
  }
}
