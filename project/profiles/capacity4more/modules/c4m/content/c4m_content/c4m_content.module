<?php

/**
 * @file
 * Code for the Article content type feature.
 */

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Hide Book tab for all content types.
 * Add a cancel button to all node forms.
 */
function c4m_content_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Checks if the form's content type is being used as a message,
  // to add a send notification option.
  if (in_array(
    $form_state['node']->type,
    c4m_og_get_group_content_notification_types()
  )) {
    $form['send-notification'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send Notification'),
      // Default to true only on new content.
      '#default_value' => empty($form_state['node']->nid),
      '#limit_validation_errors' => array(),
      '#weight' => 100,
    );
  };

  // Hide Book tab for all content types.
  if (isset($form['book'])) {
    $form['book']['#access'] = FALSE;
  }

  // Add a cancel button to all node forms.
  // Check if a cancel button should be added to node forms.
  $cancel = variable_get('c4m_content_cancel_button', FALSE);
  if (!$cancel) {
    return;
  }

  // Disable form validation when SA deletes a node.
  if (!empty($form['actions']['delete']) && c4m_user_is_site_admin()) {
    $form['actions']['delete']['#limit_validation_errors'] = array();
  }

  // Use destination parameter when set.
  $params = drupal_get_query_parameters();
  if (empty($params['destination'])) {
    // Use javascript history.go(-1) when destination is not set.
    $form['actions']['cancel'] = array(
      '#type' => 'button',
      '#value' => t('Cancel'),
      '#attributes' => array('onClick' => 'history.go(-1); return true;'),
      '#weight' => 14,
    );
  }
  else {
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#submit' => array('c4m_content_cancel_button_callback'),
      '#limit_validation_errors' => array(),
      '#weight' => 14,
    );
  }

  $is_unpublish = $form['actions']['draft']['#value'] == t('Unpublish');
  $is_og_group = in_array($form['type']['#value'], array('group', 'project'));
  // Removes Unpublish button from forms.
  if ($is_unpublish && $is_og_group) {
    $form['actions']['draft']['#access'] = FALSE;
  }
}

/**
 * Implements hook_node_submit().
 *
 * If 'Send Notification' checkbox exists, add a parameter with value  to the
 * node in order to determine if we should send the notification on the
 * hook_node_update / insert.
 */
function c4m_content_node_submit(&$node, $form, $form_state) {
  if (!in_array($node->type, c4m_og_get_group_content_notification_types())) {
    return;
  }

  if (!isset($form_state['values']['send-notification'])) {
    return;
  }

  $node->c4m_send_notification = $form_state['values']['send-notification'];
}

/**
 * Implements hook_module_implements_alter().
 *
 * Since form_alter hook is being called after this (c4m_content) module,
 * we need to change the call order.
 */
function c4m_content_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['c4m_content'])) {
    $c4m_content = $implementations['c4m_content'];
    unset($implementations['c4m_content']);
    $implementations['c4m_content'] = $c4m_content;
  }
}

/**
 * Cancel button callback when a destination parameter was set.
 */
function c4m_content_cancel_button_callback($form, &$form_state) {
  drupal_goto();
}

/**
 * Implements hook_block_info().
 */
function c4m_content_block_info() {
  $blocks['global_statistics_summary'] = array(
    'info' => t('Global website statistics'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_content_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'global_statistics_summary':
      $stats_summary = array(
        '#theme' => 'c4m_website_statistics_summary',
        '#data' => c4m_content_get_global_statistics(),
      );
      $block['content'] = render($stats_summary);
      break;
  }
  return $block;
}

/**
 * Load all statistics info from implemented hook_c4m_content_statistics_info.
 *
 * @param string $context
 *   The context to load the info for.
 *   Supported contexts:
 *   - global.
 *   - group.
 *   - topic.
 *
 * @return array
 *   Configuration as collected through the implemented
 *   hook_c4m_content_statistics_info hooks.
 */
function c4m_content_statistics_info($context) {
  $cache_key = 'c4m_content:statistics_info';
  $data = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $data = module_invoke_all('c4m_content_statistics_info');

      // Sort the contexts.
      foreach ($data as $key => $info) {
        uasort($info, 'drupal_sort_weight');
        $data[$key] = $info;
      }

      // Save in cache.
      cache_set($cache_key, $data);
    }
  }

  return (isset($data[$context]))
    ? $data[$context]
    : array();
}

/**
 * Get the global statistics.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_global_statistics() {
  $list = c4m_content_statistics_info('global');
  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Get the topic statistics.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_topic_statistics() {
  $list = c4m_content_statistics_info('topic');

  $node = menu_get_object('node');

  if (!$node || $node->type != 'topic') {
    return array();
  }

  $topic_wrapper = entity_metadata_wrapper('node', $node);
  $topic_term = $topic_wrapper->c4m_vocab_topic_mapping->value();

  foreach ($list as $key => &$info) {
    $info['topic'] = $topic_term->tid;
  }

  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Get the statistics specific for the current group.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_current_group_statistics() {
  $og_context = og_context();
  return c4m_content_get_group_statistics($og_context);
}

/**
 * Get the statistics specific for the given group.
 *
 * @param object $og_context
 *   The group to gather the statistics for.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_group_statistics($og_context = NULL) {
  if (!$og_context) {
    return array();
  }

  $list = c4m_content_statistics_info('group');

  // Filter the list & limit to only content types that are enabled for the
  // given group.
  foreach ($list as $key => &$info) {

    if ($info['entity_type'] === 'node'
      && !c4m_og_feature_is_content_type_enabled($info['type'])
    ) {
      unset($list[$key]);
      continue;
    }

    // Add the current og_id to the info.
    $info['og_id'] = $og_context['gid'];
  }

  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Helper to collect the statistics data based on the given list.
 *
 * @param array $list
 *   Statistics configuration list retrieved from c4m_content_statistics_info().
 *
 * @return array
 *   The collected data.
 */
function _c4m_content_statistics_collect_data(array $list) {
  $data = array();

  foreach ($list as $key => $info) {
    $type = isset($info['aggregate']['type'])
      ? $info['aggregate']['type']
      : $info['type'];

    $og_id = isset($info['og_id'])
      ? $info['og_id']
      : NULL;

    $topic = isset($info['topic'])
      ? $info['topic']
      : NULL;

    $status = isset($info['c4m_status'])
      ? $info['c4m_status']
      : NULL;

    $skip_access_check = isset($info['skip_access_check'])
      ? $info['skip_access_check']
      : NULL;

    $arguments = array(
      'entity_type' => $info['entity_type'],
      'bundles' => $info['bundles'],
      'state' => $info['state'],
      'og_id' => $og_id,
      'topic' => $topic,
      'c4m_status' => $status,
      'skip_access_check' => $skip_access_check,
    );
    $count = c4m_helper_entity_get_number_of_entities($arguments);

    $link = isset($info['link'])
      ? $info['link']
      : FALSE;

    if (isset($link['options']['query']) && $topic) {
      $link['options']['query']['f'] = str_replace(
        '@TOPIC_ID',
        $topic,
        $link['options']['query']['f']
      );
    }

    if (!isset($data[$type])) {
      $data[$type] = array(
        'title' => array(
          'singular' => $info['singular'],
          'plural' => $info['plural'],
        ),
        'count' => 0,
        'attributes' => $info['attributes'],
        'link' => $link,
      );
    }

    $data[$type]['count'] += $count;
  }

  return $data;
}

/**
 * Implements hook_theme().
 */
function c4m_content_theme() {
  $theme['c4m_website_statistics_summary'] = array(
    'variables' => array(
      'data' => array(),
    ),
    'file' => 'c4m_content.theme.inc',
    'path' => drupal_get_path('module', 'c4m_content') . '/includes',
  );

  $theme['c4m_taxonomy_tree'] = array(
    'template' => 'c4m_taxonomy_tree',
    'path' => drupal_get_path('module', 'c4m_content') . '/templates',
    'variables' => array(
      'root' => '',
      'local_tree' => '',
      'class' => '',
    ),
  );

  return $theme;
}

/**
 * Helper to determine the current context.
 *
 * @return string
 *    Returns one of the following contexts:
 *    - group: we are in a group
 *    - global: we are outside a group
 */
function c4m_content_current_context() {
  $gid = c4m_og_current_group_id();
  if ($gid) {
    return 'group';
  }
  else {
    return 'global';
  }
}

/**
 * Helper function to generate markup for OG group image.
 *
 * Generates output on front page, manage group/project page, and on any
 * group/project page for group administrator users.
 *
 * @param object $group
 *   OG group.
 *
 * @return string
 *   Generated markup for group/project banner image.
 */
function c4m_content_get_og_image_markup($group) {
  // First establish the current group.
  $markup = '';
  $wrapper = entity_metadata_wrapper('node', $group);

  $menu_item = menu_get_item();
  if (drupal_is_front_page(
    ) || ($menu_item['path'] == 'manage' && og_user_access(
        'node',
        $group->nid,
        'administer group'
      ))
  ) {
    // Add group image.
    $file = $wrapper->c4m_banner->value();
    if (!empty($file)) {
      $file['style_name'] = 'banner';
      $file['path'] = $file['uri'];
      $file['attributes'] = array('class' => 'group-banner');
      // If current page is the Group Management page,
      // Add an edit link to the banner.
      if ($menu_item['path'] == 'manage') {
        $edit_link['element'] = array(
          '#tag' => 'span',
          '#attributes' => array(
            'class' => array('edit-link'),
          ),
          '#value' => t('Edit'),
        );
        $options = array(
          'html' => TRUE,
          'attributes' => array(
            'class' => array(
              'edit-banner',
            ),
          ),
        );
        $markup .= l(
          theme_html_tag($edit_link) . theme_image_style($file),
          url(
            'node/' . $group->nid . '/edit',
            array(
              'absolute' => TRUE,
              'fragment' => 'edit-image-banner',
            )
          ),
          $options
        );
      }
      else {
        $markup .= theme_image_style($file);
      }
    }
  }

  return $markup;
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_content_field_formatter_info() {
  return array(
    'c4m_formatter_ec_money' => array(
      'label' => t('EC money'),
      'field types' => array('money'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function c4m_content_field_formatter_view(
  $entity_type,
  $entity,
  $field,
  $instance,
  $langcode,
  $items,
  $display
) {
  $element = $used = array();

  switch ($display['type']) {
    case 'c4m_formatter_ec_money':
      foreach ($items as $delta => $item) {
        // Code inspired from money_field_formatter_view().
        $currency = $item['currency'];
        $currency_object = currency_load($currency);

        $symbol = $currency_object->sign;
        // Amount with currency-based decimal and grouping separators.
        $amount = c4m_content_ec_number_format(
          $item['amount'],
          $field['settings']['scale']
        );

        // Amount with currency-based decimal and grouping separators and a
        // currency symbol.
        $amount_with_symbol = $currency_object->format($item['amount']);

        $output = '';
        foreach (explode(
                   '|',
                   $instance['widget']['settings']['currency_display_mode']
                 ) as $option) {
          switch ($option) {
            case 'a':
              // The amount.
              $output .= $amount;
              break;

            case 'as':
              // Amount with currency symbol.
              $output .= $amount_with_symbol;
              break;

            case 'c':
              // Currency code.
              $output .= $currency;
              break;

            case 's':
              // Currency symbol.
              $output .= $symbol;
              break;

            case '+':
              // Separator.
              $output .= '&nbsp;';
              break;
          }
        }

        $element[$delta] = array('#markup' => $output);
      }

      break;
  }
  return $element;
}

/**
 * Format a number according to EC format.
 *
 * @param float $number
 *   Number to be formatted.
 * @param int $decimals
 *   (optional) Number of decimals. Defaults to 0.
 *
 * @return string
 *   Formatted number.
 */
function c4m_content_ec_number_format($number, $decimals = 0) {
  $decimal_separator = '.';
  $grouping_separator = '&nbsp;';

  // Amount with currency-based decimal and grouping separators.
  $amount = number_format(
    $number,
    $decimals,
    $decimal_separator,
    $grouping_separator
  );
  return $amount;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Overrides the default confirm node delete form to offer the possibility to
 * anonymize the content.
 */
function c4m_content_form_node_delete_confirm_alter(&$form, &$form_state) {
  $node = $form['#node'];
  $comments = $node->comment_count;

  if ($comments) {
    // Handle sentence plural when multiple comments.
    $text = $comments > 1 ? t('comments') : t('comment');

    $replacements = array(
      '@comment_count' => $comments,
      '@comment_text' => $text,
    );

    $form['message'] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t(
          'This content has @comment_count @comment_text - by deleting this post, you will also delete the @comment_text. If you would rather preserve this content, please select the check box below to remove your name and editorial rights; the author will become anonymous, and all content will be preserved.',
          $replacements
      ) . '</p>',
      '#weight' => -10,
    );

    $form['anonymize'] = array(
      '#type' => 'checkbox',
      '#title' => t('Update the author to anonymous'),
    );

    // We override the default submit and we invoke it if necessary.
    $form['#submit'] = array('c4m_content_custom_node_delete_confirm');
  }
}

/**
 * Custom submit callback for deleting nodes to anonymize content if requested.
 */
function c4m_content_custom_node_delete_confirm($form, &$form_state) {
  if ($form_state['values']['anonymize']) {
    $node = $form['#node'];
    $node->uid = 0;

    node_save($node);
    $form_state['redirect'] = '/';
  }
  // Anonymize not requested. Call default submit.
  else {
    node_delete_confirm_submit($form, $form_state);
  }
}

/**
 * Implements hook_field_extra_fields().
 *
 * Adding a 'Highlighted' field.
 */
function c4m_content_field_extra_fields() {
  $extra_fields = array();

  foreach (c4m_content_highlightable_node_types() as $type) {
    $extra_fields['node'][$type]['display']['highlighted'] = array(
      'label' => t('Highlight'),
      'description' => t('Highlight a node will toggle its promote property.'),
      'weight' => 0,
    );
  }

  foreach (c4m_content_promotable_node_types() as $type) {
    $extra_fields['node'][$type]['display']['promoted'] = array(
      'label' => t('Promote'),
      'description' => t('Promote a node will pin it on top of the activity stream property.'),
      'weight' => 0,
    );
  }

  return $extra_fields;
}

/**
 * Returns the list of content types that can be highlighted.
 *
 * @return array
 *   The node types that can be highlighted.
 */
function c4m_content_highlightable_node_types() {
  return array(
    'group',
    'project',
    'discussion',
    'document',
    'event',
    'wiki_page',
  );
}

/**
 * Returns the list of content types that can be promoted.
 *
 * @return array
 *   The node types that can be promoted.
 */
function c4m_content_promotable_node_types() {
  return array(
    'discussion',
    'document',
    'event',
    'wiki_page',
  );
}

/**
 * Implements hook_node_view().
 *
 * Adding the 'Highlight' link in order to promote a node.
 */
function c4m_content_node_view($node, $view_mode, $langcode) {
  // Display the `Highlight` link to power users only.
  $group = c4m_og_current_group();
  if (!$group || !c4m_content_toggle_highlight_access($group, $node, $node->promote)) {
    return;
  }

  // Getting the extra fields for the current node type display.
  $extra_fields = field_info_extra_fields('node', $node->type, 'display');

  // Determine if the highlighted button is part of the current display.
  if (!empty($extra_fields['highlighted'])) {
    // Add Drupal's ajax system to the current page.
    drupal_add_library('system', 'drupal.ajax');

    $link = c4m_content_create_highlight_link(
      $group->nid,
      $node->nid,
      $node->promote
    );

    $node->content['highlighted'] = array(
      '#type' => 'item',
      '#title' => $link,
    );
  }

  // Determine if the promoted button is part of the current display.
  if (!empty($extra_fields['promoted'])) {
    $promote_link = c4m_content_create_promote_link($node);

    $node->content['promoted'] = array(
      '#type' => 'item',
      '#title' => $promote_link,
    );
  }
}

/**
 * Implements hook_menu().
 *
 * Add menu item to change the promote property of a node.
 */
function c4m_content_menu() {
  $items = [];

  $items['group/%node/promote_content/%node/%/%'] = [
    'title' => 'Toggle highlight',
    'description' => 'Toggle the promote property of a node.',
    'page callback' => 'c4m_content_toggle_highlight',
    'page arguments' => [1, 3, 4, 5],
    'access callback' => 'c4m_content_toggle_highlight_access',
    'access arguments' => [1, 3, 4],
  ];

  return $items;
}

/**
 * Check access to change the promote value of the node.
 *
 * @param object $group
 *   The group of the node.
 * @param object $node
 *   The node with to promote value.
 * @param int $status
 *   The value to change the promote to.
 *
 * @return bool
 *   TRUE|FALSE
 */
function c4m_content_toggle_highlight_access($group, $node, $status) {
  if (empty($node) || empty($group)) {
    return FALSE;
  }
  if ($status != NODE_PROMOTED && $status != NODE_NOT_PROMOTED) {
    return FALSE;
  }

  // Verify that the node being highlighted belongs to this group.
  if (!og_is_member('node', $group->nid, 'node', $node)) {
    return FALSE;
  }

  // Allow SA only to highlight a group/project.
  if (og_is_group('node', $node)) {
    return c4m_user_is_site_admin();
  }

  // Allow power users (SA, GO and GA) to highlight group content.
  return _c4m_features_og_members_is_power_user($group);
}

/**
 * Change the promote property in a node.
 *
 * @param object $group
 *   The group of the node.
 * @param object $node
 *   The node to be changed.
 * @param int $status
 *   The value to change to.
 * @param string $ajax
 *   The link ajax.
 */
function c4m_content_toggle_highlight($group, $node, $status, $ajax = 'nojs') {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Add parameter to node that will signal to cancel  notification that is
  // triggered, as a result of node update, because we should not send
  // a notification for highlight.
  $node->c4m_send_notification = FALSE;

  // Setting the new value.
  // When generating the link, we create it with the current status. So, when
  // updating the node, we have to change it to the opposite status.
  $wrapper->promote->set(!$status);
  $wrapper->save();

  if ($ajax != 'ajax') {
    // Return a Drupal message if js in disabled or not found.
    drupal_set_message(t('Change the promote value.'));
    drupal_goto();
  }
  else {
    // After success we should replace the current button with a
    // new button link - the toggled one.
    $link = c4m_content_create_highlight_link(
      $group->nid,
      $node->nid,
      $wrapper->promote->value()
    );

    $commands[] = ajax_command_replace('#highlight-content', $link);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
}

/**
 * Create the highlight button link.
 *
 * @param int $gid
 *   The group id.
 * @param int $nid
 *   The node id.
 * @param int $highlight
 *   Determinant if the node highlight or not.
 *
 * @return string
 *   The link created for the highlight button.
 */
function c4m_content_create_highlight_link($gid, $nid, $highlight) {
  $url = 'group/' . $gid . '/promote_content/' . $nid . '/' . $highlight . '/nojs';

  $options = array(
    'attributes' => array(
      'class' => array('use-ajax', 'highlight-link'),
      'id' => 'highlight-content',
    ),
    'purl' => array('disabled' => TRUE),
    'html' => TRUE,
  );

  // Determine if the the star type should be full or not,
  // by the highlight property.
  $star_class = array(
    NODE_NOT_PROMOTED => 'fa-star-o',
    NODE_PROMOTED => 'fa-star',
  );
  $star = '<i class="fa ' . $star_class[$highlight] . '" aria-hidden="true"></i> ';
  $link_text = $star . '<span class="highlight-link-text">' . t(
      'Highlight'
    ) . '</span>';

  return l($link_text, $url, $options);
}

/**
 * Return the formatted promote icon.
 *
 * @param object $node
 *   The Node entity.
 *
 * @return string
 *   The action text.
 */
function c4m_content_create_promote_link($node) {
  $promoted_types = c4m_content_promotable_node_types();

  if (!in_array($node->type, $promoted_types)) {
    return '';
  }

  return flag_create_link('c4m_og_content_highlight', $node->nid);
}

/**
 * Build a tree of a hierarchical taxonomy and theme it.
 *
 * @param array $items
 *   The items in the tree.
 * @param array $link_term_to_facet
 *   The current vocabulary machine name, for linking to facet.
 *
 * @return string
 *   The markup of the tree.
 */
function c4m_content_taxonomy_build_tree(
  $items,
  $link_term_to_facet = array()
) {
  // Each item at $trees is an array, representing two level tree.
  // First node is tree root (level 1), and all others, if exist,
  // are children (level 2).
  $trees = array();

  // Stores positions of trees to be shifted right, as they present
  // second and third level, at 3 level taxonomy hierarchy.
  $shift_right_trees = array();

  while (!empty($items)) {
    // Extract first root item from $items array - level 1.
    if (!($root = _c4m_content_taxonomy_extract_root_item($items))) {
      // We get here in case of dis-attached terms - terms data
      // is corrupted.
      break;
    }
    // Extract all roots children from $items array - level 2.
    $children = _c4m_content_taxonomy_extract_child_items($items, $root->tid);
    // Items from $children array, that don't have children of their own.
    $childless_children = $children;

    // Handling 3-rd level (grand children), if exist.
    $sub_trees = array();
    foreach ($children as $child) {
      // For every 2-nd level item (child), fetch it's children from $items.
      $grand_children = _c4m_content_taxonomy_extract_child_items(
        $items,
        $child->tid
      );
      if (!empty($grand_children)) {
        // If grand children exist (3-rd level items), remove the child
        // from $childless_children array.
        $index = array_search($child, $childless_children);
        unset($childless_children[$index]);

        // Add array item that represents 2 level tree, where first level item
        // is a child, and 2-nd level items are grand children.
        $sub_trees[] = array_merge(array($child), $grand_children);
      }
    }

    // Add array item for 1-st & 2-nd level tree.
    $root = empty($childless_children) ? array($root) : array_merge(
      array($root),
      $childless_children
    );
    $trees[] = $root;

    // For every sub tree created (2-nd & 3-rd level tree).
    foreach ($sub_trees as $sub_tree) {
      // Add it to to arrays tree, and store it's index, for shifting right.
      $trees[] = $sub_tree;
      $trees_keys = array_keys($trees);
      $shift_right_trees[] = end($trees_keys);
    }
  }

  $options = array(
    'absolute' => TRUE,
    'purl' => array('disabled' => TRUE),
  );

  $tree = '';
  // Counting trees we theme, as some might need to be shifted right.
  $tree_index = 0;

  // Loop through all the taxonomy items and add them to the tree.
  foreach ($trees as $taxonomy_tree) {
    $local_tree = array();
    foreach ($taxonomy_tree as $taxonomy) {
      // If the link term was not provided, or it isn't the proper
      // one for the current vocabulary, create a default link to
      // the taxonomy term.
      if (empty($link_term_to_facet['vocabulary_name']) || $taxonomy->vocabulary_machine_name != $link_term_to_facet['vocabulary_name']) {
        $link = l($taxonomy->name, "/taxonomy/term/" . $taxonomy->tid);
      }
      else {
        $options['query'] = array(
          'f[0]' => $link_term_to_facet['vocabulary_name'] . ':' . $taxonomy->tid,
        );

        $link = l($taxonomy->name, 'groups', $options);
      }

      $local_tree[] = $link;
    }

    // If it's the first item on the local tree, it's the parent. We need
    // to distinguish between the parent and its children because the
    // parent needs to get a different style.
    $root = array_shift($local_tree);

    // Use the taxonomy tree theme to style the local tree.
    $variables = array(
      'root' => $root,
      // Join the local_tree array to a string.
      'local_tree' => implode(', ', $local_tree),
    );

    // Assign a dedicated class for trees that needs to be shifted right.
    if (array_search($tree_index, $shift_right_trees) !== FALSE) {
      $variables['class'] = 'shift-right';
    }
    $tree .= theme('c4m_taxonomy_tree', $variables);

    $tree_index++;
  }

  $tag['element'] = array(
    '#tag' => 'div',
    '#value' => $tree,
  );

  return theme_html_tag($tag);
}

/**
 * Helper function.
 *
 * Extracts all child taxonomy items from $items, and alter $items -
 * subtracted all items that function returns.
 *
 * @param array $items
 *   Taxonomies array, from which we extract all children of item with
 *   ID == $parent_id. $items array is altered by function.
 * @param int $parent_id
 *   The ID of taxonomy item, which children should be extracted.
 *
 * @return array
 *   All child items of input item with ID $parent_id.
 */
function _c4m_content_taxonomy_extract_child_items(&$items, $parent_id) {
  $result = array();
  $remaining = array();

  foreach ($items as $item) {
    // Get the parent of $item.
    $parent = taxonomy_get_parents($item['tid']);
    if (!empty($parent) && key($parent) == $parent_id) {
      // If item's parent found, and it's ID equals to input $parent_id,
      // add it's 'taxonomy_term' into $result array.
      $result[] = $item['taxonomy_term'];
    }
    else {
      // $remaining array holds all the items that are not children of
      // item which ID == $parent_id.
      $remaining[] = $item;
    }
  }
  // Alter original $items array - subtract all the $result items.
  $items = $remaining;

  return $result;
}

/**
 * Helper function.
 *
 * Extracts first taxonomy item that got no parents from $items array
 * (alters the array), and returns it.
 *
 * @param array $items
 *   Taxonomies array, from which we extract all children of item with
 *   ID = $parent_id. $items array is altered by function.
 *
 * @return mixed
 *   First taxonomy item at $items array, that got no parents.
 *   FALSE, if all items got a parent.
 */
function _c4m_content_taxonomy_extract_root_item(&$items) {
  foreach ($items as $key => $item) {
    $parent = taxonomy_get_parents($item['tid']);
    if (empty($parent)) {
      // First item that got no parent => remove it from $items,
      // and return it's term.
      unset($items[$key]);

      return $item['taxonomy_term'];
    }
  }

  // All items got a parent.
  return FALSE;
}

/**
 * Manages access to 'create group content' form.
 *
 * For OG type 'group', allows access for group members and power users.
 */
function c4m_content_create_group_content_access() {
  $item = menu_get_item();

  // Making sure the current request is for the node/add form.
  preg_match('/node\/add\/(discussion|document|event|news|photo(album)?|wiki-page)/', $item['path'], $matches);
  if (empty($matches[0])) {
    return;
  }

  // If not under og context, return early.
  if (!$context = og_context()) {
    drupal_access_denied();
    drupal_exit();
  }

  // Resolve OG group type.
  $group_type = c4m_og_get_group_type($context);

  // For type 'group' allow access only to it's members and site admin.
  if ($group_type == 'group' && !og_is_member('node', $context['gid']) && !c4m_user_is_site_admin()) {
    drupal_access_denied();
    drupal_exit();
  }
}

/**
 * Creates html for link to toggle group notifications.
 *
 * @param object $account
 *   User, for which link is created.
 * @param object $group
 *   Group, for which link is created.
 *
 * @return Html
 *    Html block representing the link.
 */
function c4m_content_create_toggle_group_notification_link($account, $group) {
  $user_subscribed = _c4m_content_group_is_subscribed_to_group_notifications($account, $group);
  $message_text = $user_subscribed ? t('Notifications are enabled') : t('Notifications are disabled');
  $link_text = $user_subscribed ? t('disable') : t('enable');
  $icon_class = $user_subscribed ? 'fa fa-bell-o' : 'fa fa-bell-slash-o';

  $options = array(
    'attributes' => array(
      'class' => 'use-ajax',
    ),
    'purl' => array('disabled' => TRUE),
    'html' => TRUE,
  );

  $link = l($link_text, url('group/' . $group->nid . '/notification/nojs'), $options);

  $tag['element'] = array(
    '#tag' => 'i',
    '#value' => '',
    '#attributes' => array(
      'class' => $icon_class,
    ),
  );
  $icon_html = theme_html_tag($tag);

  $tag['element'] = array(
    '#tag' => 'span',
    '#value' => $icon_html . $message_text . '  (' . $link . ')',
    '#attributes' => array(
      'id' => 'toggle-group-notifications',
    ),
  );

  return theme_html_tag($tag);
}

/**
 * Themes toggle group notifications link.
 *
 * @return \Html|void
 *   Rendered html for field.
 */
function c4m_content_theme_toggle_group_notification_link() {
  global $user;

  if (!($group = c4m_og_current_group())) {
    return '';
  }

  // It's a group, and user is not a member.
  if (c4m_og_is_of_group_type('group') && !og_is_member('node', $group->nid)) {
    return '';
  }

  // It's a project, and user is not authenticated.
  if (c4m_og_is_of_group_type('project') && $user->uid === 0) {
    return '';
  }

  return c4m_content_create_toggle_group_notification_link($user, $group);
}

/**
 * Implements hook_menu_alter().
 *
 * Adds a menu item for AJAX call that enables / disables group notifications.
 */
function c4m_content_menu_alter(&$items) {
  $items['group/%node/notification/%'] = array(
    'title' => 'Manage notifications',
    'page callback' => 'c4m_content_toggle_group_notification',
    'page arguments' => array(1, 3),
    'access callback' => 'c4m_content_toggle_group_notification_access',
    'access arguments' => array(1),
  );

  $items['node/add']['access callback'] = 'c4m_content_add_access';

  return $items;
}

/**
 * Access Callback; /node/add should be allowed for SA only.
 */
function c4m_content_add_access() {
  return c4m_user_is_site_admin();
}

/**
 * Access function - AJAX call to menu that triggers group notifications toggle.
 *
 * @param object $group
 *   Group, for which notifications are toggled.
 *
 * @return bool
 *   Whether user is group member, or not.
 */
function c4m_content_toggle_group_notification_access($group) {
  global $user;

  if (!og_context_is_init()) {
    // OG context was not determined yet, so register the path and return early.
    // The next time this access callback will be called, it will not enter
    // here.
    og_context_access_callback_register_path($_GET['q']);

    return FALSE;
  }

  // It's a group, and user is not a member.
  if (c4m_og_is_of_group_type('group') && !og_is_member('node', $group->nid)) {
    return FALSE;
  }

  // It's a project, and user is not authenticated.
  if (c4m_og_is_of_group_type('project') && $user->uid === 0) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Executes group notifications toggle for current user.
 *
 * @param object $group
 *   Group, for which to execute toggle.
 * @param string $ajax
 *   Link suffix, that's changed from 'nojs' to 'ajax' by AJAX library JS.
 */
function c4m_content_toggle_group_notification($group, $ajax = 'nojs') {
  global $user;

  if ($ajax != 'ajax') {
    // Return a Drupal message if js in disabled or not found.
    drupal_set_message(t('Change the promote value.'));
    drupal_goto();
  }

  $group = c4m_og_current_group();
  // Toggle notifications.
  _c4m_content_group_toggle_group_notifications($user, $group);
  // Generate new link. Trim generated html, so AJAX won't create
  // a wrapping div: https://api.drupal.org/comment/32698#comment-32698.
  $link = trim(c4m_content_create_toggle_group_notification_link($user, $group));

  // Use AJAX commands to replace link on the page.
  $commands[] = ajax_command_replace('#toggle-group-notifications', $link);
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}
