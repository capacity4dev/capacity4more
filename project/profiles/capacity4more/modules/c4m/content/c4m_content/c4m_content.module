<?php

/**
 * @file
 * Code for the Article content type feature.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a cancel button to all node forms.
 */
function c4m_content_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Check if a cancel button should be added to node forms.
  $cancel = variable_get('c4m_content_cancel_button', FALSE);
  if (!$cancel) {
    return;
  }

  // Use destination parameter when set.
  $params = drupal_get_query_parameters();
  if (empty($params['destination'])) {
    // Use javascript history.go(-1) when destination is not set.
    $form['actions']['cancel'] = array(
      '#type' => 'button',
      '#value' => t('Cancel'),
      '#attributes' => array('onClick' => 'history.go(-1); return true;'),
      '#weight' => 14,
    );
  }
  else {
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel'),
      '#submit' => array('c4m_content_cancel_button_callback'),
      '#limit_validation_errors' => array(),
      '#weight' => 14,
    );
  }

  // Removes Unpublish button from forms.
  if ($form['actions']['draft']['#value'] == t('Unpublish')) {
    unset($form['actions']['draft']);
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Since form_alter hook is being called after this (c4m_content) module,
 * we need to change the call order.
 */
function c4m_content_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['c4m_content'])) {
    $c4m_content = $implementations['c4m_content'];
    unset($implementations['c4m_content']);
    $implementations['c4m_content'] = $c4m_content;
  }
}

/**
 * Cancel button callback when a destination parameter was set.
 */
function c4m_content_cancel_button_callback($form, &$form_state) {
  drupal_goto();
}

/**
 * Implements hook_block_info().
 */
function c4m_content_block_info() {
  $blocks['global_statistics_summary'] = array(
    'info' => t('Global website statistics'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_content_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'global_statistics_summary':
      $stats_summary = array(
        '#theme' => 'c4m_website_statistics_summary',
        '#data' => c4m_content_get_global_statistics(),
      );
      $block['content'] = render($stats_summary);
      break;
  }
  return $block;
}

/**
 * Load all statistics info from implemented hook_c4m_content_statistics_info.
 *
 * @param string $context
 *   The context to load the info for.
 *   Supported contexts:
 *   - global.
 *   - group.
 *   - topic.
 *
 * @return array
 *   Configuration as collected through the implemented
 *   hook_c4m_content_statistics_info hooks.
 */
function c4m_content_statistics_info($context) {
  $cache_key = 'c4m_content:statistics_info';
  $data = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $data = module_invoke_all('c4m_content_statistics_info');

      // Sort the contexts.
      foreach ($data as $key => $info) {
        uasort($info, 'drupal_sort_weight');
        $data[$key] = $info;
      }

      // Save in cache.
      cache_set($cache_key, $data);
    }
  }

  return (isset($data[$context]))
    ? $data[$context]
    : array();
}

/**
 * Get the global statistics.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_global_statistics() {
  $list = c4m_content_statistics_info('global');
  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Get the topic statistics.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_topic_statistics() {
  $list = c4m_content_statistics_info('topic');

  $node = menu_get_object('node');

  if (!$node || $node->type != 'topic') {
    return array();
  }

  $topic_wrapper = entity_metadata_wrapper('node', $node);
  $topic_term = $topic_wrapper->c4m_vocab_topic_mapping->value();

  foreach ($list as $key => &$info) {
    $info['topic'] = $topic_term->tid;
  }

  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Get the statistics specific for the current group.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_current_group_statistics() {
  $og_context = og_context();
  return c4m_content_get_group_statistics($og_context);
}

/**
 * Get the statistics specific for the given group.
 *
 * @param object $og_context
 *   The group to gather the statistics for.
 *
 * @return array
 *   The collected statistics.
 */
function c4m_content_get_group_statistics($og_context = NULL) {
  if (!$og_context) {
    return array();
  }

  $list = c4m_content_statistics_info('group');

  // Filter the list & limit to only content types that are enabled for the
  // given group.
  foreach ($list as $key => &$info) {

    if ($info['entity_type'] === 'node'
      && !c4m_og_feature_is_content_type_enabled($info['type'])
    ) {
      unset($list[$key]);
      continue;
    }

    // Add the current og_id to the info.
    $info['og_id'] = $og_context['gid'];
  }

  $data = _c4m_content_statistics_collect_data($list);
  return $data;
}

/**
 * Helper to collect the statistics data based on the given list.
 *
 * @param array $list
 *   Statistics configuration list retrieved from c4m_content_statistics_info().
 *
 * @return array
 *   The collected data.
 */
function _c4m_content_statistics_collect_data(array $list) {
  $data = array();

  foreach ($list as $key => $info) {
    $type = isset($info['aggregate']['type'])
      ? $info['aggregate']['type']
      : $info['type'];

    $og_id = isset($info['og_id'])
      ? $info['og_id']
      : NULL;

    $topic = isset($info['topic'])
      ? $info['topic']
      : NULL;

    $status = isset($info['c4m_status'])
      ? $info['c4m_status']
      : NULL;

    $arguments = array(
      'entity_type' => $info['entity_type'],
      'bundles' => $info['bundles'],
      'state' => $info['state'],
      'og_id' => $og_id,
      'topic' => $topic,
      'c4m_status' => $status,
    );
    $count = c4m_helper_entity_get_number_of_entities($arguments);

    $link = isset($info['link'])
      ? $info['link']
      : FALSE;

    if (isset($link['options']['query']) && $topic) {
      $link['options']['query']['f'] = str_replace(
        '@TOPIC_ID',
        $topic,
        $link['options']['query']['f']
      );
    }

    if (!isset($data[$type])) {
      $data[$type] = array(
        'title' => array(
          'singular' => $info['singular'],
          'plural' => $info['plural'],
        ),
        'count' => 0,
        'attributes' => $info['attributes'],
        'link' => $link,
      );
    }

    $data[$type]['count'] += $count;
  }

  return $data;
}

/**
 * Implements hook_theme().
 */
function c4m_content_theme() {
  $theme['c4m_website_statistics_summary'] = array(
    'variables' => array(
      'data' => array(),
    ),
    'file' => 'c4m_content.theme.inc',
    'path' => drupal_get_path('module', 'c4m_content') . '/includes',
  );

  return $theme;
}

/**
 * Helper to determine the current context.
 *
 * @return string
 *    Returns one of the following contexts:
 *    - group: we are in a group
 *    - global: we are outside a group
 */
function c4m_content_current_context() {
  $gid = c4m_og_current_group_id();
  if ($gid) {
    return 'group';
  }
  else {
    return 'global';
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_content_field_formatter_info() {
  return array(
    'c4m_formatter_ec_money' => array(
      'label' => t('EC money'),
      'field types' => array('money'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function c4m_content_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = $used = array();

  switch ($display['type']) {
    case 'c4m_formatter_ec_money':
      foreach ($items as $delta => $item) {
        // Code inspired from money_field_formatter_view().
        $currency = $item['currency'];
        $currency_object = currency_load($currency);

        $symbol = $currency_object->sign;
        $decimal_separator = '.';
        $grouping_separator = '&nbsp;';

        // Amount with currency-based decimal and grouping separators.
        $amount = number_format($item['amount'], $field['settings']['scale'], $decimal_separator, $grouping_separator);

        // Amount with currency-based decimal and grouping separators and a
        // currency symbol.
        $amount_with_symbol = $currency_object->format($item['amount']);

        $output = '';
        foreach (explode('|', $instance['widget']['settings']['currency_display_mode']) as $option) {
          switch ($option) {
            case 'a':
              // The amount.
              $output .= $amount;
              break;

            case 'as':
              // Amount with currency symbol.
              $output .= $amount_with_symbol;
              break;

            case 'c':
              // Currency code.
              $output .= $currency;
              break;

            case 's':
              // Currency symbol.
              $output .= $symbol;
              break;

            case '+':
              // Separator.
              $output .= '&nbsp;';
              break;
          }
        }

        $element[$delta] = array('#markup' => $output);
      }

      break;
  }
  return $element;
}

/**
 * Implements hook_field_extra_fields().
 *
 * Add a 'Highlighted button' to the 'Group Dashboard'.
 */
function c4m_content_field_extra_fields() {
  $extra_fields['node']['group']['display']['highlighted'] = array(
    'label' => t('Highlighted Button'),
    'description' => t('Highlight a node will activate/deactivate his promoted field.'),
    'weight' => 0,
  );

  return $extra_fields;
}

/**
 * Implements hook_node_view().
 *
 * Adding the 'Highlighted' view for the promoted field.
 */
function c4m_content_node_view($node, $view_mode, $langcode) {
  if ($view_mode != 'group_dashboard') {
    return;
  }

  // Add ajax to the url.
  drupal_add_library('system', 'drupal.ajax');

  // Get the group of the node.
  $group = og_context();

  // Toggle the promote.
  $promoteTo = $node->promote ? '0' : '1';

  // Create the URL.
  $url = 'group/' . $group['gid'] . '/promote_content/'. $node->nid . '/' . $promoteTo . '/nojs';

  // Create the link options.
  $options = array(
    'attributes' => array(
      'class' => 'use-ajax',
    ),
    'purl' => array('disabled' => TRUE),
  );

  $button = '<i class="fa fa-star fa-2x" aria-hidden="true"></i>';
  $output = l(t('Highlight'), $url, $options);

  $node->content['highlighted'] = array(
    '#type' => 'item',
    '#title' => $output,
  );
}

/**
 * Implements hook_menu().
 *
 * Add menu to change the promote value of a content.
 */
function c4m_content_menu() {
  $items = [];

  $items['group/%node/promote_content/%node/%/%'] = [
    'title' => 'Change flag',
    'page callback' => 'c4m_content_promote_change',
    'page arguments' => [3, 4, 5],
    'access callback' => 'c4m_content_promote_change_access',
    'access arguments' => [1, 3, 4],
  ];

  return $items;
}

/**
 * Check access to change the promote value of the node.
 *
 * @param $group
 *  The group of the node.
 * @param $node
 *  The node with to promote value.
 * @param $status
 *  The value to change the promote to.
 *
 * @return bool
 *  TRUE|FALSE
 */
function c4m_content_promote_change_access($group, $node, $status) {
  if (empty($node)) {
    return FALSE;
  }
  if ($status != NODE_PROMOTED && $status !== NODE_NOT_PROMOTED) {
    return FALSE;
  }

  global $user;
  foreach(c4m_og_get_group_admins($group->nid) as $admin) {
    if ($admin->uid == $user->uid) {
      return TRUE;
    }
  }


  return $group->uid == $user->uid;
}

/**
 * Change the 'promote' filed in a node.
 *
 * @param $node
 *  The node to be changed.
 * @param $status
 *  The value to change to.
 * @param string $ajax
 *  The link ajax.
 */
function c4m_content_promote_change($node, $status, $ajax = 'nojs') {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Change the promote value.
  $wrapper->promote->set($status);
  $wrapper->save();

  if ($ajax !== 'ajax') {
    // Return a response for testing - when there is no js.
    drupal_set_message(t('Change the promote value.'));
    drupal_goto();
  }
  else {
    // Change the button after clicked.

//    $message = empty($current_vsite) ?  $generic_message : $vsite_message;
//
//    $commands[] = ajax_command_html("#feed-{$feed_id}-{$vsite_id}", $message);
//    $page = array('#type' => 'ajax', '#commands' => $commands);
//    ajax_deliver($page);
  }
}
