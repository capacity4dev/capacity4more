<?php

/**
 * @file
 * Code for the Article content type feature.
 */

include_once 'c4m_content_article.features.inc';

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_content_article_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_articles' => array(
        'type' => 'article',
        'entity_type' => 'node',
        'bundles' => array('article'),
        'singular' => 'Article',
        'plural' => 'Articles',
        'state' => 1,
        'skip_access_check' => TRUE,
        'aggregate' => array(),
        'weight' => -5,
        'attributes' => array(
          'class' => array('articles'),
        ),
        'link' => array(
          'path' => 'articles',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_articles' => array(
        'type' => 'article',
        'entity_type' => 'node',
        'bundles' => array('article'),
        'singular' => 'Article',
        'plural' => 'Articles',
        'state' => NULL,
        'aggregate' => array(),
        'weight' => 2,
        'attributes' => array(
          'class' => array('topic-articles'),
        ),
        'link' => array(
          'path' => 'articles',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic:@TOPIC_ID',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_node_insert().
 *
 * Subscribe notable contributors when updating nodes.
 */
function c4m_content_article_node_insert($node) {
  c4m_content_article_subscribe_contributors($node);
}

/**
 * Implements hook_node_update().
 *
 * Subscribe notable contributors when updating nodes.
 */
function c4m_content_article_node_update($node) {
  c4m_content_article_subscribe_contributors($node);
}

/**
 * Helper function to subscribe contributors to a given node.
 *
 * @param object $node
 *   The node object to act upon.
 */
function c4m_content_article_subscribe_contributors($node) {
  // Only for articles.
  if ($node->type != 'article') {
    return;
  }

  // Get the correct flag object.
  $subscribe_c4m_follow_node_flag = flag_get_flag('subscribe_c4m_follow_node');

  // Get all contributors of the current article.
  $contributors_current = is_array(field_get_items('node', $node, 'c4m_related_user'))
    ? field_get_items('node', $node, 'c4m_related_user') : array();

  // Get all subscribed users in the database.
  $flagged_users = flag_get_entity_flags('node', $node->nid, 'subscribe_c4m_follow_node');

  foreach ($flagged_users as $flagged_user) {
    if ($user = user_load($flagged_user->uid)) {
      // If user is subscribed, but not present in contributors.
      if (!array_search($flagged_user->uid, array_column($contributors_current, 'target_id'))) {
        // Unsubscribe.
        $subscribe_c4m_follow_node_flag->flag('unflag', $node->nid, $user);
      }
    }
  }

  foreach ($contributors_current as $contributor) {
    if ($user = user_load($contributor['target_id'])) {
      // If user is contributor, but not subscribed.
      if (!$subscribe_c4m_follow_node_flag->is_flagged($node->nid, $user->uid)) {
        // Subscribe.
        $subscribe_c4m_follow_node_flag->flag('flag', $node->nid, $user);
      }
    }
  }
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_article_c4m_helper_entity_label_info() {
  return array(
    'article' => array(
      'article' => t('an'),
      'singular' => t('article'),
      'plural' => t('articles'),
      'insert action' => t('created a new Article'),
      'update action' => t('updated the Article'),
      'icon' => 'fa-bullhorn',
    ),
  );
}

/**
 * Implements hook_TYPE_alter().
 *
 * Using hook_c4m_offcanvas_trigger_label_left_alter().
 */
function c4m_content_article_c4m_offcanvas_trigger_label_left_alter(&$trigger_label) {
  if (arg(0) == 'articles' && empty(arg(1))) {
    $trigger_label['label'] = t('Filter results');
    $trigger_label['icon'] = 'filter';
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_content_article_field_formatter_info() {
  return array(
    'c4m_formatter_title_link_abbreviation' => array(
      'label' => t('Title with link + abbreviation'),
      'field types' => array('link_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function c4m_content_article_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = $used = array();

  switch ($display['type']) {
    case 'c4m_formatter_title_link_abbreviation':
      foreach ($items as $delta => $item) {
        $initials = c4m_user_get_initials($item['title']);
        $icon = c4m_user_get_themed_initials($initials, $item['url']);
        $content = $item['url'] ? l($item['title'], $item['url']) : check_plain($item['title']);
        $element[$delta] = array(
          '#markup' => '<div class="icon-col">' . $icon . '</div><div class="content-col">' . $content . '</div>',
        );
      }

      break;
  }
  return $element;
}

/**
 * Implements hook_node_view_alter().
 *
 * Style the 'Regions & Countries' section in the right dashboard.
 * And hide the article title, because it shows before and after the banner.
 */
function c4m_content_article_node_view_alter(&$build) {
  if ($build['#bundle'] != 'article') {
    return;
  }

  if ($build['#view_mode'] != 'full') {
    return;
  }

  // Remove the 'Regions' taxonomies.
  if (!empty($build['c4m_vocab_geo'])) {
    foreach ($build['c4m_vocab_geo']['#items'] as $index => $item) {
      unset($build['c4m_vocab_geo'][$index]);
    }
  }

  // Remove the 'Topics' taxonomies.
  if (!empty($build['c4m_vocab_topic'])) {
    foreach ($build['c4m_vocab_topic']['#items'] as $index => $item) {
      unset($build['c4m_vocab_topic'][$index]);
    }
  }

  // Add the new markup Topics.
  $build['c4m_vocab_topic'][0]['#markup'] = c4m_content_taxonomy_build_tree($build['c4m_vocab_topic']['#items']);
  // Add the new markup Regions.
  $build['c4m_vocab_geo'][0]['#markup'] = c4m_content_taxonomy_build_tree($build['c4m_vocab_geo']['#items']);

  return $build;
}
