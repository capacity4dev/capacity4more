<?php

/**
 * @file
 * Code for the Project content type feature.
 */

include_once 'c4m_content_project.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function c4m_content_project_ctools_plugin_directory($module, $plugin_type) {
  if ($module == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_c4m_og_vocab_info_groups().
 */
function c4m_content_project_c4m_og_vocab_info_groups() {
  return array(
    'project' => array(
      'c4m_vocab_category',
      'c4m_vocab_tag',
    ),
  );
}

/**
 * Implements hook_c4m_content_statistics_info().
 */
function c4m_content_project_c4m_content_statistics_info() {
  return array(
    'global' => array(
      'c4m_projects' => array(
        'type'        => 'project',
        'entity_type' => 'node',
        'bundles'     => array('project'),
        'singular'    => 'Project',
        'plural'      => 'Projects',
        'state'       => 1,
        'skip_access_check' => TRUE,
        'c4m_status'  => array('published', 'archived'),
        'aggregate'   => array(),
        'weight'      => -3,
        'attributes'  => array(
          'class' => array('projects'),
        ),
        'link' => array(
          'path' => 'projects',
        ),
      ),
    ),
    'topic' => array(
      'c4m_topic_projects' => array(
        'type'        => 'project',
        'entity_type' => 'node',
        'bundles'     => array('project'),
        'singular'    => 'Project',
        'plural'      => 'Projects',
        'state'       => 1,
        'aggregate'   => array(),
        'weight'      => 1,
        'attributes'  => array(
          'class' => array('topic-projects'),
        ),
        'link' => array(
          'path' => 'projects',
          'options' => array(
            'query' => array(
              'f' => array(
                'c4m_vocab_topic:@TOPIC_ID',
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function c4m_content_project_block_info() {
  $blocks = array();

  $blocks['header_name_banner_project'] = array(
    'info' => t('Project header'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['c4m_block_create_project'] = array(
    'info' => t('Project: Create project'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['c4m_block_project_partners'] = array(
    'info' => t('Project: Partners'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function c4m_content_project_block_view($delta) {
  $module = 'c4m_content_project';

  module_load_include('inc', $module, $module . '.block');
  $callback = "_{$module}_block_" . $delta;
  if (function_exists($callback)) {
    return $callback();
  }

  return array();
}

/**
 * Implements hook_FORM_ID_form_alter().
 *
 * Alter the Project creation form.
 */
function c4m_content_project_form_project_node_form_alter(&$form, &$form_state) {
  $type = '';
  if (preg_match('/node\/add\/(project|programme)/', $_SERVER['REQUEST_URI'], $matches)) {
    $type = $matches[1];
    $form['c4m_project_type'][LANGUAGE_NONE]['#value'] = $type;
  }
  _c4m_og_alter_group_form($form, $form_state, $type);

  c4m_content_project_set_number_of_items_states($form, 'c4m_left_column');
  c4m_content_project_set_number_of_items_states($form, 'c4m_right_column');
}

/**
 * Helper function to set the correct states for the number of items field.
 *
 * @param array $form
 *   The form on which to act.
 * @param array $element
 *   The form element.
 */
function c4m_content_project_set_number_of_items_states(&$form, $element) {
  foreach ($form[$element][LANGUAGE_NONE] as &$item) {
    if (isset($item['#bundle']) && $item['#bundle'] == 'c4m_paragraph_system_block') {
      $item['c4m_number_of_items']['#states'] = array(
        'visible' => array(
          array(
            ':input[name="' . $element . '[und][' . $item['#delta'] . '][c4m_block][und]"]' => array('value' => 'views:c4m_project_news-block'),
          ),
          array(
            ':input[name="' . $element . '[und][' . $item['#delta'] . '][c4m_block][und]"]' => array('value' => 'views:c4m_project_events-block'),
          ),
          array(
            ':input[name="' . $element . '[und][' . $item['#delta'] . '][c4m_block][und]"]' => array('value' => 'views:c4m_project_highlights-block'),
          ),
        ),
      );
    }
  }
  $form['c4m_project_type']['#access'] = FALSE;

  // There's no node ID at form => form is for new project creation.
  // Hide status field, for it to get default value of Pending, once created.
  if (is_null($form['nid']['#value'])) {
    $form['c4m_og_status']['#access'] = FALSE;
  }
  $form['c4m_is_template']['#access'] = FALSE;
}

/**
 * Returns the administered groups count for an user.
 *
 * @param int $uid
 *   User id.
 *
 * @return int
 *   Count.
 */
function c4m_content_project_get_administered_projects_count($uid) {
  return c4m_og_get_user_administered_groups_count($uid, 'project');
}

/**
 * Implements hook_c4m_helper_entity_label_info().
 */
function c4m_content_project_c4m_helper_entity_label_info() {
  return array(
    'project' => array(
      'article' => t('a'),
      'singular' => t('project'),
      'plural' => t('projects'),
      'insert action' => t('created a new project'),
      'update action' => t('updated the project'),
      'icon' => 'fa-users',
    ),
  );
}

/**
 * Implements hook_c4m_helper_entity_metrics_info().
 */
function c4m_content_project_c4m_helper_entity_metrics_info() {
  return array(
    'c4m_user_projects_administered' => array(
      'type' => 'projects_administered',
      'context' => 'user',
      'callback' => 'c4m_content_project_get_administered_projects_count',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_content_project_field_formatter_info() {
  return array(
    'c4m_partner_formatter' => array(
      'label' => t('C4M Partner'),
      'field types' => array('image'),
      'settings'  => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function c4m_content_project_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    // Load title and url for the paragraph.
    $title = $entity->c4m_heading[LANGUAGE_NONE][0];
    $url = isset($entity->c4m_link[LANGUAGE_NONE][0]) ? $entity->c4m_link[LANGUAGE_NONE][0] : FALSE;

    // Create image element + link if available.
    $source = theme('image_style', array(
      'style_name' => 'thumbnail',
      'path' => $item['uri'],
      'title' => $title['safe_value'],
    ));

    if ($url) {
      $element[] = array(
        '#markup' => l($source, $url['display_url'], array(
          'html' => TRUE,
          'attributes' => array(
            'target' => $url['attributes']['target'],
          ),
        )),
      );
    }
    else {
      $element[] = array('#markup' => $source);
    }
  }

  return $element;
}

/**
 * Alter referenceable blocks, BEFORE the autocomplete match.
 *
 * @see hook_blockreference_blocks_pre_alter()
 */
function c4m_content_project_blockreference_blocks_pre_alter(&$blocks, $context) {
  $whitelist = module_invoke_all('c4m_content_project_blockreference_whitelist');

  // Remove blocks which are not whitelisted.
  foreach ($blocks as $id => $block) {
    $block_string = $block->module . ':' . $block->delta;
    if (!in_array($block_string, $whitelist) && !array_key_exists($block_string, $whitelist)) {
      unset($blocks[$id]);
    }
    else {
      if (array_key_exists($block_string, $whitelist)) {
        $block->info = $whitelist[$block_string]['label'];
      }
    }
  }
}

/**
 * Implements hook_pc_system_component_blockreference_whitelist().
 */
function c4m_content_project_c4m_content_project_blockreference_whitelist() {
  return array(
    'c4m_content_project:c4m_block_project_partners' => array(
      'label' => t('Project partners'),
    ),
    'views:c4m_project_news-block' => array(
      'label' => t('Project news'),
    ),
    'views:c4m_project_events-block' => array(
      'label' => t('Project events'),
    ),
    'views:c4m_project_highlights-block' => array(
      'label' => t('Project highlights'),
    ),
  );
}

/**
 * Implements hook_ds_fields_info().
 */
function c4m_content_project_ds_fields_info($entity_type) {
  $fields = array();

  $path = drupal_get_path('module', 'c4m_content_project');

  if ($entity_type == 'node') {
    // Special field to render the block reference according to type of block.
    $fields['c4m_system_block_renderer'] = array(
      'title' => t('C4M System Block Renderer'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array(),
      'function' => 'c4m_content_project_system_block_renderer',
    );
  }
  elseif ($entity_type == 'paragraphs_item') {
    // Twitter widget.
    $fields['c4m_ds_field_twitter_widget'] = array(
      'title' => t('Twitter widget'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'ui_limit' => array('c4m_paragraph_twitter|*'),
      'file' => $path . '/c4m_content_project.ds_fields.inc',
      'function' => '_c4m_ds_field_twitter_widget',
    );
  }

  return array($entity_type => $fields);
}

/**
 * Callback for the system block renderer field.
 *
 * @param string $field
 *   The field which to render.
 *
 * @return array
 *   Rendered output.
 */
function c4m_content_project_system_block_renderer($field) {
  if ($paragraph_id = $field['entity']->item_id) {
    if ($paragraphs_item = paragraphs_item_load_multiple(array($paragraph_id))) {
      $paragraphs_item = reset($paragraphs_item);
      $block_info = explode(':', $paragraphs_item->c4m_block[LANGUAGE_NONE][0]['moddelta']);

      // If the referenced block is NOT a View.
      if ($block_info[0] != 'views') {
        // Simply render the block.
        $rendered_block = c4m_helper_block_render($block_info[0], $block_info[1]);
        return render($rendered_block);
      }

      // If a View, take into account the number of items parameter.
      $number_of_items = isset($paragraphs_item->c4m_number_of_items) ? $paragraphs_item->c4m_number_of_items : 5;

      // Get info for the View.
      $views_info = explode('-', $block_info[1]);
      $view = views_get_view($views_info[0]);

      // Set number of items.
      $number_of_items = $number_of_items[LANGUAGE_NONE][0]['value'];
      $view->set_items_per_page($number_of_items);

      // Render the View.
      $output = $view->preview($views_info[1], array());
      $view->destroy();

      return $output;
    }
  }

  return '';
}

/**
 * Implements hook_theme().
 */
function c4m_content_project_theme() {
  $theme['c4m_content_project_header_title'] = array(
    'variables' => array(
      'title' => '',
      'stage' => '',
      'type' => '',
      'status' => '',
      'flag' => '',
    ),
    'path' => drupal_get_path('module', 'c4m_content_project') . '/theme',
    'template' => 'c4m-content-project-header-title',
  );

  return $theme;
}

/**
 * Implements hook_TYPE_alter().
 *
 * Using hook_c4m_offcanvas_trigger_label_left_alter().
 */
function c4m_content_project_c4m_offcanvas_trigger_label_left_alter(&$trigger_label) {
  if (arg(0) == 'projects' && empty(arg(1))) {
    $trigger_label['label'] = t('Filter results');
    $trigger_label['icon'] = 'filter';
  }
}

/**
 * Implements hook_c4m_cta_block().
 */
function c4m_content_project_c4m_cta_block() {
  global $user;

  // Only add items if there is an OG group.
  if (!$group = c4m_og_current_group()) {
    return;
  }

  // Prevent from 'group' nodes to run this logic.
  if ($group->type != 'project') {
    return;
  }

  // A blocked (banned) user should not be able to see the CTA block.
  $user_role = c4m_user_og_get_role_in_group($user, $group);
  if ($user_role == 'blocked') {
    return;
  }

  $items = array();

  if (!drupal_is_front_page() || user_is_anonymous()) {
    return $items;
  }

  $items['create-programme'] = array(
    '#theme' => 'c4m_group_visitor_cta',
    '#button_label' => t('Create programme'),
    '#button_icon' => 'fa-plus',
    '#url' => url('/node/add/programme'),
  );

  if ($item = c4m_user_og_follow_group_cta($group)) {
    $items['follow'] = $item;
  }

  return $items;
}

/**
 * Implements hook_menu().
 *
 * Create menu item for non-admins to clear the cache.
 */
function c4m_content_project_menu() {
  $items['admin/config/c4m/projects-programmes-templates'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('c4m_content_project_choose_template_form'),
    'access arguments' => array('administer site configuration'),
    'title' => 'Projects & programmes templates',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1000,
  );

  $items['c4m/autocomplete/c4m_content_project/%'] = array(
    'title' => 'Autocomplete for projects & programmes',
    'page callback' => 'c4m_content_project_autocomplete',
    'page arguments' => array(3),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['c4m/project-template-clone/%node/%'] = array(
    'access callback' => 'c4m_content_project_clone_template_access',
    'access arguments' => array(2, 3),
    'page callback' => 'c4m_content_project_clone_template',
    'page arguments' => array(2),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/add/programme'] = array(
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback for c4m/project-template-clone/%node/%.
 */
function c4m_content_project_clone_template_access($node, $type) {
  $access = TRUE;
  $access = $access && ($type == 'project' || $type == 'programme');
  $access = $access && !empty($node->c4m_is_template[LANGUAGE_NONE][0]['value']);
  $access = $access && ($type == $node->c4m_project_type[LANGUAGE_NONE][0]['value']);
  $access = $access && node_access('create', $node->type);
  return $access;

}

/**
 * Form builder for choose project / programme as template form.
 */
function c4m_content_project_choose_template_form($form, &$form_state) {
  $node = c4m_content_project_get_node_template('project');
  $form['project'] = array(
    '#type' => 'textfield',
    '#title' => t('Project template'),
    '#default_value' => $node ? "{$node->title} ({$node->nid})" : '',
    '#autocomplete_path' => 'c4m/autocomplete/c4m_content_project/project',
  );

  $node = c4m_content_project_get_node_template('programme');
  $form['programme'] = array(
    '#type' => 'textfield',
    '#title' => t('Programme template'),
    '#default_value' => $node ? "{$node->title} ({$node->nid})" : '',
    '#autocomplete_path' => 'c4m/autocomplete/c4m_content_project/programme',
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

/**
 * Submit handler for c4m_content_project_choose_template_form.
 */
function c4m_content_project_choose_template_form_submit($form, &$form_state) {
  c4m_content_project_choose_template_form_save_info($form_state, 'project');
  c4m_content_project_choose_template_form_save_info($form_state, 'programme');
}

/**
 * Saves the template info for the Project / Programme choose template form.
 *
 * @param array $form_state
 *   Form state.
 * @param string $project_type
 *   Project type. 'project' | 'programme'.
 */
function c4m_content_project_choose_template_form_save_info(&$form_state, $project_type) {
  if ($form_state['values'][$project_type]) {
    $value = $form_state['values'][$project_type];
    if (preg_match('/\((\d+)\)$/', $value, $matches)) {
      $node = node_load($matches[1]);
      if ($node->type == 'project' && $node->c4m_project_type[LANGUAGE_NONE][0]['value'] == $project_type) {
        c4m_content_project_unset_current_template($project_type);
        $node->c4m_is_template[LANGUAGE_NONE][0]['value'] = 1;
        node_save($node);
      }
    }
  }
  else {
    c4m_content_project_unset_current_template($project_type);
  }
}

/**
 * Unset current template.
 *
 * @param string $project_type
 *   Project type. 'project' | 'programme'.
 */
function c4m_content_project_unset_current_template($project_type) {
  if ($old_node = c4m_content_project_get_node_template($project_type)) {
    $old_node->c4m_is_template[LANGUAGE_NONE][0]['value'] = 0;
    node_save($old_node);
  }
}

/**
 * Returns the current project template.
 *
 * @return bool|object
 *   FALSE if not found. Node object if found.
 */
function c4m_content_project_get_project_template() {
  return c4m_content_project_get_node_template('project');
}

/**
 * Returns the current project template.
 *
 * @type string
 *   The type of project. 'project' / 'programme'.
 *
 * @return bool|object
 *   FALSE if not found. Node object if found.
 */
function c4m_content_project_get_node_template($type) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'project')
    ->fieldCondition('c4m_is_template', 'value', 1)
    ->fieldCondition('c4m_project_type', 'value', $type == 'programme' ? 'programme' : 'project');
  $result = $query->execute();

  if (isset($result['node'])) {
    list($node_id) = array_keys($result['node']);
    return node_load($node_id);
  }

  return FALSE;
}

/**
 * Page callback for node autocomplete.
 *
 * @param string $type
 *   The project type: 'project', 'programme'.
 * @param string $title
 *   The search string.
 */
function c4m_content_project_autocomplete($type, $title = '') {
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments, recover the intended $titles_typed.
  $args = func_get_args();
  // Shift off the $type argument.
  array_shift($args);
  $title = implode('/', $args);

  $node_matches = array();
  if (!empty($title)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'project')
      ->fieldCondition('c4m_is_template', 'value', 0);
    $query->fieldCondition('c4m_project_type', 'value', $type == 'programme' ? 'programme' : 'project');

    // Select rows that match by title.
    $result = $query
      ->propertyCondition('title', '%' . db_like($title) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();

    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $nodes = node_load_multiple($nids);

      foreach ($nodes as $node) {
        $name = "{$node->title} ({$node->nid})";
        $n = $name;
        // Titles containing commas or quotes must be wrapped in quotes.
        if (strpos($name, ',') !== FALSE || strpos($name, '"') !== FALSE) {
          $n = '"' . str_replace('"', '""', $name) . '"';
        }
        $node_matches[$n] = check_plain($name);
      }
    }
  }

  drupal_json_output($node_matches);
}

/**
 * Implements hook_url_inbound_alter().
 */
function c4m_content_project_url_inbound_alter(&$path, $original_path, $path_language) {
  if (!preg_match('/node\/add\/(project|programme)/', $path, $matches)) {
    return;
  }
  $type = $matches[1];
  $node = c4m_content_project_get_node_template($type);
  if ($node) {
    $path = 'c4m/project-template-clone/' . $node->nid . '/' . $type;
  }
  elseif ($type == 'programme') {
    // There's no node/add/programme URL we have to "redirect" to
    // node/add/project.
    $path = 'node/add/project';
  }
}

/**
 * Callback for c4m/project-template-clone/%node page.
 *
 * Inspired from clone_node_prepopulate().
 *
 * @param object $original_node
 *   Template to be cloned.
 *
 * @return array
 *   The rendered node form.
 */
function c4m_content_project_clone_template($original_node) {
  if (!isset($original_node->nid)) {
    return array();
  }

  $node = _c4m_content_project_clone_template_prepare($original_node);
  drupal_set_title($node->title);
  // Let other modules do special fixing up.
  $context = array('method' => 'prepopulate', 'original_node' => $original_node);
  drupal_alter('clone_node', $node, $context);
  // Make sure the file defining the node form is loaded.
  $form_state = array();
  $form_state['build_info']['args'] = array($node);
  form_load_include($form_state, 'inc', 'node', 'node.pages');
  return drupal_build_form($node->type . '_node_form', $form_state);
}

/**
 * Prepares a project template to be cloned.
 *
 * Inspired from _clone_node_prepare().
 */
function _c4m_content_project_clone_template_prepare($original_node) {
  $node = clone $original_node;
  $account = $GLOBALS['user'];

  $node->nid = NULL;
  $node->vid = NULL;
  $node->tnid = NULL;
  $node->log = NULL;
  // Also handle modules that attach a UUID to the node.
  $node->uuid = NULL;
  $node->vuuid = NULL;

  // Anyonmymous users don't have a name.
  // @see: drupal_anonymous_user().
  $node->name = isset($account->name) ? $account->name : NULL;
  $node->uid = $account->uid;

  $node->created = NULL;
  if (isset($node->book['mlid'])) {
    $node->book['mlid'] = NULL;
    $node->book['has_children'] = 0;
  }
  $node->path = NULL;
  $node->files = array();
  $node->title = '';

  // Add an extra property as a flag.
  $node->clone_from_original_nid = $original_node->nid;

  // Unset template field.
  $node->c4m_is_template = NULL;
  // Unset purl.
  $node->purl = NULL;

  return $node;
}

/**
 * Implements hook_node_view_alter().
 *
 * Alter the Related projects field label for programmes.
 */
function c4m_content_project_node_view_alter(&$build) {
  if ($build['#node']->type != 'project') {
    return;
  }

  // @todo Change this.
  if (empty($build['#node']->field_c4m_is_programme[LANGUAGE_NONE][0]['value'])) {
    return;
  }

  $build['c4m_related_projects']['#title'] = t('Related Programmes');
}
