<?php

/**
 * @file
 * Code for the Topic content type feature.
 */

include_once 'c4m_content_topic.features.inc';

/**
 * Implements hook_views_pre_render().
 */
function c4m_content_topic_views_pre_render(&$view) {
  switch ($view->name) {
    case 'c4m_related_nodes':
      $term = c4m_content_topic_get_term_from_node();
      if (!empty($term)) {
        $view->display_handler->set_option('link_display', 'custom_url');
        $options = array(
          'query' => array(
            'f' => array('c4m_vocab_topic:' . $term->tid),
          ),
        );
      }
      else {
        $options = array();
      }
      switch ($view->current_display) {
        case 'block':
          $link = 'groups';
          break;

        case 'block_1':
          $link = 'projects';
          break;

        case 'block_2':
          $link = 'articles';
          break;
      }

      $view->display_handler->set_option('link_url', url($link));
      $view->exposed_raw_input = $options['query'];
      break;
  }
}

/**
 * Helper function to retrieve mapped taxonomy term.
 *
 * @param null|int $nid
 *   Node ID (or NULL if we get node from the context).
 *
 * @return object|null
 *   Term object if found, otherwise NULL.
 */
function c4m_content_topic_get_term_from_node($nid = NULL) {
  if ($nid == NULL) {
    $node = menu_get_object('node');
  }
  else {
    $node = node_load($nid);
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  return (!empty($wrapper->c4m_vocab_topic_mapping))
    ? $wrapper->c4m_vocab_topic_mapping->value() : NULL;
}

/**
 * Implements hook_field_formatter_info().
 */
function c4m_content_topic_field_formatter_info() {
  return array(
    'term_reference_tree_children_expanded' => array(
      'label' => t('Term reference tree with all children'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'display' => 'all',
        'link' => '',
        'wrap' => 'none',
        'separator' => ' » ',
      ),
    ),
    'term_reference_checked_inline_tree' => array(
      'label' => t('Term reference tree - All checked terms inline'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'display' => 'all',
        'link' => '',
        'wrap' => 'none',
        'separator' => ' > ',
        'glue' => ', ',
      ),
    ),
    'term_reference_only_parents' => array(
      'label' => t('Term reference tree - Only level 1 terms'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'display' => 'all',
        'link' => '',
        'wrap' => 'none',
        'separator' => ', ',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function c4m_content_topic_field_formatter_settings_form(
  $field,
  $instance,
  $view_mode,
  $form,
  &$form_state
) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  $element['link'] = array(
    '#title' => t('Link each term'),
    '#description' => t(
      'If checked, the terms will link to the search page, filtered by this term.'
    ),
    '#type' => 'checkbox',
    '#default_value' => $settings['link'],
  );
  $element['separator'] = array(
    '#title' => t('Separator'),
    '#description' => t(
      'Enter some text or markup that will separate each term in the hierarchy. Leave blank for no separator. Example: <em>»</em>'
    ),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => $settings['separator'],
    '#required' => FALSE,
  );
  if ($instance['display'][$view_mode]['type'] == 'term_reference_checked_inline_tree') {
    $element['glue'] = array(
      '#title' => t('Glue'),
      '#description' => t(
        'Enter some text or markup that will separate terms on the same level in the hierarchy. Example: <em>, </em>'
      ),
      '#type' => 'textfield',
      '#size' => 20,
      '#default_value' => $settings['glue'],
      '#required' => TRUE,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function c4m_content_topic_field_formatter_settings_summary(
  $field,
  $instance,
  $view_mode
) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $format = $settings['link'] ? t('Links') : t('Plain text');

  $summary = t('Display: As %format', array('%format' => $format));

  if (!empty($settings['separator'])) {
    $summary .= '<br />' . t(
        'Separator: "@separator"',
        array('@separator' => $settings['separator'])
      );
  }
  if (!empty($settings['glue'])) {
    $summary .= '<br />' . t(
        'Glue: "@glue"',
        array('@glue' => $settings['glue'])
      );
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function c4m_content_topic_field_formatter_prepare_view(
  $entity_type,
  $entities,
  $field,
  $instances,
  $langcode,
  &$items,
  $displays
) {
  taxonomy_field_formatter_prepare_view(
    $entity_type,
    $entities,
    $field,
    $instances,
    $langcode,
    $items,
    $displays
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function c4m_content_topic_field_formatter_view(
  $entity_type,
  $entity,
  $field,
  $instance,
  $langcode,
  $items,
  $display
) {
  $element = $used = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'term_reference_tree_children_expanded':
      foreach ($items as $delta => $item) {
        // Terms whose tid is 'autocreate' do not exist
        // yet and $item['taxonomy_term'] is not set. Theme such terms as
        // just their name.
        if ($item['tid'] == 'autocreate') {
          $terms = array(
            'tid' => 'none',
            'content' => check_plain($item['name']),
          );
        }
        else {
          // Build an array representing the term hierarchy.
          $term_tree = array($item['taxonomy_term']);
          $term_tree = array_merge(
            $term_tree,
            taxonomy_get_tree(
              $item['taxonomy_term']->vid,
              $item['taxonomy_term']->tid
            )
          );

          // Remove empty elements caused by discarded items.
          $term_tree = array_filter($term_tree);
          $terms = array();

          // Get the vocabulary to create a filter on vocab facet.
          $vocab = taxonomy_vocabulary_load($item['taxonomy_term']->vid);

          foreach ($term_tree as $term) {
            if ($settings['link']) {
              $options = array(
                'query' => array(
                  'f' => array($vocab->machine_name . ':' . $term->tid),
                ),
              );

              $link = array(
                '#type' => 'link',
                '#title' => $term->name,
                '#href' => 'search',
                '#options' => $options,
              );
              $terms[] = array(
                'tid' => $term->tid,
                'content' => drupal_render($link),
              );
            }
            else {
              $terms[] = array(
                'tid' => $term->tid,
                'content' => check_plain($term->name),
              );
            }
          }
        }

        // Make sure there are terms before adding to $element.
        if (count($terms)) {
          // Prepare theme variables.
          $variables = array(
            'terms' => $terms,
            'separator' => $settings['separator'],
          );

          $element[$delta] = array(
            '#markup' => theme(
              'c4m_content_topic_term_reference_tree_children_expanded',
              $variables
            ),
          );
        }
      }

      break;

    case 'term_reference_checked_inline_tree':
      $terms = array();
      foreach ($items as $delta => $item) {
        if ($item['tid'] == 'autocreate') {
          $element[$delta] = array(
            '#markup' => check_plain($item['name']),
          );
        }
        else {
          $term = $item['taxonomy_term'];

          if ($settings['link']) {
            // Get the vocabulary to create a filter on vocab facet.
            $vocab = taxonomy_vocabulary_load($item['taxonomy_term']->vid);

            $options = array(
              'query' => array(
                'f' => array($vocab->machine_name . ':' . $term->tid),
              ),
            );

            $link = array(
              '#type' => 'link',
              '#title' => $term->name,
              '#href' => 'search',
              '#options' => $options,
            );
            $content = drupal_render($link);
          }
          else {
            $content = check_plain($term->name);
          }
          $terms[$term->tid] = array(
            'tid' => $term->tid,
            'content' => $content,
            'children' => taxonomy_get_tree($term->vid, $term->tid, 1),
          );
        }
      }

      // Make sure there are terms before adding to $element.
      if (count($terms)) {
        foreach ($terms as &$term) {
          c4more_content_topic_array_to_tree($terms, $term);
        }

        // Prepare theme variables.
        $variables = array(
          'terms' => $terms,
          'separator' => $settings['separator'],
          'glue' => $settings['glue'],
        );

        $element[$delta] = array(
          '#markup' => theme(
            'c4m_content_topic_inline_tree',
            $variables
          ),
        );
      }
      break;

    case 'term_reference_only_parents':
      $terms = array();
      foreach ($items as $delta => $item) {
        if (!count(taxonomy_get_parents($item['tid']))) {
          if ($item['tid'] == 'autocreate') {
            $element[$delta] = array(
              '#markup' => check_plain($item['name']),
            );
          }
          else {
            $term = $item['taxonomy_term'];

            // Get the vocabulary to create a filter on vocab facet.
            $vocab = taxonomy_vocabulary_load($item['taxonomy_term']->vid);

            if ($settings['link']) {
              $options = array(
                'query' => array(
                  'f' => array($vocab->machine_name . ':' . $term->tid),
                ),
              );

              $link = array(
                '#type' => 'link',
                '#title' => $term->name,
                '#href' => 'search',
                '#options' => $options,
              );
              $terms[$term->tid] = array(
                'tid' => $term->tid,
                'content' => drupal_render($link),
              );
            }
            else {
              $terms[$term->tid] = array(
                'tid' => $term->tid,
                'content' => check_plain($term->name),
              );
            }
          }
        }
      }

      // Make sure there are terms before adding to $element.
      if (count($terms)) {
        // Prepare theme variables.
        $variables = array(
          'terms' => $terms,
          'separator' => $settings['separator'],
        );

        $element[$delta] = array(
          '#markup' => theme(
            'c4m_content_topic_term_reference_tree_children_expanded',
            $variables
          ),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function c4m_content_topic_theme($existing, $type, $theme, $path) {
  return array(
    'c4m_content_topic_term_reference_tree_children_expanded' => array(
      'variables' => array(
        'terms' => array(),
        'separator' => '',
      ),
    ),
    'c4m_content_topic_inline_tree' => array(
      'variables' => array(
        'terms' => array(),
        'separator' => '',
        'glue' => '',
      ),
    ),
  );
}

/**
 * Theme the term hierarchy.
 */
function theme_c4m_content_topic_term_reference_tree_children_expanded($variables) {
  $items = array();
  $separator = filter_xss_admin($variables['separator']);

  foreach ($variables['terms'] as $item) {
    $items[] = $item['content'];
  }

  return implode($separator, $items);
}

/**
 * Returns the HTML for an inlined term hierarchy.
 *
 * @return string
 *   HTML output.
 */
function theme_c4m_content_topic_inline_tree($variables) {
  $separator = filter_xss_admin($variables['separator']);
  $glue = filter_xss_admin($variables['glue']);
  $items = array();

  foreach ($variables['terms'] as $item) {
    $items = array_merge($items, c4m_content_topic_tree_to_string($item, $separator, $glue));
  }

  return theme('item_list', array('items' => $items));
}

/**
 * Transforms a tree into a list of strings.
 *
 * @param array $item
 *   Tree item.
 * @param string $separator
 *   Separator between items on different levels.
 * @param string $glue
 *   Glue string for items on the same level.
 *
 * @return array
 *   Array of items to show.
 */
function c4m_content_topic_tree_to_string($item, $separator = ' > ', $glue = ', ') {
  if (empty($item['children'])) {
    return array($item['content']);
  }

  $more_depth = FALSE;
  $children = array();
  foreach ($item['children'] as $child) {
    if ($child['children']) {
      $more_depth = TRUE;
      $children = array_merge($children, c4m_content_topic_tree_to_string($child, $separator, $glue));
    }
    else {
      $children[] = $child['content'];
    }
  }

  if ($more_depth) {
    foreach ($children as &$child) {
      $child = $item['content'] . $separator . $child;
    }
    return $children;
  }
  else {
    return array($item['content'] . $separator . implode($glue, $children));
  }
}

/**
 * Transform a flat array into an hierarchical array.
 *
 * @param array $terms
 *   Array of terms.
 * @param array $term
 *   Current term.
 */
function c4more_content_topic_array_to_tree(&$terms, &$term) {
  if (!$term['children']) {
    return;
  }
  foreach ($term['children'] as $key => $child) {
    if (!isset($terms[$child->tid])) {
      unset($term['children'][$key]);
    }
    else {
      c4more_content_topic_array_to_tree($terms, $terms[$child->tid]);
      $term['children'][$key] = $terms[$child->tid];
      unset($terms[$child->tid]);
    }
  }
}
