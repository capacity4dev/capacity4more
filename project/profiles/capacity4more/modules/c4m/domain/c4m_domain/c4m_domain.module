<?php
/**
 * @file
 * Code for the C4M Email Domain module.
 */

/**
 * Implements hook_c4m_domain_validators_info().
 */
function c4m_domain_c4m_domain_validators_info() {
  return array(
    'c4m_domain_validate_email' => array(
      'name' => t('E-mail domain'),
      'description' => t('Validate the domain matches the given email address.'),
      'callback' => 'c4m_domain_validate_email',
    ),
  );
}

/**
 * Callback for hook_c4m_domain_validators_info.
 *
 * @param string $email
 *   The email address to validate.
 *
 * @return bool
 *   Whether the domain is valid or not.
 */
function c4m_domain_validate_email($email) {
  return TRUE;
}

/**
 * Retrieve a list of domain validators.
 *
 * @return array
 *   Validators information as collected trough the implemented
 *   hook_c4m_domain_validators_info hooks.
 */
function c4m_domain_validators_info() {
  $cache_key  = 'c4m_domain:validators_info';
  $data = &drupal_static($cache_key);

  // Retrieve from Cache if not loaded before.
  if (!isset($data)) {
    if (($cache = cache_get($cache_key)) && !empty($cache->data)) {
      $data = $cache->data;
    }
    else {
      $hook = 'hook_c4m_domain_validators_info';
      $data = module_invoke_all($hook);
      cache_set($cache_key, $data);
    }
  }

  // Return all data.
  return $data;
}

/**
 * Implements hook_entity_info().
 */
function c4m_domain_entity_info() {
  $info = array();

  $info['c4m_domain'] = array(
    'label' => t('Email Domain'),
    'base table' => 'c4m_domain',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'entity class' => 'C4mDomainEntity',
    'controller class' => 'EntityAPIController',
    'access callback' => 'c4m_domain_access_callback',
    'uri callback' => 'entity_class_uri',
    'admin ui' => array(
      'path' => 'admin/c4m/domains',
      'controller class' => 'EntityDefaultUIController',
    ),
    'bundles' => array(
      'c4m_domain' => array(
        'label' => t('Domain'),
        'admin' => array(
          'path' => 'admin/c4m/domains',
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
    'module' => 'c4m_domain',
    'fieldable' => FALSE,
  );

  return $info;
}

/**
 * Implements hook_menu().
 */
function c4m_domain_menu() {
  $items = array();

  $items['domain/%'] = array(
    'title' => 'Domain',
    'page callback' => 'c4m_domain_view_domain',
    'page arguments' => array(1),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Access callback for domain entities.
 */
function c4m_domain_access_callback($op, $domain = NULL, $account = NULL) {
  if ($op == 'view' || $op == 'update' || $op == 'create' || $op == 'delete') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Callback function for displaying an individual domain.
 */
function c4m_domain_view_domain($id) {
  // Lookup the id.
  $domains = entity_load('c4m_domain', array(intval($id)));
  if (empty($domains[$id])) {
    drupal_not_found();
    return;
  }

  // Render output.
  $domain = $domains[$id];
  drupal_set_title($domain->name);
  $output = entity_view('c4m_domain', array($domain));

  return $output;
}

/**
 * Form definition for adding / editing a domain.
 */
function c4m_domain_form($form, &$form_state, $domain = NULL) {
  $form = array();

  $form['name'] = array(
    '#title' => t('Domain name'),
    '#description' => t('The domain part of the email address.'),
    '#type' => 'textfield',
    '#default_value' => isset($domain->name) ? $domain->name : '',
    '#required' => TRUE,
    '#maxlength' => 255,
  );

  $form['organisation_name'] = array(
    '#title' => t('Organisation name'),
    '#description' => t('The organisation.'),
    '#type' => 'textfield',
    '#default_value' => isset($domain->organisation_name) ? $domain->organisation_name : '',
    '#required' => TRUE,
    '#maxlength' => 255,
  );

  $form['description'] = array(
    '#title' => t('Description'),
    '#description' => t('Short description explaining what the domain is about.'),
    '#type' => 'textarea',
    '#default_value' => isset($domain->description) ? $domain->description : '',
    '#required' => TRUE,
  );

  $options = array_keys(c4m_domain_entity_info());
  $form['validator'] = array(
    '#title' => t('Validator'),
    '#description' => t('The validation type to validate if an email address with this domain is valid.'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => isset($domain->deadline) ? $domain->deadline : '',
    '#required' => TRUE,
  );

  $whitelist = '';
  if (isset($domain->whitelist)) {
    if (is_array($domain->whitelist)) {
      $whitelist = implode("\r\n", $domain->whitelist);
    }
    else {
      $whitelist = $domain->whitelist;
    }
  }
  $form['whitelist'] = array(
    '#title' => t('Whitelist'),
    '#description' => t('List email addresses that will be indicated as valid without validating them trough the validator. Add one email address per line.'),
    '#type' => 'textarea',
    '#default_value' => $whitelist,
    '#maxlength' => 4096,
  );

  field_attach_form('c4m_domain', $domain, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($domain->id) ? t('Update domain') : t('Save domain'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * Validation handler for the domain add/edit form.
 */
function c4m_domain_form_validate($form, &$form_state) {
  // Validate domain.
  $test_email = 'test@' . $form_state['values']['name'];
  if (!valid_email_address($test_email)) {
    form_set_error('name', t('The domain name is invalid.'));
  }

  // Validate description.
  if (strlen($form_state['values']['description']) > 255) {
    form_set_error('description', t('The description contains more than 255 characters.'));
  }

  // Validate whitelist.
  if (strlen($form_state['values']['whitelist']) > 4096) {
    form_set_error('description', t('The whitelist contains more than 4096 characters.'));
  }
  $whitelist = preg_split('/\r\n|[\r\n]/', $form_state['values']['whitelist']);
  $invalid_emails = array();
  $form_state['values']['whitelist'] = array();
  foreach ($whitelist as $key => $email) {
    if (empty(trim($email))) {
      unset($whitelist[$key]);
    }
    elseif (!valid_email_address($email)) {
      $invalid_emails[] = $email;
    }
  }
  $form_state['values']['whitelist'] = $whitelist;
  if (count($invalid_emails)) {
    $error_message = format_plural(count($whitelist),
      'The whitelist contains an invalid email address: %email.',
      'The whitelist contains invalid email addresses: %email.',
      array('%email' => implode(', ', $whitelist))
    );
    form_set_error('whitelist', $error_message);
  }
}

/**
 * Submit handler for the domain add/edit form.
 */
function c4m_domain_form_submit($form, &$form_state) {
  $domain = entity_ui_form_submit_build_entity($form, $form_state);
  $domain->save();
  drupal_set_message(t('The domain: @name has been saved.', array('@name' => $domain->name)));
  $form_state['redirect'] = 'admin/c4m/domains';
}

/**
 * Implements hook_entity_property_info().
 */
function c4m_domain_entity_property_info() {
  $info = array();

  $info['c4m_domain']['properties']['id'] = array(
    'label' => t('Domain ID'),
    'description' => t('The ID of the domain.'),
    'type' => 'integer',
    'schema field' => 'id',
  );

  $info['c4m_domain']['properties']['name'] = array(
    'label' => t('Domain name'),
    'description' => t('The domain part of the email address.'),
    'type' => 'text',
    'schema field' => 'name',
  );
  $info['c4m_domain']['properties']['organisation_name'] = array(
    'label' => t('Organisation name'),
    'description' => t('The organisation.'),
    'type' => 'text',
    'schema field' => 'organisation_name',
  );
  $info['c4m_domain']['properties']['description'] = array(
    'label' => t('Description'),
    'description' => t('Short description explaining what the domain is about.'),
    'type' => 'text',
    'schema field' => 'description',
  );
  $info['c4m_domain']['properties']['validator'] = array(
    'label' => t('Validator'),
    'description' => t('The validation type to validate if an email address with this domain is valid.'),
    'type' => 'text',
    'schema field' => 'validator',
  );
  $info['c4m_domain']['properties']['whitelist'] = array(
    'label' => t('Whitelist'),
    'description' => t('List email addresses that will be indicated as valid without validating them trough the validator. Add one email address per line.'),
    'type' => 'serial',
    'schema field' => 'whitelist',
  );

  return $info;
}

/**
 * C4mDomain entity class extending the Entity class.
 */
class C4mDomainEntity extends Entity {

  /**
   * Change the default URI from default/id to c4m_domain/id.
   */
  protected function defaultUri() {
    return array('path' => 'admin/c4m/domains/manage/' . $this->identifier());
  }

}
