<?php

/**
 * @file
 * Invite existing users to a group or project.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adding a link to the people overview page for admins.
 */
function c4m_og_invite_users_form__og_invite_form_alter(&$form, &$form_state, $form_id) {
  $form['manage_group_people'] = array(
    '#type' => 'link',
    '#href' => str_replace('/invite-users', '', $_GET['q']),
    '#title' => 'Manage all group memberships',
    '#access' => _c4m_features_og_members_is_power_user(),
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Define a custom access function that checks if the user is allowed to invite
 * other existing users to the group.
 */
function c4m_og_invite_users_menu_alter(&$items) {
  $items['group/%/%/admin/people/invite-users']['access callback'] = 'c4m_og_invite_users_access';
  $items['group/%/%/admin/people/invite-users/%user']['access callback'] = 'c4m_og_invite_users_access';
  $items['group/%/%/admin/people/invite-users/autocomplete']['access callback'] = 'c4m_og_invite_users_access';
}

/**
 * Return true if the user is allowed to invite and false if he isn't.
 *
 * Checks by user role and og_role against group visibility (Public/Private) and
 * Membership requests setting (Open/Moderated).
 */
function c4m_og_invite_users_access($group_type, $gid) {
  if (!og_context_is_init()) {
    // OG context was not determined yet, so register the path and return early.
    // The next time this access callback will be called, it will not enter
    // here.
    og_context_access_callback_register_path($_GET['q']);
    return;
  }

  if (!_og_invite_access($group_type, $gid)) {
    return FALSE;
  }

  if (_c4m_features_og_members_is_power_user()) {
    return TRUE;
  }

  // Get request type (open/moderated).
  $group = entity_load_single($group_type, $gid);
  $group_request_membership_value = c4m_og_get_group_membership_request($group);

  return $group_request_membership_value == 'open' && og_user_access('node', $gid, 'invite any user');
}

/**
 * Implements hook_mail_alter().
 *
 * Alters the email sent to users when they are invited to join a group. The
 * email subject and body are loaded from template files with the same name as
 * the email identification $key.
 */
function c4m_og_invite_users_mail_alter(&$message) {
  if ($message['key'] != 'send_invitation') {
    return;
  }
  module_load_include('inc', 'c4m_og_invite_users', 'c4m_og_invite_users.mail');
  $key = $message['key'] = 'group_invite_user';
  $variables = $message['params'];

  $message['subject'] = _c4m_og_invite_users_mail_text($key . '_subject', $variables);
  $message['body'][0] = _c4m_og_invite_users_mail_text($key . '_body', $variables);
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by the token_replace() call at the end of
 * _user_mail_text() to set up some additional tokens that can be
 * used in email messages generated by user_mail().
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values. If the 'group' element
 *   exists, it must contain a group node object.
 * @param mixed $options
 *   Unused parameter required by the token_replace() function.
 */
function c4m_og_invite_users_mail_tokens(array &$replacements, array $data, $options) {
  global $base_url;

  // Formulate the link for the user to accept/decline the invitation.
  $og_membership = og_get_membership('node', $data['group']->nid, 'user', $data['invitee']->uid);
  $hash = og_invite_generate_hash($og_membership);
  $answer_link = url(og_invite_answer_path_by_hash($data['group']->type, $data['group']->nid, $hash, 'answer'));
  $answer_link = str_replace("/group/group/", "/group/node/", $answer_link);

  $replacements['[personal:subject]'] = 'Invitation to join the ' . $data['group']->type . ' ' . $data['group']->title;
  $replacements['[user:member]'] = c4m_user_name($data['inviter']);

  // Make the full name lowercase and replace anything except a-z, 1-9  with
  // dashes, to create the profile URL.
  $inviter_profile = strtolower(trim($replacements['[user:member]']));
  $inviter_profile = c4m_og_human_to_machine_readable($inviter_profile);
  $inviter_profile = $base_url . '/users/' . $inviter_profile;
  $replacements['[user:public-profile-url]'] = $inviter_profile;

  $replacements['[user:invitee]'] = c4m_user_name($data['invitee']);
  $replacements['[group:node_type]'] = $data['group']->type;
  $replacements['[group:node_title]'] = $data['group']->title;
  $replacements['[personal:body]'] = $data['message'];
  $replacements['[group:accept_invite_url]'] = $answer_link;
  $replacements['[site:name]'] = variable_get('site_name', 'Capacity 4 More');
}
