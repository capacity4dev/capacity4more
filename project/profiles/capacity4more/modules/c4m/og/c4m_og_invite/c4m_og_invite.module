<?php

/**
 * @file
 * Code for og_invite and og_invite_people modules.
 */

/**
 * Implements hook_menu_alter().
 */
function c4m_og_invite_menu_alter(&$items) {
  $items['group/%/%/admin/people/invite']['access callback'] = 'c4m_og_invite_people_access';
  $items['group/%/%/admin/people/invite-users']['access callback'] = 'c4m_og_invite_users_access';
  $items['group/%/%/admin/people/invite-users/%user']['access callback'] = 'c4m_og_invite_users_access';
  $items['group/%/%/admin/people/invite-users/autocomplete']['access callback'] = 'c4m_og_invite_users_access';
}

/**
 * Invitation access callback - for inviting existing users [og_invite].
 *
 * Invoke c4m_og_invite_access() to check for access by user
 * role as well as the group's Membership requests field (Open/Moderated) and
 * the Group visibility (Public/Private).
 */
function c4m_og_invite_users_access($group_type, $gid) {
  if (_og_invite_access($group_type, $gid)) {
    return c4m_og_invite_access(NULL, $group_type, $gid);
  }

  return FALSE;
}

/**
 * Invitation access callback - for inviting new people [og_invite_people].
 *
 * Invoke c4m_og_invite_access() to check for access by user
 * role as well as the group's Membership requests field (Open/Moderated) and
 * the Group visibility (Public/Private).
 */
function c4m_og_invite_people_access($perm, $group_type, $gid) {
  if (og_invite_people_user_access_group($perm, $group_type, $gid)) {
    return c4m_og_invite_access($perm, $group_type, $gid);
  }

  return FALSE;
}

/**
 * Return true if the user is allowed to invite and false if he isn't.
 *
 * Checks by user role and og_role against group visibility (Public/Private) and
 * Membership requests setting (Open/Moderated).
 */
function c4m_og_invite_access($perm, $group_type, $gid) {
  if (user_access('administer site')) {
    return TRUE;
  }

  if (og_user_access($group_type, $gid, 'administrator member')) {
    return TRUE;
  }

  // Get request type (open/moderated).
  $group = entity_load_single($group_type, $gid);
  $group_request_membership_value = c4m_og_get_group_membership_request($group);

  return $group_request_membership_value == 'open' && og_user_access($group_type, $gid, 'member');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function c4m_og_invite_form__og_invite_people_new_users_form_alter(&$form, &$form_state, $form_id) {
  $form['og_invite_people']['personal_invite_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Add a message'),
    '#description' => t('Add a message to the invitation (optional)'),
    '#required' => FALSE,
  );
}

/**
 * Implements hook_mail_alter().
 */
function c4m_og_invite_mail_alter(&$message) {
  module_load_include('inc', 'c4m_og_invite', 'c4m_og_invite.mail');
  $key = $message['key'];
  $variables = $message['params'];

  $language = isset($message['language'])
    ? $message['language']
    : NULL;

  $message['subject'] = _c4m_og_invite_mail_text(
    $key . '_subject',
    $language,
    $variables
  );
  $message['body'][0] = _c4m_og_invite_mail_text(
    $key . '_body',
    $language,
    $variables
  );
}

/**
 * Implements hook_mail().
 *
 * Defines the Subject and Body of the message depending on the "key".
 * This hook isn't triggered :-) -to be deleted.
 */
function c4m_og_invite_mail($key, &$message, $variables) {
  module_load_include('inc', 'c4m_og_invite', 'c4m_og_invite.mail');

  $language = isset($message['language'])
    ? $message['language']
    : NULL;

  $message['subject'] .= _c4m_og_invite_mail_text(
    $key . '_subject',
    $language,
    $variables
  );
  $message['body'][] = _c4m_og_invite_mail_text(
    $key . '_body',
    $language,
    $variables
  );
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * This function is used by the token_replace() call at the end of
 * _user_mail_text() to set up some additional tokens that can be
 * used in email messages generated by user_mail().
 *
 * @param array $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param array $data
 *   An associative array of token replacement values. If the 'group' element
 *   exists, it must contain a group node object.
 * @param mixed $options
 *   Unused parameter required by the token_replace() function.
 */
function c4m_og_invite_mail_tokens(array &$replacements, array $data, $options) {
  if (isset($data['group'])) {
    $group = $data['group'];
    $owner = user_load($group->uid);

    $url_options = array(
      'absolute' => TRUE,
      'purl' => array(
        'provider' => 'og_purl|node',
        'id' => $group->nid,
      ),
    );

    $replacements['[group:dashboard_url]'] = url('<front>', $url_options);
    $replacements['[group:owner]'] = $owner->name;
    $replacements['[group:title]'] = $group->title;
  }
}
